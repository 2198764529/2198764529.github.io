[{"id":0,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","title":"编程语言","section":"理论知识","content":"写\n"},{"id":1,"href":"/notes/%E4%B8%AA%E4%BA%BA/","title":"个人","section":"  ","content":"写，就是为了记住。\n忘记过去就是背叛，不要忘记，不要悲伤\n明天是上帝给你的礼物，要好好珍惜。\n9e765-1576d d2d6f-7e6b7 7af4a-a7d63 e879b-5812e a2559-68288 4e19c-0cd14 8638e-51266 6016c-5fa8a 81f85-ca821 e52ba-02d72 322c5-d4e27 1eec4-b714c 1e460-7f1bf 7ea73-220d4 37c5a-929a8 beea2-77bce\n"},{"id":2,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/","title":"技术","section":"  ","content":"写，就是为了记住。\n忘记过去就是背叛，不要忘记，不要悲伤\n明天是上帝给你的礼物，要好好珍惜。\n"},{"id":3,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/408/","title":"理论知识","section":"理论知识","content":"写\n"},{"id":4,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/","title":"理论知识","section":"  ","content":"写\n"},{"id":5,"href":"/notes/%E9%A1%B9%E7%9B%AE/","title":"项目","section":"  ","content":"写，就是为了记住。\n忘记过去就是背叛，不要忘记，不要悲伤\n明天是上帝给你的礼物，要好好珍惜。\n"},{"id":6,"href":"/notes/%E6%9D%82%E6%80%9D/","title":"杂思","section":"  ","content":"写\n"},{"id":7,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E5%8A%9B%E6%89%A3/","title":"力扣","section":"理论知识","content":"写\n"},{"id":8,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%BA%93/","title":"数据库","section":"理论知识","content":"写\n"},{"id":9,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%80%83%E5%85%AC/","title":"考公","section":"理论知识","content":"\r总题量与分值\r行测-90分-90题-100分\r言表-15道-13分\r数关-15道-18分\r判推-40道-42分\r常识-15道-9分\r资分-15道-18分\r申论-3小时-5题-100分 行测\r言表\r主题词\r中心题\r标题题\r细节题\r方法\r关联词(找重点)-转折重点折后,因果在果后,条件是重点,并列是概括\r主题词-排除无主题词选项\r文构-总分在前,分总在后,总分总在中\r避陷阱-无中生有,偷换概念,偷换逻辑,不符文意\r非主题词\r排序题\r首-下定义,背景引入\r中-代词,关联词,逻辑\r尾,结论\r句空题\r首-概括,引入\r中,承上启下\r尾,结论\r词空题\r词义-侧重,搭配,程度,褒贬\r语境-转折,因果,并列\t"},{"id":10,"href":"/notes/%E9%A1%B9%E7%9B%AE/%E4%BA%A7%E5%93%81%E5%A4%A9%E6%A2%AF/","title":"产品天梯","section":"项目","content":"\r步骤\r配置项目环境: django + redis 获取产品数据 参考\rscrpay-redis项目: https://www.cnblogs.com/gltou/p/16424854.html "},{"id":11,"href":"/notes/","title":"  ","section":"好记性不如烂笔头","content":"写，就是为了记住。\n忘记过去就是背叛，不要忘记，不要悲伤\n明天是上帝给你的礼物，要好好珍惜。\n"},{"id":12,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/django/","title":"Django","section":"编程语言","content":"\r架构图\rcard \u0026#34;Brown（浏览器）\u0026#34; as Brown\rcard \u0026#34;Urls（路由）\u0026#34; as Urls\rcard \u0026#34;View（视图）\u0026#34; as View\rcard \u0026#34;Model（模型）\u0026#34; as Model\rcard \u0026#34;Template（模板）\u0026#34; as Template\rdatabase \u0026#34;database（数据库）\u0026#34; as database\rBrown --\u0026gt; Urls: 发送请求\rUrls --\u0026gt; View: 路由分发\rView \u0026lt;--\u0026gt; Model: 操作数据/返回结果\rView \u0026lt;--\u0026gt; Template:调用模板\rModel \u0026lt;--\u0026gt; database: ORM\rTemplate --\u0026gt; Brown: 返回响应 备注:\nORM: object relation mapping MVT架构层\rModel 模型层\rfrom django.db import models class Person(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) 模型\r模型操作\r以下模型操作创建、删除、更改、保存， 读取操作属于 QuerySet 那部分\n# 创建模型 class Book(models.Model): title = models.CharField(max_length=100) @classmethod def create(cls, title): book = cls(title=title) # do something with the book return book book = Book.create(\u0026#34;Pride and Prejudice\u0026#34;) # 删除模型 Model.delete(using=DEFAULT_DB_ALIAS, keep_parents=False) # 更改模型 Model.update(field1=\u0026#39;new_value\u0026#39;) # 保存模型:模型更改会保存到数据库 Model.save(*, force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None) 模型读取（QuerySet）\r以下是 Django QuerySet 中相关方法和操作符的详细分类及说明，按照你提供的结构整理：\n返回新 QuerySet 的方法\r# 1. filter() # 说明：返回符合条件的 QuerySet。 filtered_queryset = MyModel.objects.filter(field=\u0026#39;value\u0026#39;) # 2. exclude() # 说明：返回不符合条件的 QuerySet。 excluded_queryset = MyModel.objects.exclude(field=\u0026#39;value\u0026#39;) # 3. annotate() # 说明：为每个对象添加聚合值。 annotated_queryset = MyModel.objects.annotate(total=Count(\u0026#39;related_model\u0026#39;)) # 4. alias() # 说明：为特定字段或表达式创建别名。 aliased_queryset = MyModel.objects.annotate(new_field=F(\u0026#39;old_field\u0026#39;)) # 5. order_by() # 说明：对 QuerySet 进行排序。 ordered_queryset = MyModel.objects.order_by(\u0026#39;field\u0026#39;) # 6. reverse() # 说明：反转 QuerySet 的顺序。 reversed_queryset = MyModel.objects.order_by(\u0026#39;field\u0026#39;).reverse() # 7. distinct() # 说明：返回唯一的结果。 distinct_queryset = MyModel.objects.distinct() # 8. values() # 说明：返回字典形式的结果集。 values_queryset = MyModel.objects.values(\u0026#39;field1\u0026#39;, \u0026#39;field2\u0026#39;) # 9. values_list() # 说明：返回元组形式的结果集。 values_list_queryset = MyModel.objects.values_list(\u0026#39;field1\u0026#39;, flat=True) # 10. dates() # 说明：返回特定字段的日期列表。 dates_queryset = MyModel.objects.dates(\u0026#39;date_field\u0026#39;, \u0026#39;year\u0026#39;) # 11. datetimes() # 说明：返回特定字段的日期时间列表。 datetimes_queryset = MyModel.objects.datetimes(\u0026#39;datetime_field\u0026#39;, \u0026#39;month\u0026#39;) # 12. none() # 说明：返回一个空的 QuerySet。 none_queryset = MyModel.objects.none() # 13. all() # 说明：返回所有的实例。 all_queryset = MyModel.objects.all() # 14. union() # 说明：返回两个 QuerySet 的并集。 union_queryset = MyModel.objects.filter(field=\u0026#39;value1\u0026#39;).union(MyModel.objects.filter(field=\u0026#39;value2\u0026#39;)) # 15. intersection() # 说明：返回两个 QuerySet 的交集。 intersection_queryset = MyModel.objects.filter(field=\u0026#39;value1\u0026#39;).intersection(MyModel.objects.filter(field=\u0026#39;value2\u0026#39;)) # 16. difference() # 说明：返回两个 QuerySet 的差集。 difference_queryset = MyModel.objects.filter(field=\u0026#39;value1\u0026#39;).difference(MyModel.objects.filter(field=\u0026#39;value2\u0026#39;)) # 17. select_related() # 说明：使用 SQL JOIN 加载相关对象。 related_queryset = MyModel.objects.select_related(\u0026#39;related_model\u0026#39;) # 18. prefetch_related() # 说明：使用独立查询加载相关对象。 prefetched_queryset = MyModel.objects.prefetch_related(\u0026#39;related_model_set\u0026#39;) # 19. extra() # 说明：允许添加额外的 SQL 片段。 extra_queryset = MyModel.objects.extra(select={\u0026#39;new_field\u0026#39;: \u0026#39;old_field * 2\u0026#39;}) # 20. defer() # 说明：延迟加载特定字段。 deferred_queryset = MyModel.objects.defer(\u0026#39;field_to_defer\u0026#39;) # 21. only() # 说明：只加载特定字段。 only_queryset = MyModel.objects.only(\u0026#39;field1\u0026#39;, \u0026#39;field2\u0026#39;) # 22. using() # 说明：指定使用的数据库。 using_queryset = MyModel.objects.using(\u0026#39;my_database\u0026#39;) # 23. select_for_update() # 说明：在事务中锁定行以防止并发更新。 locked_queryset = MyModel.objects.select_for_update() # 24. raw() # 说明：执行原始 SQL 查询并返回模型实例。 raw_queryset = MyModel.objects.raw(\u0026#39;SELECT * FROM myapp_mymodel WHERE field=%s\u0026#39;, [value]) 返回新 QuerySet 的操作符\r# 1. AND（\u0026amp;） # 说明：连接多个查询条件。 combined_queryset = MyModel.objects.filter(field1=\u0026#39;value1\u0026#39;) \u0026amp; MyModel.objects.filter(field2=\u0026#39;value2\u0026#39;) # 2. OR（|） # 说明：连接多个查询条件。 combined_queryset = MyModel.objects.filter(field1=\u0026#39;value1\u0026#39;) | MyModel.objects.filter(field2=\u0026#39;value2\u0026#39;) # 3. XOR (^) # 说明：连接多个查询条件（不常用）。 combined_queryset = MyModel.objects.filter(field1=\u0026#39;value1\u0026#39;) ^ MyModel.objects.filter(field2=\u0026#39;value2\u0026#39;) 不返回 QuerySet 的方法\r# 1. get() # 说明：获取单个实例，若不存在则抛出异常。 single_instance = MyModel.objects.get(id=1) # 2. create() # 说明：创建并保存新实例。 new_instance = MyModel.objects.create(field=\u0026#39;value\u0026#39;) # 3. get_or_create() # 说明：获取现有实例或创建新实例。 instance, created = MyModel.objects.get_or_create(field=\u0026#39;value\u0026#39;) # 4. update_or_create() # 说明：更新现有实例或创建新实例。 instance, created = MyModel.objects.update_or_create(field=\u0026#39;value\u0026#39;, defaults={\u0026#39;field2\u0026#39;: \u0026#39;new_value\u0026#39;}) # 5. bulk_create() # 说明：批量创建多个实例。 MyModel.objects.bulk_create([MyModel(field=\u0026#39;value1\u0026#39;), MyModel(field=\u0026#39;value2\u0026#39;)]) # 6. bulk_update() # 说明：批量更新多个实例。 MyModel.objects.bulk_update([instance1, instance2], [\u0026#39;field\u0026#39;]) # 7. count() # 说明：返回 QuerySet 中的实例数量。 count = MyModel.objects.count() # 8. in_bulk() # 说明：返回一个字典，键为主键，值为实例。 bulk_dict = MyModel.objects.in_bulk() # 9. iterator() # 说明：返回一个迭代器，逐条获取数据。 for instance in MyModel.objects.iterator(): pass # 10. 使用服务器端游标 # 说明：通过使用服务器端游标来处理大数据集。 # 11. 没有服务器端游标 # 说明：默认情况下，Django 使用客户端游标。 # 12. latest() # 说明：返回最新的实例。 latest_instance = MyModel.objects.latest(\u0026#39;created_at\u0026#39;) # 13. earliest() # 说明：返回最早的实例。 earliest_instance = MyModel.objects.earliest(\u0026#39;created_at\u0026#39;) # 14. first() # 说明：返回第一个实例。 first_instance = MyModel.objects.first() # 15. last() # 说明：返回最后一个实例。 last_instance = MyModel.objects.last() # 16. aggregate() # 说明：对 QuerySet 进行聚合计算。 result = MyModel.objects.aggregate(Avg(\u0026#39;field\u0026#39;)) # 17. exists() # 说明：检查 QuerySet 是否存在任何实例。 exists = MyModel.objects.exists() # 18. contains() # 说明：用于查询是否包含特定值。 # 19. update() # 说明：更新 QuerySet 中的所有实例。 # 20. 有序的查询集 # 说明：QuerySet 默认是有序的。 # 21. delete() # 说明：删除 QuerySet 中的所有实例。 # 22. as_manager() # 说明：将 QuerySet 转换为管理器。 # 23. explain() # 说明：获取 SQL 查询的执行计划。 Field 查找\r# 1. exact # 说明：精确匹配。 MyModel.objects.filter(field__exact=\u0026#39;value\u0026#39;) # 2. iexact # 说明：不区分大小写的精确匹配。 MyModel.objects.filter(field__iexact=\u0026#39;value\u0026#39;) # 3. contains # 说明：包含匹配。 MyModel.objects.filter(field__contains=\u0026#39;value\u0026#39;) # 4. icontains # 说明：不区分大小写的包含匹配。 MyModel.objects.filter(field__icontains=\u0026#39;value\u0026#39;) # 5. in # 说明：匹配字段值在给定列表中。 MyModel.objects.filter(field__in=[\u0026#39;value1\u0026#39;, \u0026#39;value2\u0026#39;]) # 6. gt # 说明：大于匹配。 MyModel.objects.filter(field__gt=10) # 7. gte # 说明：大于等于匹配。 MyModel.objects.filter(field__gte=10) # 8. lt # 说明：小于匹配。 MyModel.objects.filter(field__lt=10) # 9. lte # 说明：小于等于匹配。 MyModel.objects.filter(field__lte=10) # 10. startswith # 说明：以指定值开头匹配。 MyModel.objects.filter(field__startswith=\u0026#39;value\u0026#39;) # 11. istartswith # 说明：不区分大小写的开头匹配。 MyModel.objects.filter(field__istartswith=\u0026#39;value\u0026#39;) # 12. endswith # 说明：以指定值结尾匹配。 MyModel.objects.filter(field__endswith=\u0026#39;value\u0026#39;) # 13. iendswith # 说明：不区分大小写的结尾匹配。 MyModel.objects.filter(field__endswith=\u0026#39;value\u0026#39;) 模型字段\r在 Django 中，模型字段用于定义数据库表的结构和数据类型。以下是 Django 常用模型字段的参考列表及其简要说明：\n字段选项\r# 1. null：指定数据库中是否允许该字段存储空值（NULL）。 field = models.CharField(max_length=100, null=True) # 2. blank：指定在表单中是否允许该字段为空。 field = models.CharField(max_length=100, blank=True) # 3. choices：提供一个可选值的列表，限制字段的可选值。 STATUS_CHOICES = [ (\u0026#39;draft\u0026#39;, \u0026#39;Draft\u0026#39;), (\u0026#39;published\u0026#39;, \u0026#39;Published\u0026#39;), ] field = models.CharField(max_length=10, choices=STATUS_CHOICES) # 4. db_column：指定数据库中该字段对应的列名。 field = models.CharField(max_length=100, db_column=\u0026#39;custom_column_name\u0026#39;) # 5. db_comment：在数据库中为该字段添加注释（仅支持某些数据库）。 field = models.CharField(max_length=100, db_comment=\u0026#39;This is a custom comment\u0026#39;) # 6. db_default：在数据库中为该字段设置默认值（仅在某些数据库中支持）。 field = models.CharField(max_length=100, db_default=\u0026#39;default_value\u0026#39;) # 7. db_index：为该字段创建数据库索引。 field = models.CharField(max_length=100, db_index=True) # 8. db_tablespace：指定数据库表空间（仅支持某些数据库）。 field = models.CharField(max_length=100, db_tablespace=\u0026#39;my_tablespace\u0026#39;) # 9. default：设置字段的默认值。 field = models.CharField(max_length=100, default=\u0026#39;default_value\u0026#39;) # 10. editable：指定该字段是否在 Django Admin 或表单中可编辑。 field = models.CharField(max_length=100, editable=False) # 11. error_messages：自定义该字段的错误消息。 field = models.CharField( max_length=100, error_messages={ \u0026#39;blank\u0026#39;: \u0026#39;This field cannot be empty.\u0026#39;, } ) # 12. help_text：提供字段的帮助文本，通常在表单中显示。 field = models.CharField(max_length=100, help_text=\u0026#39;Enter your name here.\u0026#39;) # 13. primary_key：指定该字段作为主键。 field = models.AutoField(primary_key=True) # 14. unique：确保该字段的值在数据库中是唯一的。 field = models.CharField(max_length=100, unique=True) # 15. unique_for_date：确保该字段的值在给定日期内是唯一的。 field = models.CharField(max_length=100, unique_for_date=\u0026#39;date_field\u0026#39;) # 16. unique_for_month：确保该字段的值在给定月份内是唯一的。 field = models.CharField(max_length=100, unique_for_month=\u0026#39;date_field\u0026#39;) # 17. unique_for_year：确保该字段的值在给定年份内是唯一的。 field = models.CharField(max_length=100, unique_for_year=\u0026#39;date_field\u0026#39;) # 18. verbose_name：为字段提供一个易于阅读的名称。 field = models.CharField(max_length=100, verbose_name=\u0026#39;Full Name\u0026#39;) # 19. validators：提供一个验证器列表，用于验证字段值的有效性。 from django.core.validators import MinValueValidator field = models.IntegerField(validators=[MinValueValidator(0)]) 字段类型\r# 1. AutoField：自动递增的整数字段，通常用于主键。 id = models.AutoField(primary_key=True) # 2. BigAutoField：自动递增的大整数字段，适用于需要更大范围的主键。 id = models.BigAutoField(primary_key=True) # 3. BigIntegerField：存储大整数。 large_number = models.BigIntegerField() # 4. BinaryField：用于存储二进制数据。 data = models.BinaryField() # 5. BooleanField：存储布尔值（True 或 False）。 is_active = models.BooleanField(default=True) # 6. CharField：用于存储字符串，需指定最大长度。 name = models.CharField(max_length=100) # 7. DateField：用于存储日期。 birth_date = models.DateField() # 8. DateTimeField：用于存储日期和时间。 created_at = models.DateTimeField(auto_now_add=True) # 9. DecimalField：存储固定精度的十进制数，需指定最大位数和小数位数。 price = models.DecimalField(max_digits=10, decimal_places=2) # 10. DurationField：用于存储时间间隔。 duration = models.DurationField() # 11. EmailField：用于存储电子邮件地址，自动验证格式。 email = models.EmailField() # 12. FileField：用于存储文件，需指定上传路径。 file = models.FileField(upload_to=\u0026#39;uploads/\u0026#39;) # 13. FilePathField：用于存储文件系统路径。 file_path = models.FilePathField(path=\u0026#39;/path/to/files\u0026#39;) # 14. FloatField：存储浮点数。 price = models.FloatField() # 15. GenericIPAddressField：用于存储 IPv4 或 IPv6 地址。 ip_address = models.GenericIPAddressField() # 16. ImageField：专门用于存储图像文件，需指定上传路径。 image = models.ImageField(upload_to=\u0026#39;images/\u0026#39;) # 17. IntegerField：存储整数。 age = models.IntegerField() # 18. JSONField：用于存储 JSON 数据（仅支持 PostgreSQL 和 SQLite）。 data = models.JSONField() # 19. PositiveBigIntegerField：存储大正整数。 positive_large_number = models.PositiveBigIntegerField() # 20. PositiveIntegerField：存储正整数。 positive_number = models.PositiveIntegerField() # 21. PositiveSmallIntegerField：存储小正整数。 positive_small_number = models.PositiveSmallIntegerField() # 22. SlugField：用于存储 URL 友好的字符串，通常用于简化 URL。 slug = models.SlugField(max_length=50) # 23. SmallAutoField：自动递增的小整数字段。 id = models.SmallAutoField(primary_key=True) # 24. SmallIntegerField：存储小整数。 small_number = models.SmallIntegerField() # 25. TextField：用于存储长文本。 description = models.TextField() # 26. TimeField：用于存储时间。 time = models.TimeField() # 27. URLField：用于存储 URL，自动验证格式。 website = models.URLField() # 28. UUIDField：用于存储 UUID。 uuid = models.UUIDField(auto_created=True, editable=False) 字段约束\r# CheckConstraint：用于定义检查约束。 check_constraint = models.CheckConstraint( check=Q(field_name__gte=0), name=\u0026#39;check_positive_value\u0026#39; ) # UniqueConstraint：用于定义唯一约束。 # 1. deferrable：指定约束是否可延迟检查。 from django.db.models import Deferrable, UniqueConstraint UniqueConstraint( name=\u0026#34;unique_order\u0026#34;, fields=[\u0026#34;order\u0026#34;], deferrable=Deferrable.DEFERRED, ) # 2. include：用于指定在唯一约束中包含的其他字段。 UniqueConstraint(name=\u0026#34;unique_booking\u0026#34;, fields=[\u0026#34;room\u0026#34;, \u0026#34;date\u0026#34;], include=[\u0026#34;full_name\u0026#34;]) # 3. opclasses：用于定义字段的操作类。 UniqueConstraint( name=\u0026#34;unique_username\u0026#34;, fields=[\u0026#34;username\u0026#34;], opclasses=[\u0026#34;varchar_pattern_ops\u0026#34;] ) # 4. nulls_distinct：指定 NULL 值是否被视为不同的值。 UniqueConstraint(name=\u0026#34;ordering\u0026#34;, fields=[\u0026#34;ordering\u0026#34;], nulls_distinct=False) View 视图层\rTemplate 模板层\r命令\rDjango 基于什么架构?\rDjango 基于MTV架构，即Model Template Controler, 模型、模版、控制器 MTV 是由 MVC 改造而来。\nDjango 中间件的方法\r.process_request : 请求进来时,权限认证 .process_view : 路由匹配之后,能够得到视图函数 .process_exception : 异常时执行 .process_template_responseprocess : 模板渲染时执行 .process_response : 请求有响应时执行 WSGI 是什么?\rWSGI是Python在处理HTTP请求时，规定的一种处理方法.\n什么是 FBV 和 CBV\rFBV（function base views） 基于函数的视图，就是在视图里使用函数处理请求。 CBV（class base views） 基于类的视图，就是在视图里使用类处理请求。 参考链接:\n2023最新高级难度Django面试题,包含答案。刷题必备！记录一下。 - 小满独家 - 博客园 (cnblogs.com) 2023最新中级难度Flask框架面试题,包含答案。刷题必备！记录一下。 - 小满独家 - 博客园 (cnblogs.com) 一杯茶的时间，搞懂 RESTful API (apifox.com) Django 简介 | 菜鸟教程 (runoob.com) "},{"id":13,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/","title":"git操作","section":"技术","content":"\r示意图\rcloud Remote\rcloud Repository\rcloud Index\rcloud Workspace\rRemote -\u0026gt; Repository : fetch/clone\rRemote \u0026lt;- Repository : push\rRepository \u0026lt;- Index : commit\rIndex \u0026lt;-- Workspace : add\rRepository -\u0026gt; Workspace : checkout\rRemote --\u0026gt; Workspace : pull Workspace：工作区 Index / Stage：暂存区 Repository：本地仓库区 Remote：远程仓库区 git 常用命令\r查看信息\rgit show: 查看 commit 详细信息\rgit show \u0026lt;commit_id\u0026gt; \u0026lt;option\u0026gt; --stat: 仅显示更改统计信息，而不显示实际的文件差异。 --name-only: 仅显示已更改的文件名，而不显示实际的文件差异。 --name-status: 显示已更改的文件名及其更改状态（例如，新建、修改或删除）。 --pretty=\u0026lt;format\u0026gt;: 自定义输出格式，例如 %h 表示提交哈希值，%an 表示作者名字等。 --abbrev-commit: 使用缩写形式的提交哈希值。 --no-patch: 不显示文件差异，只显示提交信息。 --cc: 在输出中包含相关提交者的电子邮件地址。 --encoding=\u0026lt;encoding\u0026gt;: 指定输出编码。 --notes[=\u0026lt;ref\u0026gt;]: 显示与提交相关的注释。 --raw: 以原始格式显示提交信息。 --binary: 将二进制文件视为已更改，即使它们没有实际更改。 --textconv: 使用指定的文本转换器处理差异。 --ignore-space-at-eol: 忽略行尾空格的差异。 --ignore-space-change: 忽略空白字符更改的差异。 --ignore-all-space: 忽略所有空白字符的差异。 --ignore-cr-at-eol: 忽略行尾回车符的差异。 --ignore-blank-lines: 忽略空行的差异。 --patience: 使用 patience diff 算法进行比较。 --histogram: 显示每个文件的更改次数直方图。 --unified=\u0026lt;n\u0026gt;: 设置合并差异的上下文行数，默认为3。 --indent-heuristic: 启用启发式缩进检测。 --no-indent-heuristic: 禁用启发式缩进检测。 --pickaxe-all: 当执行 git log -S\u0026lt;string\u0026gt; 时，查找包含该字符串的所有提交。 --pickaxe-regex: 当执行 git log -S\u0026lt;regex\u0026gt; 时，查找包含匹配正则表达式的提交。 --pickaxe-index: 当执行 git log -S\u0026lt;string\u0026gt; 时，仅查找索引中包含该字符串的提交。 --pickaxe-refs: 当执行 git log -S\u0026lt;string\u0026gt; 时，仅查找引用中包含该字符串的提交。 --pickaxe-ignore-refs: 当执行 git log -S\u0026lt;string\u0026gt; 时，忽略包含该字符串的引用。 --pickaxe-break: 当执行 git log -S\u0026lt;string\u0026gt; 时，在找到第一个匹配项后停止搜索。 --pickaxe-continue: 当执行 git log -S\u0026lt;string\u0026gt; 时，继续搜索其他匹配项。 --pickaxe-trust-flags: 当执行 git log -S\u0026lt;string\u0026gt; 时，根据文件的标志（如已删除或已移动）跳过某些文件。 git help: 显示 Git 命令的帮助信息\rgit help \u0026lt;command\u0026gt; \u0026lt;option\u0026gt; --all 或 -a: 显示所有可用的 Git 命令的帮助信息。 --guide 或 -g: 显示 Git 指南，这是一份详细的教程，介绍如何使用 Git 进行版本控制。 --info 或 -i: 显示有关 Git 配置和操作的信息。 --worktree 或 -w: 显示有关工作树（working tree）的信息。 --html-path: 指定生成 HTML 帮助文档的路径。 --web: 在默认浏览器中打开在线 Git 文档。 --include-deps: 包括依赖项的帮助信息。 --verbose 或 -v: 显示更详细的帮助信息。 --no-browser: 不尝试使用默认浏览器打开在线文档。 --usage 或 -u: 仅显示命令的基本用法。 --help 或 -h: 显示简短的帮助信息。 git status: 显示工作目录和暂存区的相关信息\rgit status \u0026lt;option\u0026gt; --short: 以简短的形式显示状态，只显示文件名而不显示详细信息。 --long: 以详细的形式显示状态，包括文件名、更改类型和更改数量。 --branch: 显示当前分支的名称。 --show-stash: 显示有关 stash 的信息（如果有的话）。 --porcelain: 以易于解析的格式输出状态信息，主要用于脚本和程序中。 --untracked-files=\u0026lt;mode\u0026gt;: 控制未跟踪文件的显示方式。可用的模式有 all、normal 和 no。 --ignored: 显示被忽略的文件。 --ignored=matching: 仅显示与指定模式匹配的被忽略文件。 --ignored=excludes: 仅显示被排除在 .gitignore 文件中的文件。 --ignored=only: 仅显示被忽略的文件，不包括被排除的文件。 --ignored=others: 显示除被忽略和被排除之外的其他文件。 --renames: 显示已重命名的文件。 --find-renames=\u0026lt;n\u0026gt;: 设置查找重命名的最大距离（默认为100%）。 --abbrev=\u0026lt;n\u0026gt;: 设置缩写哈希的长度，默认为7。 --column: 以列的形式显示输出，适用于宽度有限的终端。 --ahead-behind: 显示本地分支相对于远程分支的领先或落后情况。 --branches: 显示所有分支及其关联的工作树状态。 --tags: 显示所有标签及其关联的工作树状态。 --verbose: 显示更详细的输出，包括每个文件的更改行数。 git diff: 显示工作区和暂存区的差异\r以下是 git diff 命令的一些常用参数：\ngit diff \u0026lt;option\u0026gt; --name-only: 仅显示差异文件的名称，而不显示具体的差异内容。 --name-status: 显示每个更改的文件的状态（例如，新建、修改或删除）。 --stat: 显示每个更改的文件的简短统计信息，包括插入和删除的行数。 --summary: 显示所有更改的总览，包括插入、删除和重命名的文件数量。 --patch: 显示完整的差异补丁，类似于 git show 命令的输出。 --no-prefix: 不显示文件名前的 a/ 和 b/ 前缀，这在比较分支时很有用。 --ignore-space-at-eol: 忽略行尾空格的差异。 --ignore-space-change: 忽略空白字符更改的差异。 --ignore-all-space: 忽略所有空白字符的差异。 --ignore-cr-at-eol: 忽略行尾回车符的差异。 --ignore-blank-lines: 忽略空行的差异。 --textconv: 使用指定的文本转换器处理差异。 --word-diff: 按单词而不是按行进行比较。 --word-diff-regex=\u0026lt;regex\u0026gt;: 指定用于单词比较的正则表达式。 --color[=\u0026lt;when\u0026gt;]: 控制是否以及何时使用颜色来显示差异。 --no-color: 不使用颜色显示差异。 --no-ext-diff: 禁用外部差异工具的使用。 --no-index: 不检查索引中的文件是否存在。 --cached: 仅显示暂存区与最后一次提交之间的差异。 --quiet: 减少输出的信息量。 --binary: 将二进制文件视为已更改，即使它们没有实际更改。 --abbrev=\u0026lt;n\u0026gt;: 设置缩写哈希的长度，默认为7。 --full-index: 显示完整的索引条目，包括文件路径和模式。 --full-tree: 显示完整的树对象，包括文件路径和模式。 --unified=\u0026lt;n\u0026gt;: 设置合并差异的上下文行数，默认为3。 --indent-heuristic: 启用启发式缩进检测。 --no-indent-heuristic: 禁用启发式缩进检测。 --patience: 使用 patience diff 算法进行比较。 --histogram: 显示每个文件的更改次数直方图。 --diff-filter=[(A|C|D|M|R|T|U|X|B)...]: 只显示满足给定过滤器条件的更改。 --find-copies-harder: 更努力地查找复制块。 --pickaxe-all: 当执行 git log -S\u0026lt;string\u0026gt; 时，查找包含该字符串的所有提交。 --pickaxe-regex: 当执行 git log -S\u0026lt;regex\u0026gt; 时，查找包含匹配正则表达式的提交。 --pickaxe-index: 当执行 git log -S\u0026lt;string\u0026gt; 时，仅查找索引中包含该字符串的提交。 --pickaxe-refs: 当执行 git log -S\u0026lt;string\u0026gt; 时，仅查找引用中包含该字符串的提交。 --pickaxe-ignore-refs: 当执行 git log -S\u0026lt;string\u0026gt; 时，忽略包含该字符串的引用。 --pickaxe-break: 当执行 git log -S\u0026lt;string\u0026gt; 时，在找到第一个匹配项后停止搜索。 --pickaxe-continue: 当执行 git log -S\u0026lt;string\u0026gt; 时，继续搜索其他匹配项。 --pickaxe-trust-flags: 当执行 git log -S\u0026lt;string\u0026gt; 时，根据文件的标志（如已删除或已移动）跳过某些文件。 git log: 列出所有提交日志信息\rgit log \u0026lt;option\u0026gt; --oneline: 以一行的形式显示每个提交的简短信息。 --graph: 以图形化的方式显示分支和合并历史。 --all: 显示所有分支的历史记录，包括已经被删除的分支。 --author=\u0026lt;pattern\u0026gt;: 仅显示指定作者的提交。 --since=\u0026lt;date\u0026gt;: 仅显示从指定日期之后的提交。 --until=\u0026lt;date\u0026gt;: 仅显示直到指定日期之前的提交。 --grep=\u0026lt;pattern\u0026gt;: 仅显示包含指定模式的提交消息。 --decorate: 在输出中添加分支名和标签名。 --pretty=\u0026lt;format\u0026gt;: 自定义输出格式，例如 %h 表示提交哈希值，%an 表示作者名字等。 -n: 限制显示的提交数量。 --follow: 跟踪文件的变化，即使它们被重命名或移动。 -- \u0026lt;path\u0026gt;: 仅显示与指定路径相关的提交。 git shortlog：汇总所有贡献者的提交记录\rgit shortlog 是一个用于显示提交者及其提交数量的命令。以下是一些常用的 git shortlog 选项：\n-s: 按提交数量排序，降序排列。 -n: 限制输出的行数。 --numbered: 为每个提交者添加编号。 --summary: 仅显示提交者及其提交数量的总和。 --email: 显示提交者的电子邮件地址而不是名字。 --eol: 在每个提交者之间插入空行。 --pretty=\u0026lt;format\u0026gt;: 自定义输出格式，例如 %h 表示提交哈希值，%an 表示作者名字等。 --since=\u0026lt;date\u0026gt;: 仅显示从指定日期之后的提交。 --until=\u0026lt;date\u0026gt;: 仅显示直到指定日期之前的提交。 --author=\u0026lt;pattern\u0026gt;: 仅显示指定作者的提交。 --committer=\u0026lt;pattern\u0026gt;: 仅显示指定提交者的提交。 --grep=\u0026lt;pattern\u0026gt;: 仅显示包含指定模式的提交消息。 --perl-regexp: 使用 Perl 正则表达式进行匹配。 --all: 显示所有分支的历史记录，包括已经被删除的分支。 --branches[=\u0026lt;pattern\u0026gt;]: 仅显示指定分支或符合模式的分支的提交。 --tags[=\u0026lt;pattern\u0026gt;]: 仅显示指定标签或符合模式的标签的提交。 --merges: 仅显示合并提交。 --no-merges: 不显示合并提交。 --patch: 显示完整的差异补丁。 -- \u0026lt;path\u0026gt;: 仅显示与指定路径相关的提交。 这些选项可以组合使用以满足特定的需求。例如，要查看最近10个提交者的详细信息，可以使用以下命令：\ngit shortlog -s -n 10 --pretty=fuller git describe： 给出一个可读的名称来表示最近的提交\rgit describe 是一个用于获取当前提交的标签、分支名和相对位置的命令。以下是 git describe 的一些常用选项：\n--tags: 仅显示标签信息，忽略分支名和相对位置。 --all: 显示所有提交的信息，包括标签、分支名和相对位置。 --long: 显示完整的提交哈希值。 --abbrev=\u0026lt;n\u0026gt;: 设置提交哈希值的缩写长度，默认为7。 --dirty: 如果工作区有未提交的更改，则在输出中添加 -dirty 标记。 --always: 总是显示完整的提交哈希值，即使它与最近的标签匹配。 --match \u0026lt;pattern\u0026gt;: 仅显示符合指定模式的提交信息。 --exclude \u0026lt;pattern\u0026gt;: 排除符合指定模式的提交信息。 --first-parent: 只显示第一个父提交的信息，忽略合并提交。 --contains \u0026lt;commit\u0026gt;: 显示包含指定提交的所有提交信息。 --debug: 显示调试信息。 这些选项可以组合使用以满足特定的需求。例如，要查看当前提交的完整描述，可以使用以下命令：\ngit describe --long --all 推送和更新信息\rgit add: 将文件添加到暂存区\rgit add 命令用于将文件更改添加到暂存区，以便进行提交。以下是一些常用的 git add 选项：\n--all 或 -A: 将所有已跟踪的文件和未跟踪的文件都添加到暂存区。 --update 或 -u: 仅将已跟踪的文件中发生更改的文件添加到暂存区。 --patch 或 -p: 进入交互模式，允许你选择要添加到暂存区的更改块。 --interactive 或 -i: 进入交互模式，允许你选择要添加到暂存区的文件和更改块。 --dry-run: 模拟运行 git add，显示将要添加的文件列表而不实际执行添加操作。 --ignore-removal: 忽略被删除的文件，即使它们之前已被添加到暂存区。 --intent-to-add: 将文件标记为“意图添加”，表示这些文件将被添加到暂存区，但尚未提交。 --refresh: 更新工作树以匹配暂存区中的更改，但不修改暂存区。 --no-all: 与 --all 相反，不添加所有文件到暂存区。 --no-ignore-removal: 与 --ignore-removal 相反，不忽略被删除的文件。 --chmod=(+|-)x: 改变文件的可执行权限。例如，--chmod=+x 会添加可执行权限，而 --chmod=-x 会移除可执行权限。 --pathspec-from-file=\u0026lt;file\u0026gt;: 从指定的文件中读取路径规范，并将其作为参数传递给 git add。 这些选项可以组合使用以满足特定的需求。例如，要将一个名为 myfile.txt 的文件添加到暂存区并忽略被删除的文件，可以使用以下命令：\ngit add --ignore-removal myfile.txt git commit: 将文件提交到暂存区\rgit commit 命令有一些选项可以用来定制提交的行为。以下是一些常用的 git commit 选项：\n-a 或 --all: 自动将所有已跟踪的文件暂存并提交。 -m \u0026lt;message\u0026gt; 或 --message=\u0026lt;message\u0026gt;: 使用指定的提交信息进行提交。 -e 或 --edit: 在编辑器中编辑提交信息，而不是直接在命令行中输入。 -n 或 --no-verify: 跳过预提交钩子（pre-commit hooks）的执行。 --amend: 修改最近的一次提交，将暂存区中的更改添加到该提交中。 --allow-empty: 允许创建空提交，即使没有更改被暂存。 --dry-run: 显示将要进行的提交操作，但不实际执行提交。 --no-post-rewrite: 在使用 --amend 或 --reset 时，不更新引用日志。 --no-gpg-sign: 不使用 GPG 签名提交。 --signoff: 在提交信息末尾添加一行 \u0026ldquo;Signed-off-by: Your Name your@email.com\u0026quot;。 --template=\u0026lt;file\u0026gt;: 使用指定的模板文件作为提交信息的格式。 --cleanup-mode=\u0026lt;mode\u0026gt;: 设置清理模式，用于处理提交过程中产生的临时文件。 这些选项可以组合使用以满足特定的需求。例如，要创建一个带有特定提交信息的提交，可以使用以下命令：\ngit commit -m \u0026#34;This is my commit message\u0026#34; git fetch: 获取最新的文件, 但不会合并\rgit fetch 命令用于从远程仓库获取最新的提交，但不会自动合并到本地分支。以下是 git fetch 的一些常用选项：\n--all 或 -a: 获取所有远程仓库的更新。 --prune: 删除远程仓库中已经不存在的分支对应的本地引用。 --dry-run: 显示将要执行的操作，但并不实际执行。 --force: 强制覆盖本地分支的历史记录，慎用此选项。 --tags: 获取所有标签的更新。 \u0026lt;repository\u0026gt;: 指定要获取更新的远程仓库名称。 \u0026lt;refspec\u0026gt;: 指定要获取的分支或标签的名称。 例如，要获取名为 origin 的远程仓库的所有更新，并删除不存在的分支，可以使用以下命令：\ngit fetch --all --prune origin git pull: fetch和merge的组合命令, 即获取最新版本接着合并\rgit pull 命令用于从远程仓库拉取代码并合并到本地分支。以下是一些常用的 git pull 选项：\n--rebase: 使用变基（rebase）而不是合并（merge）来更新当前分支。这可以使得提交历史更加整洁，但可能会改变提交的哈希值。 --squash: 将多个提交压缩成一个提交。这对于整理提交历史很有用，特别是当你需要将多个小的提交合并为一个大的提交时。 --commit: 在压缩提交时，保留每个提交的消息和作者信息。 --edit: 在压缩提交时，允许编辑最终的提交消息。 --ff: 仅当目标分支与当前分支具有直接关系时才执行快速前进（fast-forward）。如果无法进行快速前进，则不会执行拉取操作。 --no-ff: 总是创建一个新的合并提交，即使可以进行快速前进。 --strategy-option=\u0026lt;option\u0026gt;: 指定合并策略选项。例如，--strategy-option=theirs 会使用 \u0026ldquo;theirs\u0026rdquo; 策略，即总是选择远程仓库的版本。 --allow-unrelated-histories: 允许合并两个没有共同祖先的历史记录。默认情况下，Git 不允许这样做，因为这可能导致混乱的提交历史。 --recurse-submodules: 递归地更新所有子模块。 --depth=\u0026lt;number\u0026gt;: 限制克隆深度，只获取最近的一定数量的提交。这可以减少克隆的时间和空间需求。 --single-branch: 只克隆单个分支，而不是所有分支。 --tags: 除了代码之外，还拉取标签。 --force: 强制拉取，即使本地修改未提交或冲突未解决。 这些选项可以根据具体的需求组合使用。例如，要使用变基并压缩提交，可以运行以下命令：\ngit pull --rebase --squash git push: 将 commit 信息提交\rgit push 命令用于将本地分支的提交推送到远程仓库。以下是一些常用的 git push 选项：\n--all 或 -a: 将所有分支的更改推送到远程仓库，包括那些没有被跟踪的分支。 --force 或 -f: 强制推送，即使远程分支上有新的提交，也会覆盖它们。请注意，这可能会导致其他人的工作丢失，因此谨慎使用。 --dry-run: 模拟推送操作，显示将要执行的操作而不实际执行。这对于检查推送是否会成功很有用。 --tags: 推送所有标签到远程仓库。 --set-upstream 或 -u: 设置当前分支与远程分支之间的关联关系，以便将来可以简化推送和拉取操作。 --delete \u0026lt;branch\u0026gt;: 删除远程仓库上的指定分支。 --mirror: 镜像推送，将所有本地分支和标签都推送到远程仓库，但不包括工作区中的未跟踪文件。 --no-verify: 跳过预推送钩子（pre-push hooks）的执行。 --follow-tags: 在推送时自动推送标签。 --atomic: 确保所有引用都被一起推送，如果其中一个失败，则撤销所有推送。 --progress: 显示推送进度。 --verbose 或 -v: 显示详细的操作信息。 --recurse-submodules=\u0026lt;pathspec\u0026gt;: 递归推送子模块的更改。 --thin: 使用 \u0026ldquo;thin\u0026rdquo; 协议进行推送，减少数据传输量。 --receive-pack=\u0026lt;receive-pack\u0026gt;: 指定接收包的大小限制。 --upload-pack=\u0026lt;upload-pack\u0026gt;: 指定上传包的大小限制。 这些选项可以根据具体需求组合使用。例如，要将本地分支 my-feature 推送到远程仓库并设置为上游分支，可以使用以下命令：\ngit push -u origin my-feature git tag: 给 commit 打上 标签\r以下是 git tag 命令的参数和选项：\n-l 或 --list：列出所有标签。 -a 或 --annotate：创建带注解的标签。 -m \u0026lt;message\u0026gt;：指定注解标签的消息（与 -a 一起使用）。 -s 或 --sign：创建签名标签（需要 GPG 签名）。 -f 或 --force：强制创建或更新已有标签。 -d 或 --delete：删除标签。 -n\u0026lt;num\u0026gt;：显示标签关联的提交的前几行信息。 -v 或 --verify：校验 GPG 签名的标签。 --contains \u0026lt;commit\u0026gt;：显示包含特定提交的所有标签。 -o \u0026lt;file\u0026gt;：输出标签到指定文件。 git tag [选项] [\u0026lt;tagname\u0026gt;] [\u0026lt;commit\u0026gt;] 分支管理\rgit branch: 列出,新建或删除分支\r以下是 git branch 命令的选项：\n-a 或 --all：列出本地和远程追踪的所有分支。 -d \u0026lt;branch\u0026gt;：删除分支（如果该分支未被完全合并，Git 会阻止删除）。 -D \u0026lt;branch\u0026gt;：强制删除分支（即使该分支未被完全合并）。 -m \u0026lt;old\u0026gt; \u0026lt;new\u0026gt;：重命名分支。 -M \u0026lt;old\u0026gt; \u0026lt;new\u0026gt;：强制重命名分支，即使新名称已存在。 -r 或 --remotes：仅列出远程分支。 -v 或 --verbose：显示每个分支的最后一次提交信息。 --contains \u0026lt;commit\u0026gt;：列出包含指定提交的所有分支。 --no-merged \u0026lt;commit\u0026gt;：列出未合并指定提交的分支。 --merged \u0026lt;commit\u0026gt;：列出已合并指定提交的分支。 --sort=\u0026lt;key\u0026gt;：根据特定键值对分支进行排序（如 -sort=committerdate）。 --list：列出分支（可以与模式匹配符一起使用，如 git branch --list 'feature/*'）。 git checkout: 切换分支或恢复工作区文件\r以下是 git checkout 命令的所有参数：\n-b \u0026lt;branch\u0026gt;：创建并切换到一个新分支。 -B \u0026lt;branch\u0026gt;：创建新分支或强制重置现有分支到新的起点并切换到该分支。 \u0026lt;branch\u0026gt;：切换到指定的分支。 \u0026lt;commit\u0026gt;：切换到指定的提交（以“分离头指针”模式）。 --orphan \u0026lt;new-branch\u0026gt;：创建一个没有历史记录的新分支（孤立分支）。 -m 或 --merge：尝试保留当前的本地更改，并在切换分支时将它们应用到新分支上。 -f 或 --force：强制切换分支，即使有未提交的更改。 --track \u0026lt;remote\u0026gt;/\u0026lt;branch\u0026gt;：创建本地分支，并设置为跟踪指定的远程分支。 --no-track：创建分支时不自动设置跟踪。 --detach：切换到指定的提交（以“分离头指针”模式），不指向任何分支。 --recurse-submodules[=\u0026lt;checkout\u0026gt;]：更新子模块，默认为 checkout，可指定 on-demand。 --pathspec-from-file \u0026lt;file\u0026gt;：从指定文件中读取路径模式。 --ignore-skip-worktree-bits：在切换分支时忽略 skip-worktree 位的设置。 这些选项可以帮助你在 Git 中切换分支、提交或其他引用，并处理各种切换场景。\ngit merge: 合并分支\r以下是 git merge 命令的所有参数：\n--no-ff：禁用“快进”合并，即使可以快进，也会创建一个新的合并提交。 --ff：允许“快进”合并（默认行为）。 --ff-only：仅执行“快进”合并，如果不能快进，合并将会终止。 --squash：将所有提交“压缩”成一个提交，而不是逐个合并，保留更改但不自动提交。 --commit：在合并完成后自动创建合并提交（默认行为）。 --no-commit：完成合并但不创建提交，让用户手动提交。 --edit 或 -e：允许编辑默认的合并提交消息。 --no-edit：使用默认的合并提交消息而不进入编辑器。 --log[=\u0026lt;n\u0026gt;]：包括提交日志信息，并显示合并的提交记录，n 是显示的提交数量。 --no-log：不显示合并提交的日志信息。 -m \u0026lt;message\u0026gt;：使用指定的提交消息替代默认的合并提交消息。 --strategy=\u0026lt;strategy\u0026gt;：选择合并策略，如 recursive、resolve、ours、theirs。 -X\u0026lt;option\u0026gt;：为合并策略指定额外选项，如 -Xignore-all-space 忽略所有空格差异。 --abort：取消当前的合并过程，恢复到合并前的状态。 --continue：继续处理冲突后暂停的合并过程。 --progress：显示合并的进度信息（默认行为，适用于大规模合并）。 --no-progress：不显示合并进度信息。 --verify-signatures：验证合并提交的 GPG 签名。 --no-verify-signatures：跳过 GPG 签名验证。 这些参数可以帮助控制合并行为，包括处理冲突、编辑提交消息和选择合并策略等。\ngit mergetool: 解决合并冲突\r以下是 git mergetool 命令的所有参数：\n--tool=\u0026lt;tool\u0026gt;：指定使用的合并工具，例如 vimdiff、meld 等。如果不指定，会使用默认工具。 --tool-help：列出可用的合并工具以及它们的使用帮助。 -y 或 --prompt：显示每个文件的提示，询问是否要使用 mergetool 处理该文件（默认行为）。 -t 或 --trust-exit-code：信任合并工具的退出代码，不强制用户在退出时确认。 --no-prompt：不提示，直接运行合并工具处理所有冲突的文件。 -O \u0026lt;orderfile\u0026gt;：按照指定文件的顺序处理冲突文件。 --guitool=\u0026lt;guitool\u0026gt;：指定使用图形界面的合并工具。 --no-gui：禁用 GUI，强制使用命令行工具。 --[no-]symlinks：在工具中启用或禁用符号链接处理。 --no-index：允许在不涉及文件索引的情况下运行合并工具。 这些选项帮助你在使用图形或命令行工具时解决 Git 合并冲突。\n你以后处理合并冲突时喜欢用哪个工具？想让我帮你记下这些偏好吗？\ngit rebase：将一个 commit 重新合并到当前分支\r以下是 git rebase 命令的所有参数：\n-i 或 --interactive：以交互模式进行 rebase，让你可以修改、合并、删除或重新排列提交。 -p 或 --preserve-merges：保留合并提交，尝试重放分支的合并历史。 --continue：继续处理冲突后暂停的 rebase 过程。 --abort：终止 rebase 过程，并恢复到 rebase 开始前的状态。 --skip：跳过当前冲突的提交，并继续 rebase 过程。 --onto \u0026lt;newbase\u0026gt;：将当前分支重新定位到指定的 newbase，而不是当前的上游分支。 --apply：使用补丁而不是直接应用提交的方式来执行 rebase。 --merge：使用合并策略进行 rebase，而不是默认的基于应用提交的方法。 --no-ff：禁用“快进”模式，即使可以快进也会创建新的提交。 --autosquash：自动将标记为 fixup! 或 squash! 的提交与目标提交合并。 --autostash：在执行 rebase 之前自动暂存未提交的更改，并在 rebase 完成后恢复。 --keep-empty：在 rebase 过程中保留空提交。 --committer-date-is-author-date：将提交者的日期设置为与作者的日期相同。 --rebase-merges：重演历史记录中的合并提交，类似于 --preserve-merges，但更智能。 --strategy=\u0026lt;strategy\u0026gt;：使用指定的合并策略（与 merge 命令类似）。 -X\u0026lt;option\u0026gt;：为指定的合并策略提供额外选项。 --root：从项目的根提交开始进行 rebase。 --fork-point：尝试找到更合适的起始点进行 rebase，以避免不必要的冲突。 --no-fork-point：忽略 fork-point，从指定的基础进行 rebase。 这些选项让你可以灵活地在 Git 中重新整理提交历史、解决冲突以及管理合并操作。\ngit reset: 将当前 HEAD 复位到指定状态\r以下是 git reset 命令的所有参数：\n--soft \u0026lt;commit\u0026gt;：将 HEAD 移动到指定的提交，保留暂存区和工作目录的更改（相当于只改变提交历史）。 --mixed \u0026lt;commit\u0026gt;（默认选项）：将 HEAD 移动到指定的提交，保留工作目录的更改，但重置暂存区（即取消暂存）。 --hard \u0026lt;commit\u0026gt;：将 HEAD 移动到指定的提交，并丢弃工作目录和暂存区的所有更改（注意：此操作不可恢复）。 --merge：在合并过程中使用 reset，重置暂存区以匹配指定的提交，但保留工作目录的更改。 --keep：将 HEAD 移动到指定的提交，仅在没有未提交的更改时进行重置，保留工作目录的更改。 -p 或 --patch：逐个选择更改以重置，允许你在交互模式下选择要重置的文件。 --mixed：将 HEAD 移动到指定的提交，并重置暂存区（等同于不指定选项）。 \u0026lt;commit\u0026gt;：指定要重置到的提交（可以是提交哈希、分支名称等）。 这些选项可以帮助你在 Git 中管理提交历史、暂存区和工作目录的状态。\ngit remote: 管理远程仓库的列表和配置\r以下是 git remote 命令的所有参数：\n-v 或 --verbose：显示远程仓库的详细信息，包括其 URL。 add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt;：添加一个新的远程仓库，\u0026lt;name\u0026gt; 是远程仓库的名称，\u0026lt;url\u0026gt; 是其地址。 remove \u0026lt;name\u0026gt;：删除指定的远程仓库。 rename \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt;：重命名指定的远程仓库。 set-url \u0026lt;name\u0026gt; \u0026lt;newurl\u0026gt;：更改指定远程仓库的 URL。 get-url \u0026lt;name\u0026gt;：显示指定远程仓库的 URL。 show \u0026lt;name\u0026gt;：显示远程仓库的详细信息，包括其 URL 和引用信息。 update：更新远程仓库的信息。 prune：删除本地跟踪的远程分支，如果远程仓库中已经删除。 -h 或 --help：显示帮助信息。 这些参数可以帮助你管理和配置 Git 中的远程仓库。\n文件管理\rgit clone: 将一个 Git 仓库克隆到指定路径\r以下是 git clone 命令的所有选项：\n-v 或 --verbose：显示详细的操作信息。 --progress：在克隆过程中显示进度信息。 --quiet：不显示输出信息。 -b \u0026lt;branch\u0026gt; 或 --branch \u0026lt;branch\u0026gt;：克隆指定的分支，而不是默认的主分支。 --single-branch：仅克隆指定分支，而不下载其他分支的信息。 --depth \u0026lt;depth\u0026gt;：进行浅克隆，限制历史提交的深度。 --shallow-submodules：对子模块执行浅克隆。 --recursive：克隆仓库及其子模块。 --recurse-submodules：同 --recursive，克隆仓库时还克隆子模块。 --reference \u0026lt;repository\u0026gt;：指定参考仓库，以提高克隆速度和节省带宽。 --no-checkout：不自动签出工作目录的文件。 --no-replace-objects：克隆时不替换对象。 --template \u0026lt;template_directory\u0026gt;：使用指定的模板目录创建新的 Git 仓库。 --config \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt;：在克隆时设置指定的配置项。 -h 或 --help：显示帮助信息。 这些选项可以帮助你在克隆 Git 仓库时自定义行为，如选择特定分支、控制克隆深度、处理子模块等。\ngit init: 创建一个空的 Git 仓库或者重新初始化一个仓库\r以下是 git init 命令的所有选项：\n-q 或 --quiet：在初始化时不显示任何输出信息。 --bare：创建一个裸仓库（没有工作目录），用于共享和协作。 --template=\u0026lt;template_directory\u0026gt;：使用指定的模板目录来初始化新的 Git 仓库。 --separate-git-dir=\u0026lt;git-dir\u0026gt;：将 Git 数据存储在指定的目录中，而不是默认的 .git 目录。 -h 或 --help：显示帮助信息。 这些选项可以帮助你在初始化 Git 仓库时进行自定义设置。\ngit config: 配置 Git 外观和操作\r以下是 git config 命令的所有选项：\n--global：对当前用户的全局配置进行更改。 --local：对当前 Git 仓库的本地配置进行更改（默认选项）。 --system：对系统范围内的配置进行更改。 --edit 或 -e：打开配置文件进行编辑。 --list：列出所有当前有效的配置项。 --get \u0026lt;key\u0026gt;：获取指定配置项的值。 --get-all \u0026lt;key\u0026gt;：获取指定配置项的所有值。 --get-regexp \u0026lt;pattern\u0026gt;：根据模式列出匹配的配置项。 --remove-section \u0026lt;section\u0026gt;：删除指定的配置节。 --rename-section \u0026lt;old\u0026gt; \u0026lt;new\u0026gt;：重命名指定的配置节。 --unset \u0026lt;key\u0026gt;：删除指定的配置项。 --unset-all \u0026lt;key\u0026gt;：删除指定的所有配置项。 --add \u0026lt;key\u0026gt; \u0026lt;value\u0026gt;：向指定的配置项添加一个值。 --file \u0026lt;file\u0026gt;：指定使用的配置文件，而不是默认的配置文件。 --help：显示帮助信息。 这些选项可以帮助你管理和配置 Git 的设置，包括用户信息、别名、行为等。\ngit mv: 移动工作区和暂存区的文件\r以下是 git mv 命令的所有选项：\n-f 或 --force：强制移动文件或目录，即使目标位置已存在文件。 -n 或 --no-clobber：不覆盖已存在的文件（即不强制移动）。 -v 或 --verbose：显示详细的操作信息。 -h 或 --help：显示帮助信息。 这些选项可以帮助你在 Git 中移动或重命名文件和目录，同时控制覆盖行为和输出信息。\ngit rm: 删除工作区和暂存区中文件\r以下是 git rm 命令的所有选项：\n-f 或 --force：强制删除文件，即使文件已修改且未提交。 -r 或 --recursive：递归删除目录及其内容。 --cached：仅从暂存区中删除文件，但保留工作目录中的文件。 --dry-run：模拟删除操作，不实际执行，用于测试。 -v 或 --verbose：显示详细的操作信息。 -h 或 --help：显示帮助信息。 这些选项可以帮助你在 Git 中删除文件或目录，同时控制删除行为和输出信息。\ngit stash: 临时保存所有更改文件\r以下是 git stash 命令的所有选项：\npush：将当前的工作目录和暂存区的更改保存到栈中（默认操作）。 pop：从栈中弹出最近的 stash，并将更改应用到工作目录。 apply：将最近的 stash 应用到工作目录，但不从栈中删除它。 drop：从栈中删除指定的 stash。 list：列出所有的 stash 项。 show：显示最近的 stash 变更的摘要信息。 show \u0026lt;stash\u0026gt;：显示指定 stash 的变更摘要信息。 clear：删除所有的 stash 项。 branch \u0026lt;branch\u0026gt;：基于指定的 stash 创建一个新分支。 -k 或 --keep-index：在 push stash 时保留暂存区的更改。 -u 或 --include-untracked：在 push stash 时包括未跟踪的文件。 -a 或 --all：在 push stash 时包括未跟踪的和忽略的文件。 -h 或 --help：显示帮助信息。 这些选项可以帮助你管理和操作 Git 的 stash 功能，包括保存、应用和删除暂存的更改。\ngit submodule: 将另一个 Git 仓库作为子模块\r以下是 git submodule 命令的所有选项：\nadd \u0026lt;repository\u0026gt; [\u0026lt;path\u0026gt;]：添加一个新的子模块，指定子模块的 Git 仓库和可选的路径。 status：显示当前子模块的状态，包括子模块的更新和是否存在未跟踪的更改。 init：初始化本地配置文件，准备使用子模块。 update：更新子模块，将其检出到指定的提交。 sync：同步本地配置与远程仓库的配置。 foreach \u0026lt;command\u0026gt;：在每个子模块中执行指定的命令。 deinit [\u0026lt;path\u0026gt;]：取消初始化指定的子模块，移除其文件和配置。 set-branch \u0026lt;branch\u0026gt;：为子模块设置分支以便跟踪。 add -- \u0026lt;path\u0026gt;：添加指定路径中的子模块。 --recursive：对所有子模块递归地应用命令。 -h 或 --help：显示帮助信息。 这些选项可以帮助你管理 Git 仓库中的子模块，包括添加、初始化、更新和配置子模块的行为。\n覆盖本地\rgit fetch origin git reset --hard origin/\u0026lt;branch_name\u0026gt; "},{"id":14,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E5%8F%82%E8%80%83/","title":"Hugo 参考","section":"技术","content":"\r变量\r.Site\r#️⃣ .AllPages: 所有页面的数组。 #️⃣ .BaseURL: 站点的基本 URL。 #️⃣ .BuildDrafts: 一个布尔值（默认为 false），指示是否构建草稿。 #️⃣ .Config: 站点的配置。 #️⃣ .Copyright: 网站的版权信息。 #️⃣ .Data: 网站的自定义数据。 #️⃣ .DisqusShortname: Disqus 短代码的 shortname。 #️⃣ .GetPage: 获取指定路径的页面。 #️⃣ .GoogleAnalytics: Google Analytics 的跟踪代码。 #️⃣ .Home: 网站的首页信息。 #️⃣ .IsDevelopment: 当前是否处于开发模式。 #️⃣ .IsMultiLingual: 网站是否支持多语言。 #️⃣ .IsServer: 当前是否处于服务器模式。 #️⃣ .Language: 当前网站的语言。 #️⃣ .LanguagePrefix: 语言前缀。 #️⃣ .Languages: 网站支持的语言列表。 #️⃣ .LastChange: 最近一次修改的日期。 #️⃣ .Lastmod: 最后修改的日期。 #️⃣ .MainSections: 主要部分列表。 #️⃣ .Menus: 网站的菜单列表。 #️⃣ .Pages: 网站的所有页面集合。 #️⃣ .Param: 获取指定参数的值。 #️⃣ .Params: 网站的所有参数。 #️⃣ .RegularPages: 常规页面的集合。 #️⃣ .Sections: 网站的所有部分。 #️⃣ .Sites: Hugo 多站点配置。 #️⃣ .Taxonomies: 网站的所有分类和标签信息。 #️⃣ .Title: 网站的标题。 .Page\r#️⃣ .Aliases: 页面的别名。 #️⃣ .AllTranslations: 页面的所有翻译版本。 #️⃣ .AlternativeOutputFormats: 页面的所有替代输出格式。 #️⃣ .Ancestors: 页面的祖先页面。 #️⃣ .BundleType: 页面的捆绑类型。 #️⃣ .CodeOwners: 页面的代码所有者。 #️⃣ .CurrentSection: 页面所在的当前部分。 #️⃣ .Data: 页面的数据。 #️⃣ .Date: 页面的日期。 #️⃣ .Description: 页面的描述。 #️⃣ .Draft: 页面是否为草稿。 #️⃣ .Eq: 页面是否等于指定的条件。 #️⃣ .ExpiryDate: 页面的到期日期。 #️⃣ .File: 页面的文件。 #️⃣ .FirstSection: 页面的第一个部分。 #️⃣ .Fragments: 页面的片段。 #️⃣ .FuzzyWordCount: 页面的模糊字数统计。 #️⃣ .GetPage: 获取指定路径的页面。 #️⃣ .GetTerms: 获取页面上指定参数的术语。 #️⃣ .GitInfo: 页面的 Git 信息。 #️⃣ .HasMenuCurrent: 页面是否具有当前菜单。 #️⃣ .HasShortcode: 页面是否包含指定的短代码。 #️⃣ .HeadingsFiltered: 过滤后的页面标题。 #️⃣ .InSection: 页面是否在指定的部分中。 #️⃣ .IsAncestor: 页面是否为指定页面的祖先。 #️⃣ .IsDescendant: 页面是否为指定页面的后代。 #️⃣ .IsHome: 页面是否为首页。 #️⃣ .IsMenuCurrent: 页面是否为当前菜单。 #️⃣ .IsNode: 页面是否为节点。 #️⃣ .IsPage: 页面是否为页面。 #️⃣ .IsSection: 页面是否为部分。 #️⃣ .IsTranslated: 页面是否已翻译。 #️⃣ .Keywords: 页面的关键词。 #️⃣ .Kind: 页面的类型。 #️⃣ .Language: 页面的语言。 #️⃣ .Lastmod: 页面的最后修改日期。 #️⃣ .Layout: 页面的布局。 #️⃣ .Len: 页面的长度。 #️⃣ .LinkTitle: 页面的链接标题。 #️⃣ .Next: 页面的下一个页面。 #️⃣ .NextInSection: 页面的下一个部分内的页面。 #️⃣ .OutputFormats: 页面的所有输出格式。 #️⃣ .Page: 页面自身。 #️⃣ .Pages: 页面的集合。 #️⃣ .Paginate: 分页。 #️⃣ .Paginator: 分页器。 #️⃣ .Param: 页面的参数。 #️⃣ .Params: 页面的所有参数。 #️⃣ .Parent: 页面的父级页面。 #️⃣ .Path: 页面的路径。 #️⃣ .Permalink: 页面的永久链接。 #️⃣ .Plain: 页面的纯文本内容。 #️⃣ .PlainWords: 页面的纯文本内容（按单词切割）。 #️⃣ .Prev: 页面的上一个页面。 #️⃣ .PrevInSection: 页面的前一个部分内的页面。 #️⃣ .PublishDate: 页面的发布日期。 #️⃣ .RawContent: 页面的原始内容。 #️⃣ .ReadingTime: 页面的阅读时间。 #️⃣ .Ref: 页面的引用。 #️⃣ .RegularPages: 页面的常规页面集合。 #️⃣ .RegularPagesRecursive: 页面的递归常规页面集合。 #️⃣ .RelPermalink: 页面的相对永久链接。 #️⃣ .RelRef: 页面的相对引用链接。 #️⃣ .Render: 页面的渲染。 #️⃣ .RenderShortcodes: 渲染短代码。 #️⃣ .RenderString: 渲染字符串。 #️⃣ .Resources: 页面的资源。 #️⃣ .Scratch: 页面的 Scratch。 #️⃣ .Section: 页面所属的部分。 #️⃣ .Sections: 页面的所有部分。 Duration\r#️⃣ .Abs(): 返回持续时间的绝对值。 #️⃣ .Hours(): 返回持续时间的小时部分。 #️⃣ .Microseconds(): 返回持续时间的微秒部分。 #️⃣ .Milliseconds(): 返回持续时间的毫秒部分。 #️⃣ .Minutes(): 返回持续时间的分钟部分。 #️⃣ .Nanoseconds(): 返回持续时间的纳秒部分。 #️⃣ .Round(): 返回最接近的持续时间，以指定的单位进行四舍五入。 #️⃣ .Seconds(): 返回持续时间的秒部分。 #️⃣ .Truncate(): 返回指定单位的持续时间的整数部分。 .Pages\r#️⃣ .ByDate(): 根据日期对页面进行排序。 #️⃣ .ByExpiryDate(): 根据到期日期对页面进行排序。 #️⃣ .ByLanguage(): 根据语言对页面进行排序。 #️⃣ .ByLastmod(): 根据最后修改日期对页面进行排序。 #️⃣ .ByLength(): 根据页面内容长度对页面进行排序。 #️⃣ .ByLinkTitle(): 根据链接标题对页面进行排序。 #️⃣ .ByParam(): 根据指定参数对页面进行排序。 #️⃣ .ByPublishDate(): 根据发布日期对页面进行排序。 #️⃣ .ByTitle(): 根据标题对页面进行排序。 #️⃣ .ByWeight(): 根据权重对页面进行排序。 #️⃣ .GroupBy(): 根据指定的关键字对页面进行分组。 #️⃣ .GroupByDate(): 根据日期对页面进行分组。 #️⃣ .GroupByExpiryDate(): 根据到期日期对页面进行分组。 #️⃣ .GroupByLastmod(): 根据最后修改日期对页面进行分组。 #️⃣ .GroupByParam(): 根据指定参数对页面进行分组。 #️⃣ .GroupByParamDate(): 根据指定参数的日期对页面进行分组。 #️⃣ .GroupByPublishDate(): 根据发布日期对页面进行分组。 #️⃣ .Len(): 返回页面集合的长度。 #️⃣ .Limit(): 限制页面集合的长度。 #️⃣ .Next(): 返回页面集合中指定页面的下一个页面。 #️⃣ .Prev(): 返回页面集合中指定页面的上一个页面。 #️⃣ .Related(): 返回页面集合中指定页面的相关页面。 #️⃣ .Reverse(): 对页面集合进行逆序排序。 Time\r#️⃣ .Add(): 将持续时间添加到时间上。 #️⃣ .AddDate(): 将指定的年、月、日添加到时间上。 #️⃣ .After(): 检查时间是否在另一个时间之后。 #️⃣ .Before(): 检查时间是否在另一个时间之前。 #️⃣ .Day(): 返回时间的日部分。 #️⃣ .Equal(): 检查两个时间是否相等。 #️⃣ .Format(): 格式化时间为指定的字符串格式。 #️⃣ .Hour(): 返回时间的小时部分。 #️⃣ .IsDST(): 检查时间是否处于夏令时。 #️⃣ .IsZero(): 检查时间是否为零值。 #️⃣ .Local(): 将时间转换为本地时区。 #️⃣ .Minute(): 返回时间的分钟部分。 #️⃣ .Month(): 返回时间的月份部分。 #️⃣ .Nanosecond(): 返回时间的纳秒部分。 #️⃣ .Round(): 四舍五入时间到指定的时间单位。 #️⃣ .Second(): 返回时间的秒部分。 #️⃣ .Sub(): 计算两个时间之间的持续时间。 #️⃣ .Truncate(): 将时间截断到指定的时间单位。 #️⃣ .Unix(): 返回时间的 UNIX 时间戳。 #️⃣ .UnixMicro(): 返回时间的微秒精度的 UNIX 时间戳。 #️⃣ .UnixMilli(): 返回时间的毫秒精度的 UNIX 时间戳。 #️⃣ .UnixNano(): 返回时间的纳秒精度的 UNIX 时间戳。 #️⃣ .UTC(): 将时间转换为协调世界时（UTC）。 #️⃣ .Weekday(): 返回时间所在的星期几。 #️⃣ .Year(): 返回时间的年份部分。 #️⃣ .YearDay(): 返回时间在年份中的天数。 方法\rmath\r#️⃣ math.Abs: 返回数字的绝对值 $absResult := math.Abs -10.5 #️⃣ math.Add: 将两个数字相加 $addResult := math.Add 5 3 #️⃣ math.Ceil: 返回不小于 x 的最小整数 $ceilResult := math.Ceil 4.2 #️⃣ math.Counter: 返回一个计数器函数 $counter := math.Counter #️⃣ math.Div: 将两个数字相除 $divResult := math.Div 10 2 #️⃣ math.Floor: 返回不大于 x 的最大整数 $floorResult := math.Floor 4.8 #️⃣ math.Log: 返回以 e 为底的对数 $logResult := math.Log math.E #️⃣ math.Max: 返回一组数字中的最大值 $maxResult := math.Max 10 20 30 #️⃣ math.Min: 返回一组数字中的最小值 $minResult := math.Min 10 20 30 #️⃣ math.Mod: 返回两个数字相除的余数 $modResult := math.Mod 10 3 #️⃣ math.ModBool: 返回两个数字相除的余数是否为零 $modBoolResult := math.ModBool 10 5 #️⃣ math.Mul: 将两个数字相乘 $mulResult := math.Mul 5 3 #️⃣ math.Pow: 返回 x 的 y 次方 $powResult := math.Pow 2 3 #️⃣ math.Product: 返回一组数字的乘积 $productResult := math.Product 2 3 4 #️⃣ math.Rand: 返回一个随机数 $randResult := math.Rand #️⃣ math.Round: 返回浮点数的四舍五入值 $roundResult := math.Round 4.5 #️⃣ math.Sqrt: 返回数字的平方根 $sqrtResult := math.Sqrt 25 #️⃣ math.Sub: 返回两个数字的差 $subResult := math.Sub 10 5 #️⃣ math.Sum: 返回一组数字的总和 $sumResult := math.Sum 1 2 3 4 5 .Page\r"},{"id":15,"href":"/moments/lfeng/","title":"lfeng","section":"Moments","content":" \\images\\personal\\other\\Pasted image 20240401181601.png https://avatars.githubusercontent.com/u/46187375 "},{"id":16,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/","title":"markDown 语法","section":"技术","content":"\r1. 标题：使用\u0026quot;#\u0026ldquo;字符表示标题，数量代表标题级别，最多支持6级标题。例如：\r# 一级标题\r## 二级标题\r### 三级标题\r...\r###### 六级标题 一级标题\r二级标题\r三级标题\r\u0026hellip;\n六级标题\r2. 段落：段落之间以空行分隔。\r3. 强调：使用\u0026rdquo;*\u0026ldquo;或\u0026rdquo;_\u0026ldquo;将需要强调的文本包围起来。例如：\r*斜体*\r_斜体_\r**粗体**\r__粗体__\r***粗斜体***\r___粗斜体___ 斜体 斜体\n粗体 粗体\n粗斜体 粗斜体\n4. 列表：有序列表以数字和句点开始，无序列表以\u0026rdquo;*\u0026quot;、\u0026quot;+\u0026ldquo;或\u0026rdquo;-\u0026ldquo;开始。例如：\r1. 第一项\r2. 第二项\r3. 第三项\r- 无序列表项1\r- 无序列表项2\r- 嵌套的无序列表项\r- 更深层次的无序列表项\r* 无序列表项A\r* 无序列表项B\r* 嵌套的无序列表项\r* 更深层次的无序列表项\r+ 无序列表项X\r+ 无序列表项Y\r+ 嵌套的无序列表项\r+ 更深层次的无序列表项 第一项 第二项 第三项 无序列表项1 无序列表项2 嵌套的无序列表项 更深层次的无序列表项 无序列表项A 无序列表项B 嵌套的无序列表项 更深层次的无序列表项 无序列表项X 无序列表项Y 嵌套的无序列表项 更深层次的无序列表项 5. 链接：使用\u0026rdquo;链接文本\u0026ldquo;的格式添加链接。例如：\r[Google](https://www.google.com) Google\n6. 图片：使用\u0026rdquo;\u0026ldquo;的格式插入图片。例如：\r![示例图片](https://example.com/image.jpg) 7. 引用：使用\u0026rdquo;\u0026gt;\u0026ldquo;字符表示引用。例如：\r\u0026gt; 这是一段引用的文本。 这是一段引用的文本。\n8. 代码块：使用三个反引号(`)包围代码块，并在开始位置指定代码语言（可选）。例如：\rdef hello_world(): print(\u0026#34;Hello, world!\u0026#34;) 9. 表格：使用\u0026rdquo;|\u0026ldquo;和\u0026rdquo;-\u0026ldquo;分隔表头和表格内容，并使用\u0026rdquo;:\u0026ldquo;来对齐表格内容。例如：\r| 列1标题 | 列2标题 |\r|---------|---------|\r| 内容1 | 内容2 |\r| 内容3 | 内容4 |\r左对齐列1标题 | 右对齐列2标题\r:------------|-------------:\r左对齐内容1 | 右对齐内容2\r左对齐内容3 | 右对齐内容4 列1标题 列2标题 内容1 内容2 内容3 内容4 左对齐列1标题 右对齐列2标题 左对齐内容1 右对齐内容2 左对齐内容3 右对齐内容4 10. 水平线：使用三个或更多连续的\u0026rdquo;*\u0026quot;、\u0026quot;-\u0026ldquo;或\u0026rdquo;_\u0026ldquo;表示水平线。例如：\r*** --- ___ "},{"id":17,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/plantuml/","title":"plantuml","section":"技术","content":"\rmindmap\r+ 中\r++ 右\r***:bubbleSort\r\u0026lt;code\u0026gt;\rdef bubbleSort(arr): for i in range(1, len(arr)): for j in range(0, len(arr)-i): if arr[j] \u0026gt; arr[j+1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr\r\u0026lt;/code\u0026gt;\r;\r-- 左 actor actor\ragent agent\rartifact artifact\rboundary boundary\rcard card\rcloud cloud\rcomponent component\rcontrol control\rdatabase database\rentity entity\rfile file\rfolder folder\rframe frame\rinterface interface\rnode node\rpackage package\rqueue queue\rstack stack\rrectangle rectangle\rstorage storage\rusecase usecase "},{"id":18,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/","title":"Python","section":"编程语言","content":"\r概念类\r什么是 闭包/装饰器?\r闭包 装饰器 本质 嵌套返回函数的函数 用于扩展修改类或方法的闭包 特征 嵌套的函数,内部函数使用外部函数的参数,返回内部函数 闭包特征 + 参数传入为被装饰函数 目的 使得内部函数可以访问外部函数的变量 不修改函数本身，修改或扩展函数功能 缺点 可能会造成额外的内存占用 闭包的缺点 应用场景 数据封装;工厂函数;函调函数;延迟计算;装饰器;缓存结果 记录日志;统计时间;访问控制;参数验证;重试机制 理解闭包的应用场景\r# 闭包示例代码合集 # 1. 数据封装 def counter(): # count 变量被封装在闭包内，外部无法直接访问 count = 0 def increment(): # 使用 nonlocal 关键字，闭包可以修改外部函数的变量 nonlocal count count += 1 return count return increment # 创建一个闭包实例，并多次调用它 counter_func = counter() print(counter_func()) # 输出: 1 print(counter_func()) # 输出: 2 # 2. 工厂函数 def make_multiplier(factor): # multiplier 函数捕获了外部的 factor 变量 def multiplier(x): return x * factor return multiplier # 创建不同的乘数函数 double = make_multiplier(2) triple = make_multiplier(3) print(double(5)) # 输出: 10 print(triple(5)) # 输出: 15 # 3. 回调函数和事件处理 def make_callback(message): # callback 函数捕获了外部的 message 变量 def callback(): print(f\u0026#34;Callback message: {message}\u0026#34;) return callback # 创建不同的回调函数 callback1 = make_callback(\u0026#34;Hello\u0026#34;) callback2 = make_callback(\u0026#34;World\u0026#34;) # 执行回调函数 callback1() # 输出: \u0026#34;Callback message: Hello\u0026#34; callback2() # 输出: \u0026#34;Callback message: World\u0026#34; # 4. 延迟计算 def delayed_execution(x): # calculate 函数捕获了外部的 x 变量 def calculate(): return x * x return calculate # 创建一个延迟计算的闭包 square_func = delayed_execution(4) print(square_func()) # 输出: 16 # 5. 装饰器 def my_decorator(func): # wrapper 函数作为装饰器的闭包，修改了被装饰函数的行为 def wrapper(*args, **kwargs): print(\u0026#34;Something is happening before the function is called.\u0026#34;) result = func(*args, **kwargs) print(\u0026#34;Something is happening after the function is called.\u0026#34;) return result return wrapper # 使用 @ 符号将装饰器应用于函数 @my_decorator def say_hello(): print(\u0026#34;Hello!\u0026#34;) # 调用被装饰的函数 say_hello() # 6. 缓存结果 def memoize(func): # cache 变量存储计算结果，避免重复计算 cache = {} def wrapper(n): if n not in cache: cache[n] = func(n) return cache[n] return wrapper # 使用 memoize 装饰器缓存斐波那契数列的结果 @memoize def fibonacci(n): if n \u0026lt;= 1: return n return fibonacci(n-1) + fibonacci(n-2) # 计算并输出斐波那契数列的第10项 print(fibonacci(10)) # 输出: 55 理解装饰器的应用场景\r# 装饰器示例代码合集 # 1. 记录函数的调用日志 def log_decorator(func): # wrapper 函数在执行目标函数前后记录日志 def wrapper(*args, **kwargs): print(f\u0026#34;Function {func.__name__} is called with arguments {args} and {kwargs}\u0026#34;) result = func(*args, **kwargs) print(f\u0026#34;Function {func.__name__} returned {result}\u0026#34;) return result return wrapper @log_decorator def add(a, b): return a + b # 调用被装饰的函数并记录日志 print(add(3, 4)) # 输出: # Function add is called with arguments (3, 4) and {} # Function add returned 7 # 7 # 2. 执行时间统计 import time def timer_decorator(func): # wrapper 函数统计目标函数的执行时间 def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() print(f\u0026#34;Function {func.__name__} took {end_time - start_time:.4f} seconds to execute\u0026#34;) return result return wrapper @timer_decorator def slow_function(seconds): time.sleep(seconds) return f\u0026#34;Slept for {seconds} seconds\u0026#34; # 调用被装饰的函数并统计执行时间 print(slow_function(2)) # 输出: # Function slow_function took 2.0023 seconds to execute # Slept for 2 seconds # 3. 访问控制 def require_authentication(func): # wrapper 函数在调用目标函数前进行访问控制 def wrapper(user, *args, **kwargs): if not user.get(\u0026#39;authenticated\u0026#39;, False): raise PermissionError(\u0026#34;User is not authenticated\u0026#34;) return func(user, *args, **kwargs) return wrapper @require_authentication def get_sensitive_data(user): return \u0026#34;Sensitive data\u0026#34; # 模拟已认证和未认证的用户调用 user_authenticated = {\u0026#39;authenticated\u0026#39;: True} user_unauthenticated = {\u0026#39;authenticated\u0026#39;: False} print(get_sensitive_data(user_authenticated)) # 输出: \u0026#34;Sensitive data\u0026#34; # print(get_sensitive_data(user_unauthenticated)) # 抛出 PermissionError # 4. 缓存结果（记忆化） def memoize(func): cache = {} def wrapper(*args): if args not in cache: cache[args] = func(*args) return cache[args] return wrapper @memoize def fibonacci(n): if n \u0026lt;= 1: return n return fibonacci(n-1) + fibonacci(n-2) # 调用被装饰的函数并缓存结果 print(fibonacci(10)) # 输出: 55 # 5. 输入验证 def validate_input(expected_type): # wrapper 函数在调用目标函数前验证输入类型 def decorator(func): def wrapper(*args, **kwargs): if not all(isinstance(arg, expected_type) for arg in args): raise ValueError(f\u0026#34;All arguments must be of type {expected_type}\u0026#34;) return func(*args, **kwargs) return wrapper return decorator @validate_input(int) def sum_integers(*args): return sum(args) # 调用被装饰的函数并验证输入 print(sum_integers(1, 2, 3)) # 输出: 6 # print(sum_integers(1, \u0026#34;2\u0026#34;, 3)) # 抛出 ValueError # 6. 重试机制 def retry(retries=3): # wrapper 函数在失败后重试目标函数 def decorator(func): def wrapper(*args, **kwargs): last_exception = None for _ in range(retries): try: return func(*args, **kwargs) except Exception as e: last_exception = e raise last_exception return wrapper return decorator @retry(retries=5) def unstable_operation(): # 模拟可能失败的操作 import random if random.choice([True, False]): raise ValueError(\u0026#34;Operation failed\u0026#34;) return \u0026#34;Operation succeeded\u0026#34; # 调用被装饰的函数并在失败后重试 print(unstable_operation()) 参考:\nPython 闭包 装饰器-PySuper (zhengxingtao.com) 什么是 可迭代对象/生成器/迭代器?\r可迭代对象 迭代器 生成器 本质 容器对象 可迭代对象的地址引用 迭代器, 但是通过计算迭代下一个对象来节省内存 特征 iter 方法 可迭代对象特征+ next 迭代器特征+yield 目的 提供可迭代的对象 实现不依赖索引的迭代方法 计算生成来节省内存的迭代器 缺点 / 只能往前取值;不知道多长;用完失效 时间换空间, 多消耗了CPU 应用场景 / 需要迭代的时候 数据大,内存占用大;列表推导式无法描述的规律数组;协程 判断方法 是否有 iter 方法 isinstance(iterator,Iterator) inspect.isgenerator(iterator) 创建方法 容器类型的类 iter 方法 yield;(iterator) 理解 yield\ryield i 执行 return i 之后, 再次运行会从 yield i 之后开始执行语句\nfrom collections import Iterator,Iterable def fun(): a = 1 yield a b = 100 yield b gen_fun = fun() # 创建生成器 print(next(gen_fun)) #输出 `a` 的值 print(next(gen_fun)) #输出 `b` 的值 print(next(gen_fun)) # 抛出 StopIteration 错误, 后面没有执行的语句了 参考:\n一篇文章讲清楚迭代器和生成器 - 金色旭光 - 博客园 (cnblogs.com) 什么是单例模式?\r单例模式: 一个类只能创建一个对象的模式 实现方法:\n装饰器 指定单例元类, 通过 metaclass传入元类来实现 from functools import wraps # 装饰器 def singleton(cls): \u0026#34;\u0026#34;\u0026#34;单例类装饰器\u0026#34;\u0026#34;\u0026#34; instances = {} @wraps(cls) def wrapper(*args, **kwargs): if cls not in instances: instances[cls] = cls(*args, **kwargs) return instances[cls] return wrapper @singleton class President: pass # 指定元类 class SingletonMeta(type): \u0026#34;\u0026#34;\u0026#34;自定义单例元类\u0026#34;\u0026#34;\u0026#34; def __init__(cls, *args, **kwargs): cls.__instance = None super().__init__(*args, **kwargs) def __call__(cls, *args, **kwargs): if cls.__instance is None: cls.__instance = super().__call__(*args, **kwargs) return cls.__instance class President(metaclass=SingletonMeta): pass 什么是浅拷贝和深拷贝?\r浅拷贝 深拷贝 复制对象 对象本身,不会递归复制 对象和其他所有关联对象, 递归复制 实现方法 copy deepcopy 深拷贝带来的两个问题:\n若对象引用了自身, 可能会导致无休止的递归拷贝 原本的共享数据进行拷贝, 造成内存的多占用 解决方法: 思路: 根据deepcopy函数的本质其实就是对象的一次序列化和一次返回序列化, 第一个问题用 memo 字典来跟踪已经复制的值, 避免无限递归 第二个则是使用 pickle 模块的dumps和loads来做到自定义深拷贝 import pickle my_deep_copy = lambda obj: pickle.loads(pickle.dumps(obj)) 什么是猴子补丁?\r猴子补丁是动态派生类型的编程语言(如Python, ruby) 猴子补丁允许在运行时修改现有代码，而无需直接修改源代码，非常灵活\n# 原始的Python内置方法 print(\u0026#34;hello\u0026#34;.upper()) # 输出: \u0026#34;HELLO\u0026#34; # 猴子补丁：修改 str.upper 方法，使其总是返回 \u0026#34;MONKEY PATCHED\u0026#34; def new_upper(self): return \u0026#34;MONKEY PATCHED\u0026#34; # 这里对 str.upper 应用猴子补丁 str.upper = new_upper # 测试修改后的方法 print(\u0026#34;hello\u0026#34;.upper()) # 输出: \u0026#34;MONKEY PATCHED\u0026#34; 什么是方法重载和方法重写?\r方法重写: 方法名和方法参数保持一致 方法重载: 方法名保持, 方法参数修改 注: Python 没有方法重载, 因为Python 可以通过可变默认参数来解决\n参考:\rPython-Interview-Bible/Python面试宝典-基础篇-2020.md at master · jackfrued/Python-Interview-Bible (github.com) 面试鸭 - 程序员求职面试刷题神器，高频编程题目免费刷 (mianshiya.com) "},{"id":19,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/","title":"python 方法参考","section":"技术","content":"以下内容由 ChatGPT 生成, 仅供学习参考\n目录\r文件处理（os、io） 网络编程（socket、urllib） 日期和时间处理（datetime、time） 数学运算（math、random） 字符串处理（re、string） 数据结构（list、tuple、dict、set） 对象编程（class、object） 错误处理（try、except） 文件处理（os、io）\rimport os import io #️⃣ os 模块 # 获取和更改当前工作目录 current_directory = os.getcwd() # 返回当前工作目录 os.chdir(\u0026#39;/path/to/directory\u0026#39;) # 改变当前工作目录 # 列出目录内容 contents = os.listdir(\u0026#39;.\u0026#39;) # 列出当前目录中的所有文件和目录 # 创建和删除目录 os.mkdir(\u0026#39;new_directory\u0026#39;) # 创建新目录 os.makedirs(\u0026#39;parent/child_directory\u0026#39;) # 递归创建目录 os.rmdir(\u0026#39;new_directory\u0026#39;) # 删除目录（仅当目录为空时） os.removedirs(\u0026#39;parent/child_directory\u0026#39;) # 递归删除目录 # 删除文件 os.remove(\u0026#39;file.txt\u0026#39;) # 删除文件 os.unlink(\u0026#39;file.txt\u0026#39;) # 删除文件，与 os.remove 功能相同 # 重命名文件或目录 os.rename(\u0026#39;old_name.txt\u0026#39;, \u0026#39;new_name.txt\u0026#39;) # 重命名文件或目录 os.renames(\u0026#39;old_directory\u0026#39;, \u0026#39;new_directory\u0026#39;) # 递归重命名文件或目录 # 文件和目录属性 exists = os.path.exists(\u0026#39;path/to/file_or_directory\u0026#39;) # 检查文件或目录是否存在 is_directory = os.path.isdir(\u0026#39;path/to/directory\u0026#39;) # 检查路径是否为目录 is_file = os.path.isfile(\u0026#39;path/to/file\u0026#39;) # 检查路径是否为文件 size = os.path.getsize(\u0026#39;path/to/file\u0026#39;) # 返回文件大小（字节数） mod_time = os.path.getmtime(\u0026#39;path/to/file\u0026#39;) # 返回文件的最后修改时间 abs_path = os.path.abspath(\u0026#39;path/to/file\u0026#39;) # 返回绝对路径 # 获取文件路径信息 base_name = os.path.basename(\u0026#39;/path/to/file\u0026#39;) # 返回文件名 dir_name = os.path.dirname(\u0026#39;/path/to/file\u0026#39;) # 返回目录名 split_path = os.path.split(\u0026#39;/path/to/file\u0026#39;) # 分割路径为 (目录, 文件名) split_ext = os.path.splitext(\u0026#39;/path/to/file.txt\u0026#39;) # 分割路径为 (文件名, 扩展名) # 访问和修改文件权限 mode = os.stat(\u0026#39;path/to/file\u0026#39;).st_mode # 返回文件权限 os.chmod(\u0026#39;path/to/file\u0026#39;, 0o777) # 修改文件权限 os.chown(\u0026#39;path/to/file\u0026#39;, uid, gid) # 修改文件拥有者 # 目录树遍历 for dirpath, dirnames, filenames in os.walk(\u0026#39;.\u0026#39;): print(f\u0026#39;Found directory: {dirpath}\u0026#39;) for file_name in filenames: print(file_name) # 递归打印当前目录及其子目录中的所有文件 # 获取系统信息 user = os.getlogin() # 返回当前登录用户名 os.environ # 获取系统环境变量 cpu_count = os.cpu_count() # 返回 CPU 核心数量 uname = os.uname() # 返回操作系统信息 linesep = os.linesep # 返回当前平台使用的行终止符 sep = os.sep # 返回当前平台使用的路径分隔符 pathsep = os.pathsep # 返回用于分割文件路径的字符 defpath = os.defpath # 返回默认搜索路径 curdir = os.curdir # 返回当前目录（\u0026#39;.\u0026#39;） pardir = os.pardir # 返回父目录（\u0026#39;..\u0026#39;） # 运行系统命令 os.system(\u0026#39;echo Hello, world!\u0026#39;) # 运行系统命令 output = os.popen(\u0026#39;echo Hello, world!\u0026#39;).read() # 运行系统命令并获取输出 # 创建和管理进程 pid = os.fork() # 创建子进程（Unix） os.execvp(\u0026#39;python\u0026#39;, [\u0026#39;python\u0026#39;, \u0026#39;script.py\u0026#39;]) # 用新的程序替换当前进程 os._exit(0) # 退出进程 # 信号处理 import signal signal.signal(signal.SIGINT, signal.SIG_DFL) # 捕捉和处理信号 # 文件描述符操作 fd = os.open(\u0026#39;file.txt\u0026#39;, os.O_RDONLY) # 打开文件并返回文件描述符 os.read(fd, 100) # 从文件描述符读取数据 os.write(fd, b\u0026#39;Hello, world!\u0026#39;) # 向文件描述符写入数据 os.close(fd) # 关闭文件描述符 # 获取和设置文件偏移量 fd = os.open(\u0026#39;file.txt\u0026#39;, os.O_RDWR) os.lseek(fd, 0, os.SEEK_SET) # 设置文件偏移量 position = os.lseek(fd, 0, os.SEEK_CUR) # 获取文件当前偏移量 # 创建和删除符号链接 os.symlink(\u0026#39;source_file\u0026#39;, \u0026#39;link_name\u0026#39;) # 创建符号链接 os.readlink(\u0026#39;link_name\u0026#39;) # 读取符号链接 os.unlink(\u0026#39;link_name\u0026#39;) # 删除符号链接 # 创建和删除硬链接 os.link(\u0026#39;source_file\u0026#39;, \u0026#39;link_name\u0026#39;) # 创建硬链接 os.unlink(\u0026#39;link_name\u0026#39;) # 删除硬链接 # 获取文件状态 stat_info = os.stat(\u0026#39;file.txt\u0026#39;) # 获取文件状态 stat_info.st_size # 文件大小 stat_info.st_mtime # 文件最后修改时间 # 获取文件系统编码 file_system_encoding = os.getfilesystemencoding() # 返回文件系统编码 # 获取和设置当前进程的优先级 priority = os.getpriority(os.PRIO_PROCESS, os.getpid()) # 获取当前进程的优先级 os.setpriority(os.PRIO_PROCESS, os.getpid(), 10) # 设置当前进程的优先级 # 获取当前进程和父进程 ID pid = os.getpid() # 返回当前进程 ID ppid = os.getppid() # 返回父进程 ID # 获取当前用户 ID 和组 ID uid = os.getuid() # 返回当前用户 ID gid = os.getgid() # 返回当前组 ID # 切换用户 ID 和组 ID os.setuid(uid) # 设置用户 ID os.setgid(gid) # 设置组 ID # 获取当前工作目录的绝对路径 abs_path = os.path.abspath(\u0026#39;.\u0026#39;) # 返回当前工作目录的绝对路径 # 创建命名管道 os.mkfifo(\u0026#39;fifo_name\u0026#39;) # 创建命名管道 # 获取终端尺寸 rows, cols = os.get_terminal_size() # 返回终端行数和列数 # 获取负载平均值 load1, load5, load15 = os.getloadavg() # 返回系统负载平均值 # 判断文件是否为绝对路径 is_abs = os.path.isabs(\u0026#39;/path/to/file\u0026#39;) # 判断是否为绝对路径 # 获取路径的真实路径 real_path = os.path.realpath(\u0026#39;file.txt\u0026#39;) # 返回路径的真实路径 # 更改当前工作目录到用户的主目录 os.chdir(os.path.expanduser(\u0026#39;~\u0026#39;)) # 更改当前工作目录到用户的主目录 # 获取文件或目录的绝对路径 abs_path = os.path.abspath(\u0026#39;file.txt\u0026#39;) # 获取文件或目录的绝对路径 # 返回路径的规范化绝对路径 norm_path = os.path.normpath(\u0026#39;/path/to//file\u0026#39;) # 返回路径的规范化绝对路径 # 返回路径的规范化绝对路径，并解析符号链接 real_path = os.path.realpath(\u0026#39;/path/to/link\u0026#39;) # 返回路径的规范化绝对路径，并解析符号链接 # 获取文件创建时间 ctime = os.path.getctime(\u0026#39;file.txt\u0026#39;) # 获取文件创建时间 # 获取文件最后访问时间 atime = os.path.getatime(\u0026#39;file.txt\u0026#39;) # 获取文件最后访问时间 # 获取文件最后修改时间 mtime = os.path.getmtime(\u0026#39;file.txt\u0026#39;) # 获取文件最后修改时间 # 获取文件大小 size = os.path.getsize(\u0026#39;file.txt\u0026#39;) # 获取文件大小 # 判断路径是否存在 exists = os.path.exists(\u0026#39;file.txt\u0026#39;) # 判断路径是否存在 # 判断路径是否为文件 is_file = os.path.isfile(\u0026#39;file.txt\u0026#39;) # 判断路径是否为文件 # 判断路径是否为目录 is_dir = os.path.isdir(\u0026#39;directory\u0026#39;) # 判断路径是否为目录 # 判断路径是否为符号链接 is_link = os.path.islink(\u0026#39;link\u0026#39;) # 判断路径是否为符号链接 # 扩展用户路径 user_path = os.path.expanduser(\u0026#39;~\u0026#39;) # 扩展用户路径 # 扩展变量路径 var_path = os.path.expandvars(\u0026#39;$HOME\u0026#39;) # 扩展变量路径 # 规范化路径 norm_path = os.path.normpath(\u0026#39;/path/to//file\u0026#39;) # 规范化路径 # 返回路径的绝对路径 abs_path = os.path.abspath(\u0026#39;file.txt\u0026#39;) # 返回路径的绝对路径 # 判断路径是否为绝对路径 is_abs = os.path.isabs(\u0026#39;/path/to/file\u0026#39;) # 判断路径是否为绝对路径 # 分割路径 split_path = os.path.split(\u0026#39;/path/to/file\u0026#39;) # 分割路径为 (目录, 文件名) # 分割路径扩展名 split_ext = os.path.splitext(\u0026#39;file.txt\u0026#39;) # 分割路径为 (文件名, 扩展名) # 拼接路径 join_path = os.path.join(\u0026#39;/path/to\u0026#39;, \u0026#39;file.txt\u0026#39;) # 拼接路径 # 获取路径的基本名 base_name = os.path.basename(\u0026#39;/path/to/file.txt\u0026#39;) # 获取路径的基本名 # 获取路径的目录名 dir_name = os.path.dirname(\u0026#39;/path/to/file.txt\u0026#39;) # 获取路径的目录名 # 判断路径是否为挂载点 is_mount = os.path.ismount(\u0026#39;/mnt\u0026#39;) # 判断路径是否为挂载点 # 获取文件的模式 mode = os.stat(\u0026#39;file.txt\u0026#39;).st_mode # 获取文件的模式 # 获取文件的 inode 编号 inode = os.stat(\u0026#39;file.txt\u0026#39;).st_ino # 获取文件的 inode 编号 # 获取文件的设备 device = os.stat(\u0026#39;file.txt\u0026#39;).st_dev # 获取文件的设备 # 获取文件的硬链接数 nlink = os.stat(\u0026#39;file.txt\u0026#39;).st_nlink # 获取文件的硬链接数 # 获取文件的拥有者 ID uid = os.stat(\u0026#39;file.txt\u0026#39;).st_uid # 获取文件的拥有者 ID # 获取文件的组 ID gid = os.stat(\u0026#39;file.txt\u0026#39;).st_gid # 获取文件的组 ID # 获取文件的大小 size = os.stat(\u0026#39;file.txt\u0026#39;).st_size # 获取文件的大小 # 获取文件的访问时间 atime = os.stat(\u0026#39;file.txt\u0026#39;).st_atime # 获取文件的访问时间 # 获取文件的修改时间 mtime = os.stat(\u0026#39;file.txt\u0026#39;).st_mtime # 获取文件的修改时间 # 获取文件的创建时间 ctime = os.stat(\u0026#39;file.txt\u0026#39;).st_ctime # 获取文件的创建时间 #️⃣ io 模块 # 打开文件 with io.open(\u0026#39;file.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: content = file.read() # 读取文件内容 # 创建内存中的文件对象 string_io = io.StringIO() # 创建内存中的字符串文件对象 bytes_io = io.BytesIO() # 创建内存中的字节文件对象 # io.StringIO 方法 string_io.write(\u0026#39;Hello, StringIO!\u0026#39;) # 写入字符串 string_io.seek(0) # 将指针移动到开始位置 content = string_io.read() # 读取字符串 # io.BytesIO 方法 bytes_io.write(b\u0026#39;Hello, BytesIO!\u0026#39;) # 写入字节 bytes_io.seek(0) # 将指针移动到开始位置 byte_content = bytes_io.read() # 读取字节 # 文件读写模式 with io.open(\u0026#39;file.txt\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: content = file.read() # 读取文件内容 with io.open(\u0026#39;file.txt\u0026#39;, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as file: file.write(\u0026#39;Hello, world!\u0026#39;) # 写入文件内容 # 文件缓冲 buffered_reader = io.BufferedReader(io.BytesIO(b\u0026#39;Hello, BufferedReader!\u0026#39;)) buffered_writer = io.BufferedWriter(io.BytesIO()) buffered_reader.read() # 读取缓冲内容 buffered_writer.write(b\u0026#39;Hello, BufferedWriter!\u0026#39;) # 写入缓冲内容 buffered_writer.flush() # 刷新缓冲区 # 使用 TextIOWrapper 将字节流包装成文本流 bytes_io = io.BytesIO(b\u0026#39;Hello, world!\u0026#39;) text_io = io.TextIOWrapper(bytes_io, encoding=\u0026#39;utf-8\u0026#39;) content = text_io.read() # 读取文本内容 # BufferedIOBase 类方法 buffered_io = io.BufferedIOBase() buffered_io.readable() # 检查是否可读 buffered_io.writable() # 检查是否可写 buffered_io.seekable() # 检查是否可定位 # TextIOBase 类方法 text_io_base = io.TextIOBase() text_io_base.readable() # 检查是否可读 text_io_base.writable() # 检查是否可写 text_io_base.seekable() # 检查是否可定位 # RawIOBase 类方法 raw_io_base = io.RawIOBase() raw_io_base.readable() # 检查是否可读 raw_io_base.writable() # 检查是否可写 raw_io_base.seekable() # 检查是否可定位 # IncrementalNewlineDecoder 类方法 decoder = io.IncrementalNewlineDecoder() decoder.decode(b\u0026#39;line1\\nline2\\n\u0026#39;) # 解码字节 # TextIOWrapper 类方法 text_io = io.TextIOWrapper(io.BytesIO(b\u0026#39;Hello, TextIOWrapper!\u0026#39;), encoding=\u0026#39;utf-8\u0026#39;) text_io.read() # 读取文本内容 text_io.write(\u0026#39;New content\u0026#39;) # 写入文本内容 # StringIO 类方法 string_io = io.StringIO(\u0026#39;Hello, StringIO!\u0026#39;) string_io.read() # 读取字符串 string_io.write(\u0026#39;New content\u0026#39;) # 写入字符串 # BytesIO 类方法 bytes_io = io.BytesIO(b\u0026#39;Hello, BytesIO!\u0026#39;) bytes_io.read() # 读取字节 bytes_io.write(b\u0026#39;New content\u0026#39;) # 写入字节 # IOBase 类方法 io_base = io.IOBase() io_base.readable() # 检查是否可读 io_base.writable() # 检查是否可写 io_base.seekable() # 检查是否可定位 # StringIO 方法 string_io = io.StringIO() string_io.write(\u0026#39;Hello, StringIO!\u0026#39;) string_io.seek(0) # 将指针移动到开始位置 content = string_io.read() # 读取字符串 # BytesIO 方法 bytes_io = io.BytesIO() bytes_io.write(b\u0026#39;Hello, BytesIO!\u0026#39;) bytes_io.seek(0) # 将指针移动到开始位置 byte_content = bytes_io.read() # 读取字节 # FileIO 方法 with io.FileIO(\u0026#39;file.txt\u0026#39;, \u0026#39;r\u0026#39;) as file: content = file.read() # 读取文件内容 # BufferedReader 方法 with io.BufferedReader(io.BytesIO(b\u0026#39;Hello, BufferedReader!\u0026#39;)) as buffered_reader: content = buffered_reader.read() # 读取缓冲内容 # BufferedWriter 方法 with io.BufferedWriter(io.BytesIO()) as buffered_writer: buffered_writer.write(b\u0026#39;Hello, BufferedWriter!\u0026#39;) # 写入缓冲内容 buffered_writer.flush() # 刷新缓冲区 # BufferedRandom 方法 with io.BufferedRandom(io.BytesIO()) as buffered_random: buffered_random.write(b\u0026#39;Hello, BufferedRandom!\u0026#39;) # 写入缓冲内容 buffered_random.seek(0) # 将指针移动到开始位置 content = buffered_random.read() # 读取缓冲内容 # BufferedRWPair 方法 with io.BufferedRWPair(io.BytesIO(), io.BytesIO()) as buffered_rw_pair: buffered_rw_pair.write(b\u0026#39;Hello, BufferedRWPair!\u0026#39;) # 写入缓冲内容 buffered_rw_pair.seek(0) # 将指针移动到开始位置 content = buffered_rw_pair.read() # 读取缓冲内容 # TextIOWrapper 方法 with io.TextIOWrapper(io.BytesIO(b\u0026#39;Hello, TextIOWrapper!\u0026#39;), encoding=\u0026#39;utf-8\u0026#39;) as text_io_wrapper: content = text_io_wrapper.read() # 读取文本内容 # IncrementalNewlineDecoder 方法 decoder = io.IncrementalNewlineDecoder() decoder.decode(b\u0026#39;line1\\nline2\\n\u0026#39;) # 解码字节 # TextIOBase 方法 text_io_base = io.TextIOBase() text_io_base.readable() # 检查是否可读 text_io_base.writable() # 检查是否可写 text_io_base.seekable() # 检查是否可定位 # RawIOBase 方法 raw_io_base = io.RawIOBase() raw_io_base.readable() # 检查是否可读 raw_io_base.writable() # 检查是否可写 raw_io_base.seekable() # 检查是否可定位 # IOBase 方法 io_base = io.IOBase() io_base.readable() # 检查是否可读 io_base.writable() # 检查是否可写 io_base.seekable() # 检查是否可定位 网络编程（socket、urllib）\rimport socket import urllib.request import urllib.parse #️⃣ socket 模块 # 创建 socket 对象 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 创建 TCP socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # 创建 UDP socket # 连接到服务器 s.connect((\u0026#39;www.example.com\u0026#39;, 80)) # 连接到指定地址和端口 # 绑定到地址和端口 s.bind((\u0026#39;localhost\u0026#39;, 12345)) # 绑定到本地地址和端口 # 监听连接 s.listen(5) # 监听连接（最多 5 个连接） # 接受连接 conn, addr = s.accept() # 接受连接并返回 (连接对象, 地址) # 发送数据 s.send(b\u0026#39;Hello, world!\u0026#39;) # 发送数据（TCP） s.sendto(b\u0026#39;Hello, world!\u0026#39;, (\u0026#39;localhost\u0026#39;, 12345)) # 发送数据（UDP） # 接收数据 data = s.recv(1024) # 接收数据（TCP） data, addr = s.recvfrom(1024) # 接收数据（UDP） # 关闭 socket s.close() # 关闭 socket # 获取主机名和 IP 地址 hostname = socket.gethostname() # 获取主机名 ip_address = socket.gethostbyname(hostname) # 获取 IP 地址 host_info = socket.gethostbyaddr(\u0026#39;8.8.8.8\u0026#39;) # 获取主机信息 # 将主机名和端口转换为二进制格式 binary_addr = socket.gethostbyname_ex(\u0026#39;www.example.com\u0026#39;) # 获取主机信息扩展 binary_addr_info = socket.getaddrinfo(\u0026#39;www.example.com\u0026#39;, 80) # 获取地址信息 # 设置和获取 socket 选项 s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # 设置 socket 选项 option_value = s.getsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR) # 获取 socket 选项 # 设置超时时间 s.settimeout(10.0) # 设置超时时间（秒） timeout = s.gettimeout() # 获取超时时间 # 获取 socket 地址信息 sock_name = s.getsockname() # 获取本地 socket 地址 peer_name = s.getpeername() # 获取远程 socket 地址 # 关闭 socket 的读和写 s.shutdown(socket.SHUT_RDWR) # 关闭 socket 的读和写 # 创建和处理非阻塞 socket s.setblocking(0) # 设置非阻塞模式 s.setblocking(1) # 设置阻塞模式 # 创建和处理文件描述符 fd = s.fileno() # 获取文件描述符 s = socket.socket(fileno=fd) # 从文件描述符创建 socket # 使用上下文管理器管理 socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((\u0026#39;www.example.com\u0026#39;, 80)) s.sendall(b\u0026#39;GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\u0026#39;) response = s.recv(4096) print(response) # 创建和处理 Unix 域 socket s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) # 创建 Unix 域 socket s.bind(\u0026#39;/tmp/socket_file\u0026#39;) # 绑定到文件路径 s.connect(\u0026#39;/tmp/socket_file\u0026#39;) # 连接到文件路径 # 使用 SSL 包装 socket import ssl wrapped_socket = ssl.wrap_socket(s, ssl_version=ssl.PROTOCOL_TLS) # 使用 SSL 包装 socket # 使用 select 模块多路复用 import select readable, writable, exceptional = select.select([s], [s], [s], timeout) # 多路复用 # 获取网络接口名称和地址 interface_name = socket.if_nameindex() # 获取网络接口名称 interface_addr = socket.if_nametoindex(\u0026#39;eth0\u0026#39;) # 获取网络接口地址 # 使用 getaddrinfo 获取更多详细信息 addr_info = socket.getaddrinfo(\u0026#39;www.example.com\u0026#39;, None) # 获取地址信息 # 设置 TCP_NODELAY 选项以禁用 Nagle 算法 s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1) # 设置 TCP_NODELAY 选项 # 使用 socketpair 创建一对连接的套接字 parent_sock, child_sock = socket.socketpair() # 创建一对连接的套接字 #️⃣ urllib 模块 # 使用 urlopen 打开 URL response = urllib.request.urlopen(\u0026#39;http://www.example.com\u0026#39;) # 打开 URL html = response.read() # 读取响应内容 # 使用 Request 自定义请求 req = urllib.request.Request(\u0026#39;http://www.example.com\u0026#39;) req.add_header(\u0026#39;User-Agent\u0026#39;, \u0026#39;Mozilla/5.0\u0026#39;) response = urllib.request.urlopen(req) html = response.read() # 使用 urlretrieve 下载文件 filename, headers = urllib.request.urlretrieve(\u0026#39;http://www.example.com/file.zip\u0026#39;, \u0026#39;file.zip\u0026#39;) # 下载文件 # 使用 urlcleanup 清理临时文件 urllib.request.urlcleanup() # 清理临时文件 # 编码和解码 URL 参数 params = {\u0026#39;param1\u0026#39;: \u0026#39;value1\u0026#39;, \u0026#39;param2\u0026#39;: \u0026#39;value2\u0026#39;} query_string = urllib.parse.urlencode(params) # 编码 URL 参数 parsed_params = urllib.parse.parse_qs(query_string) # 解码 URL 参数 # 解析 URL parsed_url = urllib.parse.urlparse(\u0026#39;http://www.example.com/path?query=arg\u0026#39;) # 解析 URL scheme = parsed_url.scheme # 获取 URL 的 scheme netloc = parsed_url.netloc # 获取 URL 的 netloc path = parsed_url.path # 获取 URL 的 path query = parsed_url.query # 获取 URL 的 query # 构建 URL url = urllib.parse.urlunparse((\u0026#39;http\u0026#39;, \u0026#39;www.example.com\u0026#39;, \u0026#39;/path\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;query=arg\u0026#39;, \u0026#39;\u0026#39;)) # 构建 URL # 使用 urlencode 编码查询参数 params = {\u0026#39;key1\u0026#39;: \u0026#39;value1\u0026#39;, \u0026#39;key2\u0026#39;: \u0026#39;value2\u0026#39;} encoded_params = urllib.parse.urlencode(params) # 编码查询参数 # 将查询参数添加到 URL url = \u0026#39;http://www.example.com\u0026#39; full_url = url + \u0026#39;?\u0026#39; + encoded_params # 将查询参数添加到 URL # 解析查询参数 query_params = urllib.parse.parse_qs(\u0026#39;key1=value1\u0026amp;key2=value2\u0026#39;) # 解析查询参数 # 解析 URL 并返回命名元组 parsed_url = urllib.parse.urlsplit(\u0026#39;http://www.example.com/path?query=arg\u0026#39;) # 解析 URL 并返回命名元组 # 解析和构建 URL 编码的数据 parsed_data = urllib.parse.parse_qsl(\u0026#39;key1=value1\u0026amp;key2=value2\u0026#39;) # 解析 URL 编码的数据 # 编码和解码 URL 组件 quoted_url = urllib.parse.quote(\u0026#39;http://www.example.com/dir/file name\u0026#39;) # 编码 URL 组件 unquoted_url = urllib.parse.unquote(\u0026#39;http%3A%2F%2Fwww.example.com%2Fdir%2Ffile%20name\u0026#39;) # 解码 URL 组件 # 编码和解码字节数据 quoted_bytes = urllib.parse.quote_plus(b\u0026#39;key1=value1\u0026amp;key2=value2\u0026#39;) # 编码字节数据 unquoted_bytes = urllib.parse.unquote_plus(\u0026#39;key1%3Dvalue1%26key2%3Dvalue2\u0026#39;) # 解码字节数据 # URL 编码数据 data = {\u0026#39;param1\u0026#39;: \u0026#39;value1\u0026#39;, \u0026#39;param2\u0026#39;: \u0026#39;value2\u0026#39;} encoded_data = urllib.parse.urlencode(data).encode(\u0026#39;utf-8\u0026#39;) # URL 编码数据 # 使用 opener 自定义请求处理 opener = urllib.request.build_opener() opener.addheaders = [(\u0026#39;User-Agent\u0026#39;, \u0026#39;Mozilla/5.0\u0026#39;)] response = opener.open(\u0026#39;http://www.example.com\u0026#39;) html = response.read() # 安装 opener 作为默认打开器 urllib.request.install_opener(opener) # 安装 opener # 处理 HTTP 基本认证 auth_handler = urllib.request.HTTPBasicAuthHandler() auth_handler.add_password(realm=\u0026#39;realm\u0026#39;, uri=\u0026#39;http://www.example.com\u0026#39;, user=\u0026#39;username\u0026#39;, passwd=\u0026#39;password\u0026#39;) opener = urllib.request.build_opener(auth_handler) response = opener.open(\u0026#39;http://www.example.com\u0026#39;) html = response.read() # 处理 HTTP 代理 proxy_handler = urllib.request.ProxyHandler({\u0026#39;http\u0026#39;: \u0026#39;http://proxy.example.com:8080\u0026#39;}) opener = urllib.request.build_opener(proxy_handler) response = opener.open(\u0026#39;http://www.example.com\u0026#39;) html = response.read() # 处理 HTTP cookies import http.cookiejar cookie_jar = http.cookiejar.CookieJar() cookie_handler = urllib.request.HTTPCookieProcessor(cookie_jar) opener = urllib.request.build_opener(cookie_handler) response = opener.open(\u0026#39;http://www.example.com\u0026#39;) html = response.read() # 自定义 HTTP 方法 class CustomMethod(urllib.request.Request): def get_method(self): return \u0026#39;PUT\u0026#39; req = CustomMethod(\u0026#39;http://www.example.com\u0026#39;, data=b\u0026#39;Updated data\u0026#39;) response = urllib.request.urlopen(req) html = response.read() # 使用 context 管理 SSL 设置 import ssl context = ssl.create_default_context() context.check_hostname = False context.verify_mode = ssl.CERT_NONE response = urllib.request.urlopen(\u0026#39;https://www.example.com\u0026#39;, context=context) html = response.read() 日期和时间处理（datetime、time）\rimport datetime import time #️⃣ datetime 模块 # 获取当前日期和时间 now = datetime.datetime.now() # 获取当前日期和时间 today = datetime.date.today() # 获取当前日期 # 创建日期对象 date = datetime.date(2023, 5, 31) # 创建日期对象 time = datetime.time(12, 34, 56) # 创建时间对象 datetime_obj = datetime.datetime(2023, 5, 31, 12, 34, 56) # 创建日期时间对象 # 格式化日期和时间 formatted_date = date.strftime(\u0026#39;%Y-%m-%d\u0026#39;) # 格式化日期 formatted_time = time.strftime(\u0026#39;%H:%M:%S\u0026#39;) # 格式化时间 formatted_datetime = datetime_obj.strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) # 格式化日期时间 # 解析日期和时间 parsed_date = datetime.datetime.strptime(\u0026#39;2023-05-31\u0026#39;, \u0026#39;%Y-%m-%d\u0026#39;).date() # 解析日期 parsed_time = datetime.datetime.strptime(\u0026#39;12:34:56\u0026#39;, \u0026#39;%H:%M:%S\u0026#39;).time() # 解析时间 parsed_datetime = datetime.datetime.strptime(\u0026#39;2023-05-31 12:34:56\u0026#39;, \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) # 解析日期时间 # 获取日期和时间的组件 year = date.year # 获取年 month = date.month # 获取月 day = date.day # 获取日 hour = time.hour # 获取小时 minute = time.minute # 获取分钟 second = time.second # 获取秒 # 计算时间差 delta = datetime.timedelta(days=5) # 创建时间差对象 new_date = date + delta # 日期加时间差 new_datetime = datetime_obj - delta # 日期时间减时间差 # 比较日期和时间 is_equal = date == datetime.date(2023, 5, 31) # 比较日期是否相等 is_before = datetime_obj \u0026lt; datetime.datetime(2024, 1, 1) # 比较日期时间是否在之前 is_after = time \u0026gt; datetime.time(12, 0, 0) # 比较时间是否在之后 # 获取日期和时间的最大值和最小值 min_date = datetime.date.min # 获取日期的最小值 max_date = datetime.date.max # 获取日期的最大值 min_time = datetime.time.min # 获取时间的最小值 max_time = datetime.time.max # 获取时间的最大值 min_datetime = datetime.datetime.min # 获取日期时间的最小值 max_datetime = datetime.datetime.max # 获取日期时间的最大值 # 获取当前时间的 UTC 时间和本地时间 utc_now = datetime.datetime.utcnow() # 获取当前 UTC 时间 local_now = datetime.datetime.now() # 获取当前本地时间 # 将本地时间转换为 UTC 时间 local_datetime = datetime.datetime(2023, 5, 31, 12, 34, 56) utc_datetime = local_datetime.astimezone(datetime.timezone.utc) # 将本地时间转换为 UTC 时间 # 将 UTC 时间转换为本地时间 utc_datetime = datetime.datetime(2023, 5, 31, 12, 34, 56, tzinfo=datetime.timezone.utc) local_datetime = utc_datetime.astimezone() # 将 UTC 时间转换为本地时间 # 获取时区信息 timezone = datetime.timezone(datetime.timedelta(hours=8)) # 创建时区对象 utc_offset = timezone.utcoffset(datetime_obj) # 获取时区偏移 # 使用自定义时区信息 class CustomTZ(datetime.tzinfo): def utcoffset(self, dt): return datetime.timedelta(hours=8) def dst(self, dt): return datetime.timedelta(0) custom_tz = CustomTZ() datetime_with_tz = datetime.datetime(2023, 5, 31, 12, 34, 56, tzinfo=custom_tz) # 创建带时区的日期时间对象 # 使用相对时间 relativedelta = datetime.timedelta(days=1, months=1) # 创建相对时间对象 new_datetime = datetime_obj + relativedelta # 日期时间加相对时间 # 使用 ISO 8601 格式 iso_format = datetime_obj.isoformat() # 获取 ISO 8601 格式的日期时间字符串 parsed_iso_datetime = datetime.datetime.fromisoformat(\u0026#39;2023-05-31T12:34:56\u0026#39;) # 解析 ISO 8601 格式的日期时间字符串 # 获取一周的开始日期和结束日期 start_of_week = date - datetime.timedelta(days=date.weekday()) # 获取一周的开始日期 end_of_week = start_of_week + datetime.timedelta(days=6) # 获取一周的结束日期 #️⃣ time 模块 # 获取当前时间戳 timestamp = time.time() # 获取当前时间戳 # 将时间戳转换为本地时间 local_time = time.localtime(timestamp) # 将时间戳转换为本地时间 formatted_local_time = time.strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;, local_time) # 格式化本地时间 # 将时间戳转换为 UTC 时间 utc_time = time.gmtime(timestamp) # 将时间戳转换为 UTC 时间 formatted_utc_time = time.strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;, utc_time) # 格式化 UTC 时间 # 解析时间字符串 parsed_time = time.strptime(\u0026#39;2023-05-31 12:34:56\u0026#39;, \u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) # 解析时间字符串 # 获取当前时间的时间戳 current_timestamp = time.mktime(local_time) # 获取当前时间的时间戳 # 暂停执行 time.sleep(1) # 暂停执行 1 秒 # 获取处理器时间 processor_time = time.process_time() # 获取处理器时间 # 获取时间戳的小数部分 timestamp_fraction = time.time() % 1 # 获取时间戳的小数部分 # 获取当前时间 current_time = time.ctime() # 获取当前时间的字符串表示 current_localtime = time.localtime() # 获取当前时间的本地时间 current_gmtime = time.gmtime() # 获取当前时间的 UTC 时间 # 格式化时间 formatted_time = time.strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;, current_localtime) # 格式化本地时间 formatted_utc_time = time.strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;, current_gmtime) # 格式化 UTC 时间 # 获取时间组件 year = local_time.tm_year # 获取年 month = local_time.tm_mon # 获取月 day = local_time.tm_mday # 获取日 hour = local_time.tm_hour # 获取小时 minute = local_time.tm_min # 获取分钟 second = local_time.tm_sec # 获取秒 # 使用 perf_counter 进行精确计时 start = time.perf_counter() # 获取开始时间 # 执行一些操作 end = time.perf_counter() # 获取结束时间 elapsed = end - start # 计算经过的时间 # 使用 monotonic 进行单调计时 start = time.monotonic() # 获取开始时间 # 执行一些操作 end = time.monotonic() # 获取结束时间 elapsed = end - start # 计算经过的时间 # 使用 thread_time 进行线程计时 start = time.thread_time() # 获取开始时间 # 执行一些操作 end = time.thread_time() # 获取结束时间 elapsed = end - start # 计算经过的时间 # 使用 time_ns 获取纳秒级时间戳 nanoseconds = time.time_ns() # 获取纳秒级时间戳 数学运算（math、random）\rimport math import random #️⃣ math 模块 # 数学常数 pi = math.pi # 圆周率 e = math.e # 自然常数 tau = math.tau # 圆周率的两倍 inf = math.inf # 正无穷大 nan = math.nan # 不是一个数字 # 四舍五入 result = math.ceil(4.2) # 返回不小于 x 的最小整数 result = math.floor(4.8) # 返回不大于 x 的最大整数 result = math.trunc(4.8) # 返回 x 的整数部分（截断） result = round(4.6) # 返回四舍五入后的值 # 幂和对数 result = math.exp(1) # 返回 e 的 x 次幂 result = math.log(2.718) # 返回 x 的自然对数 result = math.log(100, 10) # 返回 x 以 base 为底的对数 result = math.log2(8) # 返回 x 以 2 为底的对数 result = math.log10(100) # 返回 x 以 10 为底的对数 result = math.pow(2, 3) # 返回 x 的 y 次幂 result = math.sqrt(25) # 返回 x 的平方根 # 三角函数 result = math.sin(math.pi / 2) # 返回 x 的正弦 result = math.cos(math.pi) # 返回 x 的余弦 result = math.tan(math.pi / 4) # 返回 x 的正切 result = math.asin(1) # 返回 x 的反正弦 result = math.acos(1) # 返回 x 的反余弦 result = math.atan(1) # 返回 x 的反正切 result = math.atan2(1, 1) # 返回 y/x 的反正切 # 双曲函数 result = math.sinh(1) # 返回 x 的双曲正弦 result = math.cosh(1) # 返回 x 的双曲余弦 result = math.tanh(1) # 返回 x 的双曲正切 result = math.asinh(1) # 返回 x 的反双曲正弦 result = math.acosh(1) # 返回 x 的反双曲余弦 result = math.atanh(0.5) # 返回 x 的反双曲正切 # 角度转换 result = math.degrees(math.pi) # 将弧度转换为角度 result = math.radians(180) # 将角度转换为弧度 # 特殊函数 result = math.factorial(5) # 返回 x 的阶乘 result = math.gamma(5) # 返回 x 的伽玛函数值 result = math.lgamma(5) # 返回 x 的伽玛函数的自然对数值 # 浮点数运算 result = math.fabs(-5) # 返回 x 的绝对值 result = math.fmod(7, 3) # 返回 x % y 的浮点数余数 result = math.frexp(8) # 返回 (m, e) 使得 x = m * 2**e result = math.ldexp(0.5, 3) # 返回 x * (2**i) result = math.modf(4.5) # 返回 x 的整数部分和小数部分 result = math.copysign(1, -2) # 返回 y 的符号加上 x 的绝对值 result = math.isfinite(4.5) # 判断 x 是否是有限数 result = math.isinf(math.inf) # 判断 x 是否是无穷大 result = math.isnan(math.nan) # 判断 x 是否是 NaN result = math.isclose(1.0001, 1.0002, rel_tol=1e-5) # 判断两个数是否接近 # 其他函数 result = math.gcd(48, 180) # 返回 x 和 y 的最大公约数 result = math.lcm(48, 180) # 返回 x 和 y 的最小公倍数 result = math.prod([1, 2, 3, 4]) # 返回可迭代对象中所有元素的乘积 result = math.dist([1, 2], [4, 6]) # 返回两个点之间的欧几里得距离 result = math.hypot(3, 4) # 返回欧几里得范数 sqrt(x*x + y*y) #️⃣ random 模块 # 初始化随机数生成器 random.seed(42) # 设置随机数生成器的种子 random.seed() # 使用当前系统时间初始化随机数生成器 # 生成随机数 result = random.random() # 生成一个 0 到 1 之间的随机浮点数 result = random.uniform(1, 10) # 生成一个 a 到 b 之间的随机浮点数 result = random.randint(1, 10) # 生成一个 a 到 b 之间的随机整数，包括 a 和 b result = random.randrange(1, 10) # 生成一个 a 到 b 之间的随机整数，不包括 b result = random.choice([1, 2, 3, 4, 5]) # 从序列中随机选择一个元素 result = random.choices([1, 2, 3, 4, 5], k=3) # 从序列中随机选择 k 个元素，允许重复 result = random.sample([1, 2, 3, 4, 5], k=3) # 从序列中随机选择 k 个元素，不允许重复 result = random.betavariate(2, 5) # Beta 分布 result = random.expovariate(1 / 5) # 指数分布 result = random.gammavariate(1, 2) # Gamma 分布 result = random.gauss(0, 1) # 正态（高斯）分布 result = random.lognormvariate(0, 1) # 对数正态分布 result = random.normalvariate(0, 1) # 正态分布 result = random.vonmisesvariate(0, 1) # 冯·米塞斯分布 result = random.paretovariate(1) # 帕累托分布 result = random.weibullvariate(1, 1) # 韦布尔分布 # 随机打乱序列 my_list = [1, 2, 3, 4, 5] random.shuffle(my_list) # 随机打乱序列 字符串处理（re、string）\rimport re import string #️⃣ re 模块 # 匹配和搜索 pattern = r\u0026#39;\\d+\u0026#39; # 匹配一个或多个数字 text = \u0026#39;My number is 12345\u0026#39; match = re.match(pattern, text) # 从字符串开始处匹配 if match: print(match.group()) # 输出匹配的字符串 search = re.search(pattern, text) # 搜索整个字符串 if search: print(search.group()) # 输出匹配的字符串 findall = re.findall(pattern, text) # 查找所有匹配 print(findall) # 输出所有匹配的列表 finditer = re.finditer(pattern, text) # 返回一个迭代器，产生所有匹配 for match in finditer: print(match.group()) # 输出匹配的字符串 # 替换和分割 sub = re.sub(r\u0026#39;\\d+\u0026#39;, \u0026#39;#\u0026#39;, text) # 替换所有匹配的子串 print(sub) # 输出替换后的字符串 subn = re.subn(r\u0026#39;\\d+\u0026#39;, \u0026#39;#\u0026#39;, text) # 替换所有匹配的子串并返回替换次数 print(subn) # 输出替换后的字符串和替换次数 split = re.split(r\u0026#39;\\s+\u0026#39;, text) # 根据匹配分割字符串 print(split) # 输出分割后的列表 # 编译正则表达式 compiled_pattern = re.compile(pattern) # 编译正则表达式 match = compiled_pattern.match(text) # 使用编译的正则表达式匹配 search = compiled_pattern.search(text) # 使用编译的正则表达式搜索 findall = compiled_pattern.findall(text) # 使用编译的正则表达式查找所有匹配 finditer = compiled_pattern.finditer(text) # 使用编译的正则表达式返回一个迭代器 # 分组 pattern = r\u0026#39;(\\d+)-(\\d+)-(\\d+)\u0026#39; text = \u0026#39;My number is 123-456-7890\u0026#39; match = re.search(pattern, text) # 搜索整个字符串 if match: print(match.group(0)) # 输出整个匹配 print(match.group(1)) # 输出第一个分组 print(match.group(2)) # 输出第二个分组 print(match.group(3)) # 输出第三个分组 # 使用命名分组 pattern = r\u0026#39;(?P\u0026lt;area\u0026gt;\\d+)-(?P\u0026lt;exchange\u0026gt;\\d+)-(?P\u0026lt;number\u0026gt;\\d+)\u0026#39; match = re.search(pattern, text) if match: print(match.group(\u0026#39;area\u0026#39;)) # 输出命名分组 \u0026#39;area\u0026#39; print(match.group(\u0026#39;exchange\u0026#39;)) # 输出命名分组 \u0026#39;exchange\u0026#39; print(match.group(\u0026#39;number\u0026#39;)) # 输出命名分组 \u0026#39;number\u0026#39; # 正则表达式标志 pattern = r\u0026#39;hello world\u0026#39; text = \u0026#39;Hello World\u0026#39; match = re.search(pattern, text, re.IGNORECASE) # 忽略大小写匹配 if match: print(match.group()) # 分割和替换中使用捕获组 pattern = r\u0026#39;(\\d+)\u0026#39; text = \u0026#39;123abc456\u0026#39; split = re.split(pattern, text) # 使用捕获组进行分割 print(split) # 输出分割后的列表 sub = re.sub(pattern, r\u0026#39;(\\1)\u0026#39;, text) # 使用捕获组进行替换 print(sub) # 输出替换后的字符串 #️⃣ string 模块 # 常量 print(string.ascii_letters) # 所有 ASCII 字母（大写和小写） print(string.ascii_lowercase) # 所有小写 ASCII 字母 print(string.ascii_uppercase) # 所有大写 ASCII 字母 print(string.digits) # 所有数字字符 print(string.hexdigits) # 所有十六进制字符 print(string.octdigits) # 所有八进制字符 print(string.punctuation) # 所有标点符号 print(string.printable) # 所有可打印字符 print(string.whitespace) # 所有空白字符 # 字符串模板 template = string.Template(\u0026#39;Hello, $name!\u0026#39;) result = template.substitute(name=\u0026#39;World\u0026#39;) # 使用字典或关键字参数替换模板中的变量 print(result) # 输出 \u0026#39;Hello, World!\u0026#39; safe_result = template.safe_substitute(name=\u0026#39;World\u0026#39;) # 与 substitute 类似，但未定义的变量不会引发 KeyError print(safe_result) # 输出 \u0026#39;Hello, World!\u0026#39; # 自定义字符串格式化 custom_formatter = string.Formatter() formatted_string = custom_formatter.format(\u0026#39;Hello, {}!\u0026#39;, \u0026#39;World\u0026#39;) # 使用自定义格式化器格式化字符串 print(formatted_string) # 输出 \u0026#39;Hello, World!\u0026#39; # 使用 string 模块的一些方法 result = string.capwords(\u0026#39;hello world\u0026#39;) # 将字符串中的每个单词首字母大写 print(result) # 输出 \u0026#39;Hello World\u0026#39; 数据结构（list、tuple、dict、set）\r#️⃣ list 列表 # 创建列表 my_list = [1, 2, 3, 4, 5] # 添加元素 my_list.append(6) # 在列表末尾添加元素 my_list.insert(0, 0) # 在指定位置插入元素 # 删除元素 my_list.pop() # 删除并返回列表末尾的元素 my_list.remove(3) # 删除指定值的第一个元素 del my_list[0] # 删除指定位置的元素 # 访问元素 print(my_list[0]) # 访问指定位置的元素 print(my_list[-1]) # 访问列表末尾的元素 # 修改元素 my_list[0] = 10 # 修改指定位置的元素 # 列表切片 print(my_list[1:3]) # 获取指定范围的子列表 # 查找元素 print(3 in my_list) # 判断元素是否在列表中 # 获取列表长度 print(len(my_list)) # 获取列表的长度 # 排序 my_list.sort() # 对列表进行排序（就地排序） sorted_list = sorted(my_list) # 返回排序后的新列表 # 反转 my_list.reverse() # 反转列表 # 清空列表 my_list.clear() # 清空列表 # 复制列表 new_list = my_list.copy() # 复制列表（浅拷贝） # 列表推导式 squared = [x ** 2 for x in range(5)] # 使用列表推导式生成新列表 #️⃣ tuple 元组 # 创建元组 my_tuple = (1, 2, 3, 4, 5) # 访问元素 print(my_tuple[0]) # 访问指定位置的元素 print(my_tuple[-1]) # 访问元组末尾的元素 # 元组切片 print(my_tuple[1:3]) # 获取指定范围的子元组 # 查找元素 print(3 in my_tuple) # 判断元素是否在元组中 # 获取元组长度 print(len(my_tuple)) # 获取元组的长度 # 元组拆包 a, b, c = my_tuple # 元组拆包 # 不可变性 # my_tuple[0] = 10 # 尝试修改元组中的元素会引发 TypeError #️⃣ dict 字典 # 创建字典 my_dict = {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2, \u0026#39;c\u0026#39;: 3} # 添加或修改元素 my_dict[\u0026#39;d\u0026#39;] = 4 # 添加新键值对 my_dict[\u0026#39;a\u0026#39;] = 10 # 修改指定键的值 # 删除元素 my_dict.pop(\u0026#39;b\u0026#39;) # 删除指定键的键值对 del my_dict[\u0026#39;c\u0026#39;] # 删除指定键的键值对 # 访问元素 print(my_dict[\u0026#39;a\u0026#39;]) # 访问指定键的值 # 获取所有键或值 keys = my_dict.keys() # 获取所有键 values = my_dict.values() # 获取所有值 items = my_dict.items() # 获取所有键值对 # 查找元素 print(\u0026#39;b\u0026#39; in my_dict) # 判断键是否在字典中 # 获取字典长度 print(len(my_dict)) # 获取字典的长度 # 清空字典 my_dict.clear() # 清空字典 # 复制字典 new_dict = my_dict.copy() # 复制字典（浅拷贝） #️⃣ set 集合 # 创建集合 my_set = {1, 2, 3, 4, 5} # 添加元素 my_set.add(6) # 添加元素 my_set.update([7, 8, 9]) # 添加多个元素 # 删除元素 my_set.remove(3) # 删除指定元素 my_set.discard(10) # 删除指定元素（如果存在） # 查找元素 print(3 in my_set) # 判断元素是否在集合中 # 获取集合长度 print(len(my_set)) # 获取集合的长度 # 清空集合 my_set.clear() # 清空集合 # 复制集合 new_set = my_set.copy() # 复制集合（浅拷贝） # 集合运算 set1 = {1, 2, 3} set2 = {3, 4, 5} union_set = set1 | set2 # 并集 intersection_set = set1 \u0026amp; set2 # 交集 difference_set = set1 - set2 # 差集 symmetric_difference_set = set1 ^ set2 # 对称差集 对象编程（class、object）\r#️⃣ 定义类和创建对象 class MyClass: \u0026#34;\u0026#34;\u0026#34;一个简单的类示例\u0026#34;\u0026#34;\u0026#34; # 类属性 class_attr = \u0026#39;class_attribute\u0026#39; def __init__(self, arg1, arg2): \u0026#34;\u0026#34;\u0026#34;构造方法\u0026#34;\u0026#34;\u0026#34; self.instance_attr1 = arg1 # 实例属性1 self.instance_attr2 = arg2 # 实例属性2 def instance_method(self): \u0026#34;\u0026#34;\u0026#34;实例方法\u0026#34;\u0026#34;\u0026#34; return self.instance_attr1 + self.instance_attr2 @classmethod def class_method(cls): \u0026#34;\u0026#34;\u0026#34;类方法\u0026#34;\u0026#34;\u0026#34; return cls.class_attr @staticmethod def static_method(): \u0026#34;\u0026#34;\u0026#34;静态方法\u0026#34;\u0026#34;\u0026#34; return \u0026#39;static_method\u0026#39; # 创建对象 obj1 = MyClass(10, 20) obj2 = MyClass(30, 40) # 访问属性和调用方法 print(obj1.instance_attr1) # 访问实例属性 print(obj2.instance_method()) # 调用实例方法 # 访问类属性和调用类方法 print(MyClass.class_attr) # 访问类属性 print(MyClass.class_method()) # 调用类方法 # 调用静态方法 print(MyClass.static_method()) # 调用静态方法 #️⃣ 继承和多态 class Parent: \u0026#34;\u0026#34;\u0026#34;父类\u0026#34;\u0026#34;\u0026#34; def speak(self): \u0026#34;\u0026#34;\u0026#34;父类的方法\u0026#34;\u0026#34;\u0026#34; return \u0026#34;Parent speaks\u0026#34; class Child(Parent): \u0026#34;\u0026#34;\u0026#34;子类\u0026#34;\u0026#34;\u0026#34; def speak(self): \u0026#34;\u0026#34;\u0026#34;子类重写了父类的方法\u0026#34;\u0026#34;\u0026#34; return \u0026#34;Child speaks\u0026#34; # 创建对象 parent_obj = Parent() child_obj = Child() # 调用方法 print(parent_obj.speak()) # 调用父类的方法 print(child_obj.speak()) # 调用子类的方法 # 多重继承 class A: \u0026#34;\u0026#34;\u0026#34;类A\u0026#34;\u0026#34;\u0026#34; def speak(self): return \u0026#34;A speaks\u0026#34; class B: \u0026#34;\u0026#34;\u0026#34;类B\u0026#34;\u0026#34;\u0026#34; def speak(self): return \u0026#34;B speaks\u0026#34; class C(A, B): \u0026#34;\u0026#34;\u0026#34;类C\u0026#34;\u0026#34;\u0026#34; pass # 创建对象 c_obj = C() # 调用方法 print(c_obj.speak()) # 输出 \u0026#34;A speaks\u0026#34;，按照继承顺序调用方法 #️⃣ 魔术方法（特殊方法） class MagicClass: \u0026#34;\u0026#34;\u0026#34;魔术方法示例类\u0026#34;\u0026#34;\u0026#34; def __init__(self, value): \u0026#34;\u0026#34;\u0026#34;初始化方法\u0026#34;\u0026#34;\u0026#34; self.value = value def __repr__(self): \u0026#34;\u0026#34;\u0026#34;repr 方法\u0026#34;\u0026#34;\u0026#34; return f\u0026#39;MagicClass({self.value})\u0026#39; def __str__(self): \u0026#34;\u0026#34;\u0026#34;str 方法\u0026#34;\u0026#34;\u0026#34; return f\u0026#39;A MagicClass instance with value {self.value}\u0026#39; # 创建对象 magic_obj = MagicClass(42) # 调用特殊方法 print(repr(magic_obj)) # 调用 __repr__ 方法 print(str(magic_obj)) # 调用 __str__ 方法 "},{"id":20,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/","title":"Redis","section":"数据库","content":" Redis 简介\rRedis 是目前最受欢迎的 NoSQL 数据库, 其具备以下特性\n基于内存运行, 能低延迟高并发 分布式架构, 可以无限扩展 由开源 ANSI C编写, 提供多语言的 API 支持多种数据结构, Key-value 存储系统 Redis 应用场景\r缓存系统, (热点数据, 高频读, 低频写) 计数器、限流器 发布订阅、排行榜 分布式锁、共享 SESSION、 队列 Redis 数据结构\rRedisObject\r字符串-STRING\r整数-INT\r字符串-RAW\r列表-LIST\r双端链表-LINKDIST\r压缩列表-ZIPLIST\r哈希表-HASH\r压缩列表-ZIPLIST\r字典-HT\r集合-SET\r整数集合-INTSET\r字典-HT\r有序集合-ZSET\r压缩列表-ZIPLIST\r跳跃表-SKIPLIST 备注：后面的是前面的底层实现\n字符串-STRING\r字符串-STRING是二进制安全的字符串, 意味着不仅可以存储字符串, 还能存储图片、视频等多种类型， 最大长度支持 512M\n字符串-STRING\r相关命令\rGET/MGET\rSET/SETEX/MSET/MSETNX\rINCR/DECR\rGETSET\rDEL 列表-LIST\r该类型是一个插入顺序排序的字符串集合, 基于双链表实现。\n列表-LIST\r相关命令\rLPUSH/LPUSHX/LPOP/RPUSH/RPUSHX/RPOP/LINSERT/LSET\rLINDEX/LRANGE\rLLEN/LTRIM 哈希表-HASH\r该类型是由k-v组成的map。其中，k-v都是字符串类型的。\n哈希表-HASH\r相关命令\rHGET/HMGET/HGETALL\rHSET/HMSET/HSETNX\rHEXISTS/HLEN\rHKEYS/HDEL\rHVALS 集合-SET\r集合-SET 是无序且元素唯一的列表\n集合-SET\r相关命令\rSADD/SPOP/SMOVE/SCARD\rSINTER/SDIFF/SDIFFSTORE/SUNION 有序集合-ZSET\r有序集合-ZSET 是通过每个元素关联一个double类型的分数权值，用这个权值来进行从小到大的排序。\n集合-SET\r相关命令\rZADD/ZPOP/ZMOVE/ZCARD/ZCOUNT\rZINTER/ZDIFF/ZDIFFSTORE/ZUNION Redis 特性\rRedis 特性\r简单动态字符串SDS (Simple Dynamic String)\r三大基本特性\r事务\r发布订阅\rStream 简单动态字符串SDS (Simple Dynamic String)\r因为C语言中传统字符串的缺陷，Redis自己构建了一种名为简单动态字符串的抽象类型，简称SDS，其结构如下：\nC 字符串 SDS（REDIS 字符串） 获取字符串长度复杂度 O(N) O(1) API安全 不安全 安全 缓冲区溢出 存在 不存在 修改字符串内存分配次数 N次 最多N次 支持的内容 文本数据 文本、二进制数据 三大基本特性\r特性一，事务\r命令序列化，按序执行 原子性 三阶段：开始事务-命令入队-执行事务 命令：MULTI、EXEC、DISCARD 特性二，发布订阅（频道发布订阅）\rRedis 可以有任意个频道，每个频道负责不同的消息通讯 Pub发送消息给频道，Sub接收频道的消息 发送就忘，“fire and forgot” 命令：publish、Subscribe、Psubcribe、Unsub 特性三，Steam流\rRedis 5.0 新增 等待消费 消费组（组内竞争） 消费历史数据 FIFO 参考\rhttps://www.cnblogs.com/powertoolsteam/p/redis.html "},{"id":21,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis/","title":"Redis","section":"编程语言","content":"\rRedis 简介\r一个开源的、\n"},{"id":22,"href":"/notes/%E6%9D%82%E6%80%9D/emjoy/","title":"表情","section":"杂思","content":"\r笑脸与人\r😀😃😄😁😆😅🤣😂🙂🙃🫠😉😊😇🥰😍🤩😘😗😚😙🥲😋😛😜🤪😝🤑🤗🤭🫢🫣🤫🤔🫡🤐🤨😐😑😶🫥😶‍🌫️😏😒🙄😬😮‍💨🤥😌😔😪🤤😴😷🤒🤕🤢🤮🤧🥵🥶🥴😵😵‍💫🤯🤠🥳🥸😎🤓🧐😕🫤😟🙁☹️😮😯😲😳🥺🥹😦😧😨😰😥😢😭😱😖😣😞😓😩😫🥱😤😡😠🤬😈👿💀☠️💩🤡👹👺👻👽👾🤖😺😸😹😻😼😽🙀😿😾🙈🙉🙊💋💯💢💥💫💦💨🕳️💤👋🤚🖐️✋🖖🫱🫲🫳🫴👌🤌🤏✌️🤞🫰🤟🤘🤙👈👉👆🖕👇☝️🫵👍👎✊👊🤛🤜👏🙌🫶👐🤲🤝🙏✍️💅🤳💪🦾🦿🦵🦶👂🦻👃🧠🫀🫁🦷🦴👀👁️👅👄🫦👶🧒👦👧🧑👱👨🧔🧔‍♂️🧔‍♀️👨‍🦰👨‍🦱👨‍🦳👨‍🦲👩👩‍🦰🧑‍🦰👩‍🦱🧑‍🦱👩‍🦳🧑‍🦳👩‍🦲🧑‍🦲👱‍♀️👱‍♂️🧓👴👵🙍🙍‍♂️🙍‍♀️🙎🙎‍♂️🙎‍♀️🙅🙅‍♂️🙅‍♀️🙆🙆‍♂️🙆‍♀️💁💁‍♂️💁‍♀️🙋🙋‍♂️🙋‍♀️🧏🧏‍♂️🧏‍♀️🙇🙇‍♂️🙇‍♀️🤦🤦‍♂️🤦‍♀️🤷🤷‍♂️🤷‍♀️🫅🤴👸👳👳‍♂️👳‍♀️👲🧕🤵🤵‍♂️🤵‍♀️👰👰‍♂️👰‍♀️🤰🫃🫄🤱👩‍🍼👨‍🍼🧑‍🍼🧍🧍‍♂️🧍‍♀️🧎🧎‍♂️🧎‍♀️💃🕺🛀🛌🧑‍🤝‍🧑👭👫👬💏👩‍❤️‍💋‍👨👨‍❤️‍💋‍👨👩‍❤️‍💋‍👩💑👩‍❤️‍👨👨‍❤️‍👨👩‍❤️‍👩💌💘💝💖💗💓💞💕💟❣️💔❤❤️‍🩹❤️🧡💛💚💙💜🤎🖤🤍\n动物与自然\r🐵🐒🦍🦧🐶🐕🦮🐕‍🦺🐩🐺🦊🦝🐱🐈🐈‍⬛🦁🐯🐅🐆🐴🐎🦄🦓🦌🦬🐮🐂🐃🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🦙🦒🐘🦣🦏🦛🐭🐁🐀🐹🐰🐇🐿️🦫🦔🦇🐻🐻‍❄️🐨🐼🦥🦦🦨🦘🦡🐾🦃🐔🐓🐣🐤🐥🐦🐧🕊️🦅🦆🦢🦉🦤🪶🦩🦚🦜🐦‍⬛🐸🐊🐢🦎🐍🐲🐉🦕🦖🐳🐋🐬🦭🐟🐠🐡🦈🐙🐚🪸🐌🦋🐛🐜🐝🪲🐞🦗🪳🕷️🕸️🦂🦟🪰🪱🦠💐🌸💮🪷🏵️🌹🥀🌺🌻🌼🌷🌱🪴🌲🌳🌴🌵🌾🌿☘️🍀🍁🍂🍃🪹🪺🍄\n饮食\r🍇🍈🍉🍊🍋🍌🍍🥭🍎🍏🍐🍑🍒🍓🫐🥝🍅🫒🥥🥑🍆🥔🥕🌽🌶️🫑🥒🥬🥦🧄🧅🥜🫘🌰🍞🥐🥖🫓🥨🥯🥞🧇🧀🍖🍗🥩🥓🍔🍟🍕🌭🥪🌮🌯🫔🥙🧆🥚🍳🥘🍲🫕🥣🥗🍿🧈🧂🥫🍱🍘🍙🍚🍛🍜🍝🍠🍢🍣🍤🍥🥮🍡🥟🥠🥡🦀🦞🦐🦑🦪🍦🍧🍨🍩🍪🎂🍰🧁🥧🍫🍬🍭🍮🍯🍼🥛☕🫖🍵🍶🍾🍷🍸🍹🍺🍻🥂🥃🫗🥤🧋🧃🧉🧊🥢🍽️🍴🥄🔪🫙🏺\n行为\r🎃🎄🎆🎇🧨✨🎈🎉🎊🎋🎍🎎🎏🎐🎑🧧🎀🎁🎗️🎟️🎫🎖️🏆🏅🥇🥈🥉⚽⚾🥎🏀🏐🏈🏉🎾🥏🎳🏏🏑🏒🥍🏓🏸🥊🥋🥅⛳⛸️🎣🤿🎽🎿🛷🥌🎯🪀🪁🔫🎱🔮🪄🎮🕹️🎰🎲🧩🧸🪅🪩🪆♠️♥️♦️♣️♟️🃏🀄🎴🎭🖼️🎨🧵🪡🧶🪢🧑‍⚕️👨‍⚕️👩‍⚕️🧑‍🎓👨‍🎓👩‍🎓🧑‍🏫👨‍🏫👩‍🏫🧑‍⚖️👨‍⚖️👩‍⚖️🧑‍🌾👨‍🌾👩‍🌾🧑‍🍳👨‍🍳👩‍🍳🧑‍🔧👨‍🔧👩‍🔧🧑‍🏭👨‍🏭👩‍🏭🧑‍💼👨‍💼👩‍💼🧑‍🔬👨‍🔬👩‍🔬🧑‍💻👨‍💻👩‍💻🧑‍🎤👨‍🎤👩‍🎤🧑‍🎨👨‍🎨👩‍🎨🧑‍✈️👨‍✈️👩‍✈️🧑‍🚀👨‍🚀👩‍🚀🧑‍🚒👨‍🚒👩‍🚒👮👮‍♂️👮‍♀️🕵️🕵️‍♂️🕵️‍♀️💂💂‍♂️💂‍♀️🥷👷👷‍♂️👷‍♀️👼🎅🤶🧑‍🎄🦸🦸‍♂️🦸‍♀️🦹🦹‍♂️🦹‍♀️🧙🧙‍♂️🧙‍♀️🧚🧚‍♂️🧚‍♀️🧛🧛‍♂️🧛‍♀️🧜🧜‍♂️🧜‍♀️🧝🧝‍♂️🧝‍♀️🧞🧞‍♂️🧞‍♀️🧟🧟‍♂️🧟‍♀️🧌💆💆‍♂️💆‍♀️🧑‍🦯👨‍🦯👩‍🦯🧑‍🦼👨‍🦼👩‍🦼🧑‍🦽👨‍🦽👩‍🦽🏃🏃‍♂️🏃‍♀️🚶🚶‍♂️🚶‍♀️💇💇‍♂️💇‍♀️🕴️👯👯‍♂️👯‍♀️🧖🧖‍♂️🧖‍♀️🧗🧗‍♂️🧗‍♀️🤺🏇⛷️🏂🏌️🏌️‍♂️🏌️‍♀️🏄🏄‍♂️🏄‍♀️🚣🚣‍♂️🚣‍♀️🏊🏊‍♂️🏊‍♀️⛹️⛹️‍♂️⛹️‍♀️🏋️🏋️‍♂️🏋️‍♀️🚴🚴‍♂️🚴‍♀️🚵🚵‍♂️🚵‍♀️🤸🤸‍♂️🤸‍♀️🤼🤼‍♂️🤼‍♀️🤽🤽‍♂️🤽‍♀️🤾🤾‍♂️🤾‍♀️🤹🤹‍♂️🤹‍♀️🧘🧘‍♂️🧘‍♀️👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👦👨‍👦‍👦👨‍👧👨‍👧‍👦👨‍👧‍👧👩‍👦👩‍👦‍👦👩‍👧👩‍👧‍👦👩‍👧‍👧\n出行与地点\r🌍🌎🌏🌐🗺️🗾🧭🏔️⛰️🌋🗻🏕️🏖️🏜️🏝️🏞️🏟️🏛️🏗️🧱🪨🪵🛖🏘️🏚️🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🕌🛕🕍⛩️🕋⛲⛺🌁🌃🏙️🌄🌅🌆🌇🌉♨️🎠🛝🎡🎢💈🎪🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🛻🚚🚛🚜🏎️🏍️🛵🦽🦼🛺🚲🛴🛹🛼🚏🛣️🛤️🛢️⛽🛞🚨🚥🚦🛑🚧⚓🛟⛵🛶🚤🛳️⛴️🛥️🚢✈️🛩️🛫🛬🪂💺🚁🚟🚠🚡🛰️🚀🛸🛎️🧳⌛⏳⌚⏰⏱️⏲️🕰️🕛🕧🕐🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣🕘🕤🕙🕥🕚🕦🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌡️☀️🌝🌞🪐⭐🌟🌠🌌☁️⛅⛈️🌤️🌥️🌦️🌧️🌨️🌩️🌪️🌫️🌬️🌀🌈🌂☂️☔⛱️⚡❄️☃️⛄☄️🔥💧🌊\n物体\r👓🕶️🥽🥼🦺👔👕👖🧣🧤🧥🧦👗👘🥻🩱🩲🩳👙👚👛👜👝🛍️🎒🩴👞👟🥾🥿👠👡🩰👢🪮👑👒🎩🎓🧢🪖⛑️📿💄💍💎🔇🔈🔉🔊📢📣📯🔔🔕🎼🎵🎶🎙️🎚️🎛️🎤🎧📻🎷🪗🎸🎹🎺🎻🪕🥁🪘📱📲☎️📞📟📠🔋🪫🔌💻🖥️🖨️⌨️🖱️🖲️💽💾💿📀🧮🎥🎞️📽️🎬📺📷📸📹📼🔍🔎🕯️💡🔦🏮🪔📔📕📖📗📘📙📚📓📒📃📜📄📰🗞️📑🔖🏷️💰🪙💴💵💶💷💸💳🧾💹✉️📧📨📩📤📥📦📫📪📬📭📮🗳️✏️✒️🖋️🖊️🖌️🖍️📝💼📁📂🗂️📅📆🗒️🗓️📇📈📉📊📋📌📍📎🖇️📏📐✂️🗃️🗄️🗑️🔒🔓🔏🔐🔑🗝️🔨🪓⛏️⚒️🛠️🗡️⚔️💣🪃🏹🛡️🪚🔧🪛🔩⚙️🗜️⚖️🦯🔗⛓️🪝🧰🧲🪜⚗️🧪🧫🧬🔬🔭📡💉🩸💊🩹🩼🩺🩻🚪🛗🪞🪟🛏️🛋️🪑🚽🪠🚿🛁🪤🪒🧴🧷🧹🧺🧻🪣🧼🫧🪥🧽🧯🛒🚬⚰️🪦⚱️🧿🪬🗿🪧🪪\n符号\r🏧🚮🚰♿🚹🚺🚻🚼🚾🛂🛃🛄🛅🗣️👤👥🫂👣 ⚠️🚸⛔🚫🚳🚭🚯🚱🚷📵🔞☢️☣️ ⬆️↗️➡️↘️⬇️↙️⬅️↖️↕️↔️↩️↪️⤴️⤵️🔃🔄🔙🔚🔛🔜🔝 🛐⚛️🕉️✡️☸️☯️✝️☦️☪️☮️🕎🔯♈♉♊♋♌♍♎♏♐♑♒♓⛎ 🔀🔁🔂▶️⏩⏭️⏯️◀️⏪⏮️🔼⏫🔽⏬⏸️⏹️⏺️⏏️🎦 🔅🔆📶🛜📳📴♀️♂️⚧️✖️➕➖➗🟰♾️‼️⁉️❓❔❕❗〰️💱💲⚕️♻️⚜️🔱📛🔰⭕✅☑️✔️❌❎➰➿〽️✳️✴️❇️©️®️™️ #️⃣*️⃣0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟🔠🔡🔢🔣🔤🅰️🆎🅱️🆑🆒🆓ℹ️🆔Ⓜ️🆕🆖🅾️🆗🅿️🆘🆙🆚🈁🈂️🈷️🈶🈯🉐🈹🈚🈲🉑🈸🈴🈳㊗️㊙️🈺🈵 🔴🟠🟡🟢🔵🟣🟤⚫⚪🟥🟧🟨🟩🟦🟪🟫⬛⬜◼️◻️◾◽▪️▫️ 🔶🔷🔸🔹🔺🔻💠🔘🔳🔲💬👁️‍🗨️🗨️🗯️💭\n旗帜\r🏁🚩🎌🏴🏳️🏳️‍🌈🏳️‍⚧️🏴‍☠️🇦🇨🇦🇩🇦🇪🇦🇫🇦🇬🇦🇮🇦🇱🇦🇲🇦🇴🇦🇶🇦🇷🇦🇸🇦🇹🇦🇺🇦🇼🇦🇽🇦🇿🇧🇦🇧🇧🇧🇩🇧🇪🇧🇫🇧🇬🇧🇭🇧🇮🇧🇯🇧🇱🇧🇲🇧🇳🇧🇴🇧🇶🇧🇷🇧🇸🇧🇹🇧🇻🇧🇼🇧🇾🇧🇿🇨🇦🇨🇨🇨🇩🇨🇫🇨🇬🇨🇭🇨🇮🇨🇰🇨🇱🇨🇲🇨🇳🇨🇴🇨🇵🇨🇷🇨🇺🇨🇻🇨🇼🇨🇽🇨🇾🇨🇿🇩🇪🇩🇬🇩🇯🇩🇰🇩🇲🇩🇴🇩🇿🇪🇦🇪🇨🇪🇪🇪🇬🇪🇭🇪🇷🇪🇸🇪🇹🇪🇺🇫🇮🇫🇯🇫🇰🇫🇲🇫🇴🇫🇷🇬🇦🇬🇧🇬🇩🇬🇪🇬🇫🇬🇬🇬🇭🇬🇮🇬🇱🇬🇲🇬🇳🇬🇵🇬🇶🇬🇷🇬🇸🇬🇹🇬🇺🇬🇼🇬🇾🇭🇰🇭🇲🇭🇳🇭🇷🇭🇹🇭🇺🇮🇨🇮🇩🇮🇪🇮🇱🇮🇲🇮🇳🇮🇴🇮🇶🇮🇷🇮🇸🇮🇹🇯🇪🇯🇲🇯🇴🇯🇵🇰🇪🇰🇬🇰🇭🇰🇮🇰🇲🇰🇳🇰🇵🇰🇷🇰🇼🇰🇾🇰🇿🇱🇦🇱🇧🇱🇨🇱🇮🇱🇰🇱🇷🇱🇸🇱🇹🇱🇺🇱🇻🇱🇾🇲🇦🇲🇨🇲🇩🇲🇪🇲🇫🇲🇬🇲🇭🇲🇰🇲🇱🇲🇲🇲🇳🇲🇴🇲🇵🇲🇶🇲🇷🇲🇸🇲🇹🇲🇺🇲🇻🇲🇼🇲🇽🇲🇾🇲🇿🇳🇦🇳🇨🇳🇪🇳🇫🇳🇬🇳🇮🇳🇱🇳🇴🇳🇵🇳🇷🇳🇺🇳🇿🇴🇲🇵🇦🇵🇪🇵🇫🇵🇬🇵🇭🇵🇰🇵🇱🇵🇲🇵🇳🇵🇷🇵🇸🇵🇹🇵🇼🇵🇾🇶🇦🇷🇪🇷🇴🇷🇸🇷🇺🇷🇼🇸🇦🇸🇧🇸🇨🇸🇩🇸🇪🇸🇬🇸🇭🇸🇮🇸🇯🇸🇰🇸🇱🇸🇲🇸🇳🇸🇴🇸🇷🇸🇸🇸🇹🇸🇻🇸🇽🇸🇾🇸🇿🇹🇦🇹🇨🇹🇩🇹🇫🇹🇬🇹🇭🇹🇯🇹🇰🇹🇱🇹🇲🇹🇳🇹🇴🇹🇷🇹🇹🇹🇻🇹🇼🇹🇿🇺🇦🇺🇬🇺🇲🇺🇳🇺🇸🇺🇾🇺🇿🇻🇦🇻🇨🇻🇪🇻🇬🇻🇮🇻🇳🇻🇺🇼🇫🇼🇸🇽🇰🇾🇪🇾🇹🇿🇦🇿🇲🇿🇼🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿\n"},{"id":23,"href":"/notes/%E6%9D%82%E6%80%9D/%E6%B5%8B%E8%AF%95%E4%B8%93%E7%94%A8/","title":"测试专用","section":"杂思","content":" 这是一只猫\nhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\rhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\rhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\rhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\rhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\rhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\rhttps://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\r/assert/img/testImg.jpg\rhttps://wx4.sinaimg.cn/mw690/006YrfC3ly1hlm6754os0j30u01c07db.jpg\rhttps://wx3.sinaimg.cn/mw690/005FUnREgy1hlmbfamzpdj30r70sxn1r.jpg\rhttps://wx1.sinaimg.cn/mw690/bfcada65ly1hlm4n0ennoj22qf5xckjo.jpg * 欧洲\r* 德国\r* 法国\r* 英国\r* 俄国\r* 意大利 node node [\r这是个 \u0026lt;b\u0026gt;结点\r----\r] 周杰伦 https://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\r周杰伦 https://img.cdn.tencent-qq.cn/Yize/2022/12/5a4fc700cf7531f5.webp\r这个杀手不太冷 https://img2.doubanio.com/view/photo/s_ratio_poster/public/p511118051.jpg "},{"id":24,"href":"/notes/%E6%9D%82%E6%80%9D/%E7%AC%AC%E4%BA%8C%E5%8F%B0%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%80%89%E8%B4%AD/","title":"第二台笔记本选购","section":"杂思","content":"\r笔记本电脑\r硬性条件\n16GB 运存 接口丰富: typc接口充电 必须线下看过 触控屏幕 1.5kg 以下 16寸以上 待选项 机械革命 CODE 01 ￥4.7k 华为 华为笔记本 MateBook B3-520 ￥5.2k 华硕 灵耀 15 ￥7k 惠普 星Book 15 ￥4.6k 宏基非凡go 14寸 1.3kg ￥4k 宏基非凡go 14寸 1.4kg ￥3.9k 宏基传奇 16寸 1.2kg 16g ￥4.8k 暂定 宏基 ￥3.9k 非凡go pro 14寸 1.4kg ￥4.5k 传奇 16寸 1.2kg 16g 最终选择:宏基 传奇 16寸 1.2kg 16g ￥4.5k\r理由\r是最轻的16寸笔记本 1.2kg， 这已经比很多14寸笔记还要轻薄了，而我最看重笔记本的轻薄 4k的高画质，4k比2k还是要高出一个档次，码字写代码都挺合适的 两个 M.2 硬盘位, 可随时扩容 没有数字小键盘, 打字更方便 指纹解锁, 还是很方便的 缺点\r电池50w时, 断电只能坚持 7小时 屏幕是oled, 据说还是没有LCD屏幕好用 运存是板载的16G, 没法扩容16G 电脑 价格 机械革命 CODE 01 ￥4.7k 华为 华为笔记本 MateBook B3-520 ￥7k 华硕 灵耀 15 ￥4.6k 宏基非凡go 14寸 1.3kg ￥3.9k 宏基传奇 16寸 1.2kg 16g ￥4.5k "},{"id":25,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%AF%AE%E7%90%83/","title":"关于篮球","section":"个人","content":"健壮的身体和娴熟的技术\n关于投篮 动作要点: 调整脚步,左脚在前,右脚在后 想象下面有个凳子坐下去,接着像弹簧一样起来 辅助手确定最左出手范围，控制方向 直臂出手,打直手腕 手指拨球,压腕让球保持高度和旋速 保持投篮动作 目标是弧度尽量高，发力尽量轻松 要往上发力投篮，就要往下下面压，下半身和上半身要发力不脱节 投篮手不要抓球，食指和中指张开，压腕时合拢 辅助手确定投篮范围，控制方向 在脚发力完成之前， 投篮夹角＜90度 投篮弧度要是一个抛物线，高度要高于篮板上沿 几个重要的指标：球旋速、球高度 关于上篮 果冻上篮，手心正对着篮板，旋球到篮板的左上角或者右上角 多观察全局位置 攻击前侧脚 关于运球 减少运球时间 只突破不经常终结，多多分球 踮脚尖走路能锻炼小腿肌肉和踝关节稳定性。 一直收肚子能减少身体负担 "},{"id":26,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E6%88%91/","title":"关于我","section":"个人","content":"\r个人介绍\r23 岁, 1年工作经验,软工专业, 一名软件开发者。 热爱互联网行业, 擅长做后端开发, 略懂一点对话AI。 爱做项目, 编程 5 年间, 有 15+ 独立项目开发经验 。 喜欢记录总结, www.ltao.top 博客目前已运行近 1 年\n个人经历\r大学期间, 我自学了多种编程语言和技术栈, 包括Python 后端、前端、大数据等，大三曾取得金砖大赛国二奖, 大四毕业取得湖南省程序设计二等奖和省优秀毕业生,并以基于用户行为的新能源充电桩项目入选校企合作名单。 毕业后, 实习顺利入职湖南超能机器人做 AI 对话, 作为项目核心开发者,将该 AI 对话项目由零迭代到上线。 目前就职深圳亿达信息， 担任 Python 工程师, 负责公司后端接口开发与测试。\n工作经历\r2021年11月-2023年3月 湖南超能机器人 AI助理\r智能问诊项目 负责人\r清洗训练数据近 2w 条, 处理NLU 和 NLG 部分工作, 并对接后端开始内部测试 从零推动 AI 对话项目版本迭代到上线开售 2023年4月-至今 深圳亿达信息 Python开发\r支付分账项目 参与者\r迭代项目版本 测试 技术栈\r熟悉Python的Django,Flask等后端框架，掌握基本的数据结构和常见算法 熟悉Linux系统应用部署以及管理，能独立部署项目到服务器 联系我\r邮箱: liao4256@qq.com 所在地: 深圳\n"},{"id":27,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E8%AE%A1%E5%88%92/","title":"计划","section":"个人","content":"\r待办\r【流笔】色彩板块更改 【流笔】文章样式更改 1~5 级标题：色彩和字体等确定 关键字：色彩和字体等确定 "},{"id":28,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","title":"计算机网络","section":"理论知识","content":"\r概览\r计网的层次体系可以用两个体系来解释， 分别是理论上七层的 OSI 体系 和 实际采用的 四层 TCP/IP 体系，后者是对前者的继承和简化， 现实中基本上都是 TCP/IP 四层，但是要理解计网的内容则还要结合两者进行学习。\n下面是有关 TCP/IP 体系和 OSI 体系的 数据单元、主要设备、相关协议的一览表。\nTCP/IP 体系 OSI 体系 数据单元 主要设备 相关协议 ^应用层 应用层 ^数据(Data) 服务器 SMTP、HTTP、HTTP、Telent、SSH、DNS、FTP 表示层 ^无专门设备 会话层 消息(Messages) 运输层 运输层 数据报(Datagrams) TCP、UDP 网络层 网络层 数据包(Packets) 路由器、三层交换机 ARP、RARP、ICMP、IP、IMGP ^数据链路层 数据链路层 帧(Frames) 交换机、网桥、网卡 PPP、CRC 物理层 比特流 网卡、集线器、网络电缆、中继器 IEEE802.1A IEEE802.2到IEEE802.11 应用层\r应用层负责为应用软件提供网络服务的接口\n应用层\rFTP——文件传输协议【21】\rSSH——加密远程登录协议【22】\rTelent——远程登录协议【23】\rSMTP——简单邮件传输协议【25】\rDNS——域名系统【UDP、TCP】【53】\rHTTP——超文本传输协议【80】\rPOP3——邮件接收协议【98】\rIMAP——邮件同步协议【143】\rDHCP——动态IP协议【UDP】【67客户端请求、68服务器响应】\rHTTPS——SSL/TLS加密的HTTP协议【443】 表示层\r表示层负责为应用层提供数据转换操作，包括数据解密、数据压缩、数据格式转换。\n会话层\r会话层负责管理会话进程，包括建立、管理、终止会话进程。\n运输层\r运输层负责提供端到端传输、差错控制和流量控制，其中，端到端的传输包括 TCP 协议、UDP协议。 下表为 TCP 协议、UDP 协议之间的不同之处。\nTCP 协议 UDP 协议 首部长度 20 Byte 8 Byte 可靠 ^是 ^否 有序 建立连接 流量控制 拥塞控制 传输对象 字节流 数据包 通信限制 1对1 都支持 三次握手\r三次握手的主要作用是测试双方的发送和接收能力都正常, 因为 TCP 是全双工通信, 所以要保证双方的发送和接收能力都是正常的。\n第一请求是客户端发，服务端收， SYN=1 、seq=x。 第二请求是服务端发，客户端收， SYN=1，ACK=1，ack=x+1，seq=y。 第三请求是客户端发，服务端收， ACK=1，ack=y+1，seq=x+1。\n服务端收到请求一并发送请求二时, 证明了客户端能发和服务端能收。客户端收到请求二发送请求三时, 证明了服务端能发和客户端能收，至此可以建立全双工的 TCP 连接了。\n四次挥手\r同样的, 四次挥手是测试双方的发送和接收都已关闭。\n请求一是客户端发，服务端收， FIN=1 、seq=x。 请求二是服务端发，客户端收， ACK=1，ack=x+1、seq=y。 请求三是服务端发，服务端收， FIN=1，ACK=1、ack=x+1、seq=z。 请求四是客户端发，服务端收， ACK=1 、ack=z+1、seq=x+1。\n同样的， 客户端发送完请求一并收到请求二时， 客户端的发和服务端的收已经关闭。 不服务端发送完请求三并收到请求四，服务端才关闭客户端的收和服务端的发。 特别之处在于，为了防止请求四丢失，要等待一个报文存在最大时长（2MSL）才彻底断开连接，如果\n网络层\r网络层负责实现数据的透明传输、路径选择、逻辑寻址。\n网络层\rIP 协议部分\rIP 地址\r子网划分\rIP 传播部分\rARP——地址解析协议\rRARP——逆地址解析协议\rICMP——网络控制报文协议\r路由算法部分\rIGP（内部网关协议，系统内部）\rRIP——跳数优先协议\rOSPF——长度优先协议\rEGP（外部网关协议，系统之间）\rBGP——路由交换协议 _设计思路\r简单灵活的,无连接的,尽最大努力交付的数据报服务\rIP\\nInternet Protocol\\n网际协议\r[#FFBBCC] 配套协议\rARP\\nAddress Resolution Protocol\\n地址解析协议(IP-\u0026gt;MAC)\rICMP\\nInternet Control Message Protocol\\n控制报文协议\rIGMP\\nInternet Group Management Protocol\\n网际租管理协议\r[#FFBBCC] IP 地址编址\r历史发展阶段, 分类的IP地址\u0026gt;\u0026gt;子网的划分\u0026gt;\u0026gt;构成超网\r构成\r{\u0026lt;网络号\u0026gt;,\u0026lt;主机号\u0026gt;}\r分类\rA 类,{ \u0026lt;网络号(开头为0),8位\u0026gt;,\u0026lt;主机号,24位\u0026gt;}\rB 类,{ \u0026lt;网络号(开头为10),16位\u0026gt;,\u0026lt;主机号,16位\u0026gt;}\rC 类,{ \u0026lt;网络号(开头为110),24位\u0026gt;,\u0026lt;主机号,8位\u0026gt;}\rD 类,开头为1110,多播地址\rE 类,保留为今后使用\rARP\\nAddress Resolution Protocol\\n地址解析协议\r功能:用IP地址找到局域网内的对应硬件地址\r关键词:ARP cache, 广播, 局域网\r过程:广播问局域网内主机对应IP的MAC地址,\\n匹配主机单播回应 数据链路层\r数据链路层负责解决封装成帧、透明传输、差错检测。\n数据链路层\r点对点信道——PPP协议\r广播信道\r局域网协议\rLLC，逻辑链路控制\rMAC，媒体接入子层\r接入方式\rCSMA/CD， 载波监听多点接入/碰撞检测 物理层\r物理层\r特性——机械、电气、功能、过程\r调制\r基带调制（编码）\r不归零、归零\r曼彻斯特、差分曼彻斯特\r载波调制\r调幅、调相、调位\r信道\r类型：单工、半双工、全双工\r极限容量因素：信道频率范围、信噪比\r传输媒体：双绞线、同轴电缆、光纤\r复用技术：FDM、TDM、STDM（统计时分）、CDM、WDM\r宽带接入技术：ADSL（拨号上网）、FTTH（光纤到户） 应用层\r应用层协议是为了各应用进程需要不同的通信规则而存在的, 也是要依赖运输层所提供的基本通信服务。\n概念\r应用层主要包括以下内容\n域名系统 DNS WWW 和 HTTP 协议 电子邮件的相关协议，SMTP 协议和 POP3 协议、IMAP 协议 域名系统 DNS\rDNS 的作用是将域名转为IP地址，具体的过程是应用进程调用 resolver（解析程序），发送包含待解析的域名的 DNS 请求报文，通过 UDP 进行再包装发送到本地域名服务器，本地域名服务器搜索以后，把对应的 IP 地址放在回答报文返回。\n域名\r域名是一个空间概念，可比作一个盒子，最大的一个盒就是顶级域名，再里面的盒子叫做二级域名，再里面的盒子叫做三级域名。 如www.baidu.com这个域名，从左到右域名等级依次提高，com就是顶级域名，baidu则是二级域名，www是三级域名。\n这些顶级域名和二级域名以及其他等级的域名都是要遵守域名规则\n必须是英文字母或数字，不区分大小写 一个域名长度不超过 63 个字符 所有域名加起来长度 255 个字符 运输层\rTCP 协议\r特点:面向连接(虚连接);点对点;可靠有序,不丢不重;全双工通信;字节流 全双工通信:发送缓存和接收缓存\nTCP首部\r0 8 16 24 31\r---------------------------------------------------------------------------\r源端口 | 目的端口\r---------------------------------------------------------------------------\r序号(seq)\r---------------------------------------------------------------------------\r确认号\r---------------------------------------------------------------------------\r首部长度|保留|[URG,ACK,PSH,RST,SYN,FIN] |\t接收窗口大小\r---------------------------------------------------------------------------\r检验和 | 紧急指针\r---------------------------------------------------------------------------\r选项(长度可变) | 填充\r---------------------------------------------------------------------------\r图 TCP的报文段首部 说明:\nTCP首部总长为21B(20B固定,1B占位),第一行总长度都是4B(32位), |表示所占区分割线,如源端口所占为[0,16]的区域 序号(seq):在TCP连接的字节流中,报文段中第一个字节的序号 确认号: 下一个要收报文段的序号, 序号为N, 则序号到N-1的数据都已收到 首部长度:表示TCP首部的长度,单位为4B URG:紧急位,调整报文段优先级 ACK: TCP连接之后,ACk=1,标识为有效报文 PSH: 不需要等发送缓存填满才发 SYN: 标识为同步报文 FIN: 标识为终止报文 接收窗口大小:能够接收窗口的大小 检验和:检验首部+数据,检验要加12B伪首部,第四个字段为6 紧急指针: URG=1才有意义,紧急数据的字节数 选项: 最大报文长度MSS, 窗口扩大,时间戳 UDP\rUPD 头部信息包括4个内容, 分别是从哪来（源端口）、到哪去（终端口）、有多长（长度）、对不对（校验和）\n应用层协议的支持\rTCP: SMTP, FTP, HTTP, TELENT UDP: 其他\n网络层\rIP 地址的分类\r五类IP地址 A类,开头为0，0.0.0.0 ~ 127.255.255.255, 私有地址为10.0.0.0/8 B类,开头为10，128.0.0.0 ~ 191.255.255.255,私有地址为172.16.0.0/12 C类,开头为110，192.0.0.0 ~ 223.255.255.255,私有地址为192.168.0.0/16 D类,开头为1110，224.0.0.0 ~ 239.255.255.255 E类,开头为1111，240.0.0.0 ~ 255.255.255.255\n子网掩码\r内网中192.168.1.199的前三组是网络号，后一组是主机号，子网掩码就是255.255.255.0 首先要说明的是：不是某个IP的网络号和主机号决定子网掩码是什么，而是子网掩码决定了某个IP地址的网络号与主机号是什么，IP地址是要搭配子网掩码使用的。例如上面的子网掩码决定了192.168.1.199的前三段192.168.1是网络号，最后一段199是主机号。 我们再来理解子网掩码的作用，先举个例子，市面上的两个厂家都生产电子秤，每个厂家都坚称他们的秤最准，那你是怎么知道他们的秤到底准不准？很简单，你去找一个 1KG 的国际千克原器，各放到他们的秤上测量，如果秤的测量值是1KG，那这把秤就是准的，子网掩码的作用就相当于这个大家公认的国际千克原器，是我们测量两个IP是否属于同一个网段的一个工具（应该说是让你知道某个IP地址的网络号与主机号分别是什么） 。\n如果让你判断一个IP地址：192.168.1.199的网络号和主机号分别是什么？ 请问你怎么判断？你凭什么说192.168.1是网络号？199是主机号？有什么根据吗？ 但是如果我给你一个IP地址是以下（带子网掩码）形式的： IP：192.168.1.199 子网掩码：255.255.255.0 那么根据大家公认的规则，你就可以得出这个IP的网络号和主机号了，怎么算呢？ 子网掩码的长度和IP地址一样也是一串32位的二进制数字，只不过为人类的可读性和记忆性的方便，通常使用十进制数字来表示，例如把上面的IP地址和子网掩码都转换成相应的二进制就是下面这样的：十进制 二进制 IP 地址：192.168.1.199 ‐＞11000000.10101000.00000001.11000111 子网掩码：255.255.255.0 ‐＞11111111.11111111.11111111.00000000 十进制的显示形式是给人看的，二进制的显示形式是给计算机看的。。。 子网掩码的左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。 例如上面的子网掩码255.255.255.0的 “1”的个数是左边24位，则对应IP地址左边的位数也是24位; 十进制 二进制 IP 地址：192.168.1.199 ‐＞11000000.10101000.00000001.11000111 子网掩码：255.255.255.0 ‐＞11111111.11111111.11111111.00000000 则这个IP地址的网络号就是11000000.10101000.00000001 ，转换成十进制就是 192.168.1，网掩码255.255.255.0的 “0”的个数是右边8位，则这个IP地址的主机号就是11000111，转换成十进制就是199.\n作者：知乎用户 链接：https://www.zhihu.com/question/56895036/answer/154192558 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处.\n参考\n面试官，不要再问我三次握手和四次挥手 | 猿人谷 (yuanrengu.com) "},{"id":29,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/","title":"技术记录","section":"技术","content":"\r进制转换\rhugo 添加mermaid作图\r在 footer.html(页面尾部) 添加以下代码,即可启用mermaid作图\n{{ if (.Params.mermaid) }} \u0026lt;!-- MermaidJS support --\u0026gt; \u0026lt;script async src=\u0026#34;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // Replace mermaid pre.code to div Array.from(document.getElementsByClassName(\u0026#34;language-mermaid\u0026#34;)).forEach( (el) =\u0026gt; { el.parentElement.outerHTML = `\u0026lt;div class=\u0026#34;mermaid\u0026#34;\u0026gt;${el.innerText}\u0026lt;/div\u0026gt;`; } ); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* Set svg to center */ .mermaid svg { display: block; margin: auto; } \u0026lt;/style\u0026gt; {{ end }} 参考\nhttps://cloud.tencent.com/developer/article/1944123\nhttps://note.qidong.name/2020/07/mermaid/\nCSS 字体\r在CSS中，font-size属性可以使用多种单位来指定字体大小。以下是一些常见的font-size单位： 😋\n像素（px）：像素是绝对单位，它会直接指定字体的像素大小。例如，font-size: 16px; 将文本字体设置为16像素高。\n磅（pt）：磅是印刷单位，通常用于打印。1磅等于1/72英寸，因此它也可以用于屏幕上的字体大小。例如，font-size: 12pt; 将字体设置为12磅。\n毫米（mm）：毫米是长度单位，也可以用于字体大小。例如，font-size: 5mm; 将字体大小设置为5毫米。\n厘米（cm）：厘米也是长度单位，可以用于指定字体大小。例如，font-size: 0.5cm; 将字体大小设置为0.5厘米。\n百分比（%）：百分比是相对于父元素的大小来定义字体大小。例如，font-size: 150%; 表示字体大小是父元素字体大小的150%。\nem：em单位是相对于当前元素的字体大小来定义的。例如，font-size: 1.5em; 表示字体大小是当前元素字体大小的1.5倍。\nrem：rem单位也是相对于根元素（html元素）的字体大小来定义的。这可以使字体大小在整个文档中保持一致。例如，font-size: 1.2rem; 表示字体大小是根元素字体大小的1.2倍。\n刷机参考\rTWRP刷机 https://zhuanlan.zhihu.com/p/96968140 Magisk 刷入 https://magiskcn.com/ 沸米计划 https://mi.fiime.cn/FiimePlan/24.html#gallery hugo 日期转时间戳\r原因是这样的,我在设置文章更新时间的时候,大部分的日期转时间戳貌似都没问题,除了当天的时间转时间戳,当时时间为当天的 14 点,出来的时间戳一转成时间,结果居然是 22 点, 不断测试,发现不是我代码的问题. 多次修改无果,问了chatGPT才知道,转时间戳的过程原来还有其他东西会影响 在处理时间戳时，有一些需要注意的重要事项, ChatGPT 的回答如下\n时间戳精度： 时间戳可以是秒级或毫秒级的，具体取决于系统和编程语言。确保您清楚时间戳的精度，以免出现错误。\n时区和区域性： 时间戳通常是与协调世界时 (UTC) 相关的。时区和区域性的问题可能会导致时间戳的解释不正确。在处理时间戳时，考虑时区和区域性，以便正确地显示和解释日期时间。\n时间戳格式： 时间戳可以采用不同的格式，包括整数（秒或毫秒）、ISO 8601（例如：2023-10-11T14:44:16Z）等。确保您了解所使用的时间戳格式，以正确解释和显示日期时间。\n溢出和范围： 时间戳的范围是有限的，因此要小心处理超出范围的情况。对于以秒为单位的时间戳，通常范围在约1970年至2038年之间。对于以毫秒为单位的时间戳，范围更大，但仍然有限。\n精确性： 根据时间戳的精度，可能会存在一些精度问题。毫秒级时间戳可以提供更高的精度，但仍然有限。在某些情况下，您可能需要考虑四舍五入或截断精度以满足需求。\n跨时区计算： 如果涉及到多个时区，确保正确进行时区转换。使用合适的工具和库来处理跨时区问题。\n日期时间显示： 在显示时间戳时，考虑最终用户的需求和偏好。提供适当的日期时间格式，并考虑将时间戳转换为本地时区以获得更好的用户体验。\n维护和更新： 时间戳可能需要在未来进行维护和更新，以适应不同的需求或问题。时刻注意更新可能会影响应用程序的行为。 总之，处理时间戳需要小心，要理解时间戳的精度、格式、时区和区域性，以及如何正确地显示和处理日期时间数据。这可以确保您的应用程序或系统在时间方面表现正确。\nhugo 字段bug\rpublishDate字段会有时候让文章显示不出来, 或许是 hugo 内部编译执行的过程出错\nfrontmatter: # publishDate: # - datetimeCreate lastmod: - datetimeUpdate git 代理设置和解决\rgit config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 git config --global --unset http.proxy git config --global --unset https.proxy npm config delete proxy 转载 https://gist.github.com/laispace/666dd7b27e9116faece6\n蓝牙音量不正常\r经常有小伙伴反馈蓝牙耳机音量小的问题，这里科普一下为什么蓝牙耳机音量小？\n蓝牙耳机音量小，无非两种情况:\n1.手机输出音量小\n2.耳机自生音量调节小了\n好比一根水管，有两个阀门，如果其中一个开关调小，流量就会变小，要想全速流淌，必须要把两个开关全部打开。\n很多小伙伴反馈的是手机音量已经调节到最大还是音量小，其实此时手机的输出已经是最大了，要想调大音量，就必须要调节另一个水龙头，此水龙头自然就是蓝牙耳机自己的音量调节开关了。\n但是，为了把耳机做小，现在很多耳机，特别是TWS耳机，经常没有音量调节按钮，此时想要调节耳机音量，就必须要靠杀器 :蓝牙绝对音量 了。\n那么什么是 蓝牙绝对音量呢？其实，绝对音量就相当于给水管的两个水龙头加了一个联动装置，不管调节哪一个开关，两个水龙头都会同步调节，这样就不存在手机音量调节到最大，耳机或者音箱仍然音量小了。\n但是，需要注意的是，绝对音量功能并不是每个耳机都支持的，有个别耳机，音箱，及车机就是不支持绝对音量的（常见于比较老旧的设备及蓝牙芯片），判断耳机是否支持绝对音量的方法是:\n如果耳机自带音量调节按键，在手机开发者选项中开启绝对音量，然后重新连接蓝牙耳机，重连后从耳机上调节音量，如果手机能显示音量进度条，那么此耳机就是支持绝对音量的。反之则耳机不支持绝对音量。\n当然，如果有的耳机一开始可以调节，可是突然有一天，不能同步调节手机音量了，可能是手机记录了某些不规范操作，把此耳机拉黑了，此时可以尝试从手机端解除配对，重新配对的方式看是否能恢复。\n另外，也有可能是耳机自己记录了手机某些信息，将手机拉黑了，此时可以尝试将耳机恢复出厂设置，通常将耳机恢复出厂设置的方法不会写入说明书，你只能联系销售客服，咨询恢复重置耳机的方法，\n例如大多数TWS耳机重置的方法是:\n1.清除手机配对记录：无蓝牙、无TWS连接状态下，长按触控按键15秒（左右耳分别执行）\n2.断开手机连接：连接手机状态下，无音乐播放、无通话，长按主耳机触控按键5秒\n转载 https://www.realmebbs.com/post-details/1245148418070818816\n"},{"id":30,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E6%B8%85%E5%8D%95/","title":"清单","section":"个人","content":"\r软件\r【安卓手机】appShare、ES 文件浏览器、Via 浏览器、 b站(带漫游模块)、Clash、手机性能排行、Apple music、微信输入法 【win】vscode、obsidian、vivaldi（Dark Reader、AdGuard、Stylus、Tampermonkey）、图吧工具箱、autoHotkey（改键位）、winget\n硬件\r宏基传奇Edge：\n机身规格： 356.7242.312.95mm， 1.17kg 屏幕：16英寸，4k，OLED，E4，屏占比92%，支持HDR500，德国莱茵TUV硬件级低蓝光认证和eyesafe显示认证 性能：R7-6800U，16GB LPDDR5 6400MHz双通道内存，512GB PCIe 4.0 SSD，54Wh 续航8小时 外设接口：单色背光，电源指纹二合一，前置FHD摄像头（支持TNR时域降噪和AI降噪），Wifi 6e 和蓝牙5.2，2个全功能Type-C接口中、1个HDMI接口、2个USB3.2接口、1个耳麦接口 其他：标配65W Type-C 适配器 aoc 2369 23.1显示器\r显示器（高、宽） 398(H) x 531.4(W) x 204(D)\nhttps://aoc.com/uk/products/monitors/i2369v/specification\n附录\r【autoHotkey-changeKeys.ahk】：\n; 适用于 v2.0 ; Esc 映射成 AltTab *Esc::send \u0026#34;{Blind}!{Tab}\u0026#34; ; 左Alt -\u0026gt;Ctrl *LAlt::LCtrl ^1::Home ^2::End ; 左Ctrl-\u0026gt;Enter ~LCtrl::Enter ; Capslock键-\u0026gt;BackSpace键 *Capslock::BackSpace ;大写键-\u0026gt;回车键 *MButton::Enter ;win+鼠标滚轮上(下滚)滚增加(减少)音量 A_HotkeyInterval := 0 #WheelUp::Volume_Up #WheelDown::Volume_Down ;win+点击鼠标滚-\u0026gt;ESC #MButton::ESC ;禁用按win键开始菜单弹出,快捷键不受影响 ~LWin::Send \u0026#34;{Blind}{vkE8}\u0026#34; ; 功能键改成符号键 ; `F1键 -\u0026gt; ,键 *F1::, ; `2键 -\u0026gt; .键 *F2::. ; `3键 -\u0026gt; /键 *F3::/ ; `4键 -\u0026gt; ;键 *F4::; ; `F5键 -\u0026gt; \u0026#39;键 *F5::\u0026#39; ; ctrl+F1 映射成NumLock F1::NumLock ; 当 NumLock 开启时，映射 z, x, c, a, s, d, q, w, e 到 1-9 #HotIf GetKeyState(\u0026#34;NumLock\u0026#34;, \u0026#34;T\u0026#34;) z::1 x::2 c::3 a::4 s::5 d::6 q::7 w::8 e::9 #HotIf ; 关闭 HotIf 区块 "},{"id":31,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E8%89%B2%E5%BD%A9%E5%AD%A6/","title":"色彩学","section":"技术","content":"\r总览\r什么叫原色\r原色（primary color）是不能透过其他颜色的混合调配而得出的“基本色”；将不同比例的原色混合，可生成色域内其他任何颜色。 原色是指不能通过其他颜色的混合得到的基础颜色，它们是色彩系统的起点。常见的原色有两种定义：\n光学三原色（RGB）：红（Red）、绿（Green）、蓝（Blue）。这些原色用于光的混合，比如显示器、投影仪等。 颜料三原色（CMY）：青（Cyan）、品红（Magenta）、黄（Yellow）。这是用于印刷和绘画中的颜料混合, 一般用于艺术画画, 这种不在本文讨论范围内. 怎么表示颜色\r一般有两种方式来表示颜色，\n十六进制， 如#FFFFFF、#000000 RGB数值，如rgb(0,0,0)、rgb(255,255,255) 两种进制如何转换？\rRGB实际上是十进制,所以要将十六进制转为十进制即可, 每两位数是一个十六进制, 十六进制中AF=1116 举例：将 #B60023 转成 RGB 格式 过程如下，R值=B6=B(11) * 16 + 6 = 182, G=00=0, B=23=2 * 16+ 3 =35 所以 #B60023 值等于 rgb(182,0,35)\n后面的一种不需要关注, 只需要看光学三原色\n红色-Red：rgb(255,0,0) 绿色-Green：rgb(0,255,0) 蓝色-Blue：rgb(0,0,255) 什么叫间色\r间色是通过两种原色混合而成的，组合之后新增了下面三种颜色\n黄色-Yellow：rgb(255,0,255) 紫色-Purple：rgb(255,0,255) 青色-Cyan：rgb(0,255,255) 什么叫复色\r间色是通过三种颜色混合而成的，除了原色、间色、黑白色以外的所有颜色都是复色. 下面是一些常见的复色\n红色为主色调的：\r粉色-Pink：rgb(255, 192, 203) 金色-Gold：rgb(255, 215, 0) 橙色-Orange：rgb(255, 165, 0) 蓝色为主色调的：\r靛青-Indigo：rgb(75, 0, 130) 绿色为主色调的：\r两色调的：\r橄榄-Olive：rgb(128, 128, 0) 三色调的：\r灰色-Gray：rgb(128,128,128) 银色-Gray：rgb(192,192,192) 黑白色\r黑色和白色是两种特殊的颜色，黑色是什么颜色都没有就是白色，白色是RGB满的复色\n黑色：rgb(0,0,0) 白色：rgb(255,255,255) 参考:\r原色 - 维基百科，自由的百科全书 (wikipedia.org) 前端配色有哪些原则和技巧？ - 蓦然JL - 博客园 (cnblogs.com) 前端颜色详细报告（色值规律，16进制颜色规律）_前端色值-CSDN博客 【什么叫原色、间色和复色?】技术论文-南北潮商城 (nbchao.com) 驚豔！101款讓人愛不釋手的 免費商用設計配色組合 (shutterstock.com) Cold Color Palettes - Color Hunt https://htmlcolorcodes.com/zh/yanse-ming/ "},{"id":32,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/","title":"设计语言","section":"技术","content":"\r颜色\r颜色要醒目, 令人舒适\n不同颜色, 代表不同意义 重的亮深, 轻的暗浅\n大小\r字多字小, 字段字大 重的大, 轻的小\n留白\r标志\r下划线: 超链接\n"},{"id":33,"href":"/notes/%E6%9D%82%E6%80%9D/%E5%8D%9A%E5%AE%A2%E6%96%87%E6%91%98/","title":"收藏","section":"杂思","content":"\ram 的歌单获取\r请求地址: https://amp-api.music.apple.com/v1/me/library/songs?art[url]=f\u0026format[resources]=map\u0026include[library-songs]=catalog\u0026l=zh-Hans-CN\u0026limit=100\u0026meta=sorts\u0026offset=100\u0026platform=web\n请求参数:\n参数 作用 类型 authorization 授权访问码 ^动态生成 media-user-token 音频访问码 origin 源站点访问 静态 authorization: Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IldlYlBsYXlLaWQifQ.eyJpc3MiOiJBTVBXZWJQbGF5IiwiaWF0IjoxNzI1MzgwMTgxLCJleHAiOjE3MzI2Mzc3ODEsInJvb3RfaHR0cHNfb3JpZ2luIjpbImFwcGxlLmNvbSJdfQ.22ft8oc4G-lO6wRC9nDofwWtiOa0rFjW_a7j1U9qKmd35aOzrkVlJCubB4r4FsufIKIFBMvjBg-4StfFQl9Ylw\rmedia-user-token:\rAhpiH1Ew2j0RfiZ6dWgOL/qdYq83QtGkAeHN0dlpKxFhK7C1bV5qIZvxkiokwGmoLdwtDNDueZ+ecbzjLVB06HRhSftkVgDwPcowMsurWNWkVg9D/Yqe0EtXrJDk+s9NUSu+czFdTuB6XzTEvEQk8EFVF/NHGeOzBwX39HiUl6hy6pV9l7S+9u2+7hfaA1zs2ypKiXQKC3BmpcogLVCfCxDgQVjyVHQf+PXMNJu/Uhl8e8Qo1w==\rorigin\rhttps://music.apple.com 让子弹飞\r顾子明《让子弹飞》深度影评系列（干货文） (weibo.com)\n“让子弹飞”的搜索结果 - RESSRC\n罗云雷：看懂《让子弹飞》就明白毛泽东及其晚年思想 (kunlunce.com)\n哲学\r高中政治必修4 生活与哲学 - Flip PDF | FlipBuilder\n"},{"id":34,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/408/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/","title":"数据结构和算法","section":"理论知识","content":"\r参考\rhttps://www.cs.usfca.edu/~galles/visualization/Algorithms https://algo.itcharge.cn https://www.hello-algo.com https://pdai.tech/md/algorithm/alg-basic-overview.html https://www.runoob.com/w3cnote/ten-sorting-algorithm.html https://www.runoob.com/w3cnote/selection-sort.html\n排序算法\r冒泡排序 两两比较, 符合规则就换, 接着滑动窗口往后移动 选择排序 每次选最大的(无序区)放到最后(有序区) 插入排序 每次选的元素插入到有序区,类似打牌时的排序 在第五步排序的过程。程序运行到当前位置，已排好的子表中包含了 “17，26，54，77，93”五个数据。我们想让31插入该子表中。第一次，31和93比较，93要移到 31右边。同理，77和54也要移位。遇到26时，移动步骤停止，31被插入到此处。此时我们就有了 一个含6个数据项的已排好的子表 快速排序\n归并排序\n堆排序\n桶排序\n计数排序\n基数排序\n树\r完美二叉树(满二叉树)\r所有节点都是满的 完满二叉树\r只有叶子节点未满，且叶子节点尽量靠左填充。 平衡二叉树\r任何两个子树高度差小于2 "},{"id":35,"href":"/notes/%E6%9D%82%E6%80%9D/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA/","title":"数据展示","section":"杂思","content":"\rcolors.json\rrow\rCMYK\rRGB\rhex\rname\rpinyin\r0\r[4 5 18 0]\r[249 244 220]\r#f9f4dc\r乳白\rrubai\r1\r[3 8 30 0]\r[249 236 195]\r#f7e8aa\r杏仁黄\rxingrenhuang\r2\r[4 13 67 0]\r[248 223 114]\r#f8df72\r茉莉黄\rmolihuang\r3\r[5 14 68 1]\r[248 223 112]\r#f8df70\r麦秆黄\rmaiganhuang\r4\r[2 16 84 0]\r[251 218 65]\r#fbda41\r油菜花黄\ryoucaihuahuang\r5\r[1 18 94 0]\r[254 215 26]\r#fed71a\r佛手黄\rfoshouhuang\r6\r[3 16 50 0]\r[247 222 152]\r#f7de98\r篾黄\rmiehuang\r7\r[3 17 69 0]\r[248 216 106]\r#f8d86a\r葵扇黄\rkuishanhuang\r8\r[0 20 87 0]\r[252 211 55]\r#fcd337\r柠檬黄\rningmenghuang\r9\r[0 20 95 0]\r[252 210 23]\r#fcd217\r金瓜黄\rjinguahuang\r10\r[0 21 94 0]\r[254 209 16]\r#ffd111\r藤黄\rtenghuang\r11\r[2 16 39 0]\r[246 222 173]\r#f6dead\r酪黄\rlaohuang\r12\r[1 17 50 0]\r[247 218 148]\r#f7da94\r香水玫瑰黄\rxiangshuimeiguihuang\r13\r[1 21 70 0]\r[249 211 103]\r#f9d367\r淡密黄\rdanmihuang\r14\r[0 23 88 0]\r[251 205 49]\r#fbcd31\r大豆黄\rdadouhuang\r15\r[0 24 94 0]\r[252 203 22]\r#fccb16\r素馨黄\rsuxinhuang\r16\r[0 24 94 0]\r[254 204 17]\r#fecc11\r向日葵黄\rxiangrikuihuang\r17\r[0 27 88 0]\r[251 200 47]\r#fbc82f\r雅梨黄\ryalihuang\r18\r[0 28 94 0]\r[252 197 21]\r#fcc515\r黄连黄\rhuanglianhuang\r19\r[0 29 95 0]\r[252 195 7]\r#fcc307\r金盏黄\rjinzhanhuang\r20\r[0 32 52 0]\r[248 195 135]\r#f8c387\r蛋壳黄\rdankehuang\r21\r[0 32 52 0]\r[247 193 115]\r#f7c173\r肉色\rrouse\r22\r[0 35 89 0]\r[251 185 41]\r#fbb929\r鹅掌黄\rezhanghuang\r23\r[0 36 93 0]\r[251 182 18]\r#fbb612\r鸡蛋黄\rjidanhuang\r24\r[0 35 94 0]\r[252 183 10]\r#fcb70a\r鼬黄\ryouhuang\r25\r[0 44 84 0]\r[249 166 51]\r#f9a633\r榴萼黄\rliuehuang\r26\r[0 45 92 0]\r[251 164 20]\r#fba414\r淡橘橙\rdanjucheng\r27\r[0 47 92 0]\r[252 161 6]\r#fca106\r枇杷黄\rpipahuang\r28\r[0 47 92 0]\r[252 161 4]\r#fca104\r橙皮黄\rchengpihuang\r29\r[0 56 87 0]\r[252 140 35]\r#fc8c23\r北瓜黄\rbeiguahuang\r30\r[0 54 92 0]\r[250 142 22]\r#f28e16\r杏黄\rxinghuang\r31\r[0 51 91 0]\r[255 153 0]\r#ff9900\r雄黄\rxionghuang\r32\r[0 56 91 0]\r[251 139 5]\r#fb8b05\r万寿菊黄\rwanshoujuhuang\r33\r[10 13 35 1]\r[233 221 182]\r#e9ddb6\r菊蕾白\rjuleibai\r34\r[8 19 84 1]\r[238 208 69]\r#eed045\r秋葵黄\rqiukuihuang\r35\r[6 20 92 1]\r[242 206 43]\r#f2ce2b\r硫华黄\rliuhuahuang\r36\r[6 22 92 0]\r[241 202 23]\r#f1ca17\r柚黄\ryouhuang\r37\r[15 20 66 2]\r[221 200 113]\r#ddc871\r芒果黄\rmangguohuang\r38\r[14 22 85 2]\r[223 194 67]\r#dfc243\r蒿黄\rhaohuang\r39\r[12 24 95 2]\r[226 192 39]\r#e2c027\r姜黄\rjianghuang\r40\r[11 25 99 1]\r[228 191 17]\r#e4bf11\r香蕉黄\rxiangjiaohuang\r41\r[17 27 94 4]\r[210 180 44]\r#d2b42c\r草黄\rcaohuang\r42\r[17 29 100 4]\r[210 177 22]\r#d2b116\r新禾绿\rxinhelv\r43\r[28 26 45 7]\r[183 174 143]\r#b7ae8f\r月灰\ryuehui\r44\r[30 30 70 12]\r[173 158 85]\r#ad9e5f\r淡灰绿\rdanhuilv\r45\r[38 38 76 24]\r[142 128 75]\r#8e804b\r草灰绿\rcaohuilv\r46\r[36 42 100 29]\r[136 115 34]\r#887322\r苔绿\rtailv\r47\r[36 42 100 30]\r[134 112 24]\r#867018\r碧螺春绿\rbiluochunlv\r48\r[47 47 65 42]\r[104 94 72]\r#685e48\r燕羽灰\ryanyuhui\r49\r[46 47 69 42]\r[105 94 69]\r#695e45\r蟹壳灰\rxiekehui\r50\r[48 48 100 45]\r[100 88 34]\r#645822\r潭水绿\rtanshuilv\r51\r[50 50 10 48]\r[94 83 20]\r#5e5314\r橄榄绿\rganlanlv\r52\r[2 6 18 0]\r[249 241 219]\r#f9f1db\r蚌肉白\rbangroubai\r53\r[3 10 31 0]\r[248 232 193]\r#f8e8c1\r豆汁黄\rdouzhihuang\r54\r[1 19 66 0]\r[249 215 112]\r#f9d770\r淡茧黄\rdanjianhuang\r55\r[0 26 94 0]\r[255 201 12]\r#ffc90c\r乳鸭黄\rruyahuang\r56\r[5 11 22 0]\r[242 230 206]\r#f2e6ce\r荔肉白\rliroubai\r57\r[5 19 50 0]\r[240 214 149]\r#f0d695\r象牙黄\rxiangyahuang\r58\r[3 23 69 0]\r[244 206 105]\r#f4ce69\r炒米黄\rchaomihuang\r59\r[1 28 89 0]\r[246 196 48]\r#f6c430\r鹦鹉冠黄\ryingwuguanhuang\r60\r[0 30 95 0]\r[249 193 22]\r#f9c116\r木瓜黄\rmuguahuang\r61\r[0 32 95 0]\r[249 189 16]\r#f9bd10\r浅烙黄\rqianlaohuang\r62\r[11 18 39 1]\r[229 211 170]\r#e5d3aa\r莲子白\rlianzibai\r63\r[5 35 99 0]\r[232 176 4]\r#e8b004\r谷黄\rguhuang\r64\r[3 36 99 0]\r[235 177 13]\r#ebb10d\r栀子黄\rzhizihuang\r65\r[11 39 100 2]\r[217 164 14]\r#d9a40e\r芥黄\rjiehuang\r66\r[28 27 43 8]\r[181 170 144]\r#b5aa90\r银鼠灰\ryinshuhui\r67\r[26 31 57 10]\r[182 164 118]\r#b6a476\r尘灰\rchenhui\r68\r[21 43 100 11]\r[183 141 18]\r#b78d12\r枯绿\rkulv\r69\r[35 44 80 30]\r[135 114 62]\r#87723e\r鲛青\rjiaoqing\r70\r[32 50 100 31]\r[135 104 24]\r#876818\r粽叶绿\rzongyelv\r71\r[31 51 100 30]\r[138 105 19]\r#8a6913\r灰绿\rhuilv\r72\r[52 56 64 62]\r[74 64 53]\r#4a4035\r鹤灰\rhehui\r73\r[48 58 70 62]\r[77 64 48]\r#4d4030\r淡松烟\rdansongyan\r74\r[45 56 100 56]\r[88 71 23]\r#584717\r暗海水绿\ranhaishuilv\r75\r[45 55 100 54]\r[91 73 19]\r#5b4913\r棕榈绿\rzonglvlv\r76\r[1 11 24 0]\r[249 223 205]\r#f9e9cd\r米色\rmise\r77\r[1 15 38 0]\r[248 224 176]\r#f8e0b0\r淡肉色\rdanrouse\r78\r[0 23 59 0]\r[249 210 125]\r#f9d27d\r麦芽糖黄\rmaiyatanghuang\r79\r[0 34 93 0]\r[254 186 7]\r#feba07\r琥珀黄\rhupohuang\r80\r[1 31 79 0]\r[243 191 76]\r#f3bf4c\r甘草黄\rgancaohuang\r81\r[0 33 83 0]\r[248 188 49]\r#f8bc31\r初熟杏黄\rchushuxinghuang\r82\r[10 27 59 1]\r[226 193 124]\r#e2c17c\r浅驼色\rqiantuose\r83\r[7 32 78 1]\r[229 183 81]\r#e5b751\r沙石黄\rshashihuang\r84\r[3 38 97 0]\r[234 173 26]\r#eaad1a\r虎皮黄\rhupihuang\r85\r[12 41 98 2]\r[214 160 29]\r#d6a01d\r土黄\rtuhuang\r86\r[28 28 41 9]\r[180 169 146]\r#b4a992\r百灵鸟灰\rbailingniaohui\r87\r[21 44 97 11]\r[183 139 38]\r#b78b26\r山鸡黄\rshanjihuang\r88\r[35 47 71 33]\r[130 107 72]\r#826b48\r龟背黄\rguibeihuang\r89\r[34 52 85 35]\r[128 99 50]\r#806332\r苍黄\rcanghuang\r90\r[32 56 96 34]\r[129 95 37]\r#815f25\r莱阳梨黄\rlaiyanglihuang\r91\r[31 57 100 33]\r[131 94 29]\r#835e1d\r蜴蜊绿\ryililv\r92\r[46 59 68 61]\r[79 64 50]\r#4f4032\r松鼠灰\rsongshuhui\r93\r[44 61 76 62]\r[80 62 42]\r#503e2a\r橄榄灰\rganlanhui\r94\r[43 63 88 61]\r[81 60 32]\r#513c20\r蟹壳绿\rxiekelv\r95\r[42 64 94 60]\r[83 60 27]\r#533c1b\r古铜绿\rgutonglv\r96\r[41 66 94 60]\r[85 59 24]\r#553b18\r焦茶绿\rjiaochalv\r97\r[1 7 13 0]\r[251 242 227]\r#fbf2e3\r粉白\rfenbai\r98\r[1 12 22 0]\r[249 232 208]\r#f9e8d0\r落英淡粉\rluoyingdanfen\r99\r[0 27 51 0]\r[249 203 139]\r#f9cb8b\r瓜瓤粉\rguarangfen\r100\r[0 36 72 0]\r[251 185 87]\r#fbb957\r蜜黄\rmihuang\r101\r[0 44 91 0]\r[255 166 15]\r#ffa60f\r金叶黄\rjinyehuang\r102\r[0 43 82 0]\r[244 168 58]\r#f4a83a\r金莺黄\rjinyinghuang\r103\r[8 31 50 1]\r[227 189 141]\r#e3bd8d\r鹿角棕\rlujiaozong\r104\r[2 44 83 0]\r[231 162 63]\r#e7a23f\r凋叶棕\rdiaoyezong\r105\r[10 41 72 1]\r[218 164 90]\r#daa45a\r玳瑁黄\rdaimaohuang\r106\r[7 45 82 1]\r[222 158 68]\r#de9e44\r软木黄\rruanmuhuang\r107\r[6 51 95 1]\r[220 145 35]\r#dc9123\r风帆黄\rfengfanhuang\r108\r[19 44 75 7]\r[192 147 81]\r#c09351\r桂皮淡棕\rguipidanzong\r109\r[32 40 53 22]\r[151 132 108]\r#97846c\r猴毛灰\rhoumaohui\r110\r[27 60 97 21]\r[152 101 36]\r#986524\r山鸡褐\rshanjihe\r111\r[37 65 84 49]\r[102 70 42]\r#66462a\r驼色\rtuose\r112\r[38 69 90 54]\r[93 61 33]\r#5d3d21\r茶褐\rchahe\r113\r[37 74 96 55]\r[92 55 25]\r#5c3719\r古铜褐\rgutonghe\r114\r[0 10 14 0]\r[251 236 222]\r#fbecde\r荷花白\rhehuabai\r115\r[0 40 52 0]\r[248 179 127]\r#f8b37f\r玫瑰粉\rmeiguifen\r116\r[0 62 88 0]\r[249 125 28]\r#f97d1c\r橘橙\rjucheng\r117\r[0 62 85 0]\r[250 126 35]\r#fa7e23\r美人焦橙\rmeirenjiaocheng\r118\r[0 28 25 0]\r[247 205 188]\r#f7cdbc\r润红\rrunhong\r119\r[0 28 22 0]\r[246 206 193]\r#f6cec1\r淡桃红\rdantaohong\r120\r[0 53 65 0]\r[240 148 93]\r#f0945d\r海螺橙\rhailuocheng\r121\r[0 44 32 0]\r[240 173 160]\r#f0ada0\r桃红\rtaohong\r122\r[0 45 34 0]\r[238 170 156]\r#eeaa9c\r颊红\rjiahong\r123\r[0 49 41 0]\r[238 160 140]\r#eea08c\r淡罂粟红\rdanyingsuhong\r124\r[0 58 67 0]\r[234 137 88]\r#ea8958\r晨曦红\rchenxihong\r125\r[0 65 80 0]\r[242 118 53]\r#f27635\r蟹壳红\rxiekehong\r126\r[0 69 86 0]\r[248 107 29]\r#f86b1d\r金莲花橙\rjinlianhuacheng\r127\r[0 69 70 0]\r[239 111 72]\r#ef6f48\r草莓红\rcaomeihong\r128\r[0 72 82 0]\r[239 99 43]\r#ef632b\r龙睛鱼红\rlongjingyuhong\r129\r[0 81 84 0]\r[241 68 29]\r#f1441d\r蜻蜓红\rqingtinghong\r130\r[0 80 83 0]\r[240 75 34]\r#f04b22\r大红\rdahong\r131\r[0 80 85 0]\r[242 72 27]\r#f2481b\r柿红\rshihong\r132\r[0 80 85 0]\r[243 71 24]\r#f34718\r榴花红\rliuhuahong\r133\r[0 83 87 0]\r[244 62 6]\r#f43e06\r银朱\ryinzhu\r134\r[0 78 83 0]\r[237 81 38]\r#ed5126\r朱红\rzhuhong\r135\r[0 50 68 0]\r[240 156 90]\r#f09c5a\r鲑鱼红\rguiyuhong\r136\r[5 69 87 0]\r[242 123 31]\r#f26b1f\r金黄\rjinhuang\r137\r[7 52 71 1]\r[217 145 86]\r#d99156\r鹿皮褐\rlupihe\r138\r[4 57 82 1]\r[219 133 64]\r#db8540\r醉瓜肉\rzuiguarou\r139\r[0 64 93 0]\r[222 118 34]\r#de7622\r麂棕\rjizong\r140\r[22 28 34 6]\r[193 178 163]\r#c1b2a3\r淡银灰\rdanyinhui\r141\r[18 57 76 6]\r[190 126 74]\r#be7e4a\r淡赭\rdanzhe\r142\r[14 69 100 4]\r[193 101 26]\r#c1651a\r槟榔综\rbinglangzong\r143\r[34 42 46 23]\r[145 128 114]\r#918072\r银灰\ryinhui\r144\r[42 40 46 20]\r[154 136 120]\r#9a8878\r海鸥灰\rhaiouhui\r145\r[27 69 85 22]\r[148 88 51]\r#945833\r淡咖啡\rdankafei\r146\r[26 76 97 20]\r[150 77 34]\r#964d22\r岩石棕\ryanshizong\r147\r[25 80 100 20]\r[149 68 22]\r#954416\r芒果棕\rmangguozong\r148\r[39 60 58 51]\r[98 73 65]\r#624941\r石板灰\rshibanhui\r149\r[38 63 63 50]\r[100 72 61]\r#64483d\r珠母灰\rzhumuhui\r150\r[32 83 96 41]\r[113 54 29]\r#71361d\r丁香棕\rdingxiangzong\r151\r[30 87 100 38]\r[117 49 23]\r#753117\r咖啡\rkafei\r152\r[30 89 100 39]\r[115 46 18]\r#732e12\r筍皮棕\rsunpizong\r153\r[0 72 86 0]\r[252 99 21]\r#fc6315\r燕颔红\ryanhanhong\r154\r[3 38 39 0]\r[232 180 154]\r#e8b49a\r玉粉红\ryufenhong\r155\r[0 70 87 0]\r[228 104 40]\r#e46828\r金驼\rjintuo\r156\r[0 76 97 0]\r[216 89 22]\r#d85916\r铁棕\rtiezong\r157\r[23 35 38 10]\r[183 160 145]\r#b7a091\r蛛网灰\rzhuwanghui\r158\r[16 77 100 6]\r[183 81 29]\r#b7511d\r淡可可棕\rdankekezong\r159\r[31 63 66 31]\r[139 97 77]\r#8b614d\r中红灰\rzhonghonghui\r160\r[28 76 82 26]\r[140 75 49]\r#8c4b31\r淡土黄\rdantuhuang\r161\r[28 83 92 28]\r[135 61 36]\r#873d24\r淡豆沙\rdandousha\r162\r[27 85 98 27]\r[136 58 30]\r#883a1e\r椰壳棕\ryekezong\r163\r[40 64 61 56]\r[91 66 58]\r#5b423a\r淡铁灰\rdantiehui\r164\r[37 72 72 52]\r[96 61 48]\r#603d30\r中灰驼\rzhonghuituo\r165\r[34 82 85 47]\r[103 52 36]\r#673424\r淡栗棕\rdanlizong\r166\r[33 89 92 48]\r[101 43 28]\r#652b1c\r可可棕\rkekezong\r167\r[32 90 95 45]\r[105 42 27]\r#692a1b\r柞叶棕\rzhayezong\r168\r[0 53 59 0]\r[251 153 104]\r#fb9968\r野蔷薇红\ryeqiangweihong\r169\r[0 65 79 0]\r[252 121 48]\r#fc7930\r菠萝红\rboluohong\r170\r[2 31 31 0]\r[237 195 174]\r#edc3ae\r藕荷\rouhe\r171\r[0 70 91 0]\r[225 103 35]\r#e16723\r陶瓷红\rtaocihong\r172\r[16 23 27 2]\r[212 196 183]\r#d4c4b7\r晓灰\rxiaohui\r173\r[9 64 78 1]\r[207 117 67]\r#cf7543\r余烬红\ryujinhong\r174\r[8 72 93 1]\r[205 98 39]\r#cd6227\r火砖红\rhuozhuanhong\r175\r[22 64 71 12]\r[170 106 76]\r#aa6a4c\r火泥棕\rhuonizong\r176\r[20 76 92 9]\r[166 82 44]\r#a6522c\r绀红\rganhong\r177\r[31 79 77 37]\r[119 61 49]\r#773d31\r橡树棕\rxiangshuzong\r178\r[45 68 57 66]\r[72 51 50]\r#483332\r海报灰\rhaibaohui\r179\r[41 76 64 65]\r[175 46 43]\r#4b2e2b\r玫瑰灰\rmeiguihui\r180\r[41 84 71 67]\r[72 37 34]\r#482522\r火山棕\rhuoshanzong\r181\r[40 92 78 66]\r[72 30 28]\r#481e1c\r豆沙\rdousha\r182\r[0 9 12 0]\r[251 238 226]\r#fbeee2\r淡米粉\rdanmifen\r183\r[0 19 19 0]\r[246 220 206]\r#f6dcce\r初桃粉红\rchutaofenhong\r184\r[0 27 27 0]\r[247 207 186]\r#f7cfba\r介壳淡粉红\rjieqiaodanfenhong\r185\r[0 43 43 0]\r[246 173 143]\r#f6ad8f\r淡藏花红\rdancanghuahong\r186\r[0 58 61 0]\r[246 140 96]\r#f68c60\r瓜瓤红\rguaranghong\r187\r[0 67 74 0]\r[249 114 61]\r#f9723d\r芙蓉红\rfuronghong\r188\r[0 74 85 0]\r[250 93 25]\r#fa5d19\r莓酱红\rmeijianghong\r189\r[0 62 66 0]\r[238 128 85]\r#ee8055\r法螺红\rfaluohong\r190\r[4 82 99 0]\r[207 72 19]\r#cf4813\r落霞红\rluoxiahong\r191\r[21 43 43 9]\r[184 148 133]\r#b89485\r淡玫瑰灰\rdanmeiguihui\r192\r[18 80 92 7]\r[177 75 40]\r#b14b28\r蟹蝥红\rxiemaohong\r193\r[27 91 95 28]\r[134 48 32]\r#863020\r火岩棕\rhuoyanzong\r194\r[27 96 100 27]\r[134 38 23]\r#862617\r赭石\rzheshi\r195\r[36 90 82 56]\r[89 38 32]\r#592620\r暗驼棕\rantuozong\r196\r[35 96 88 55]\r[90 31 27]\r#5a1f1b\r酱棕\rjiangzong\r197\r[34 98 91 53]\r[92 30 25]\r#5c1e19\r栗棕\rlizong\r198\r[0 31 24 0]\r[244 199 186]\r#f4c7ba\r洋水仙红\ryangshuixianhong\r199\r[0 67 55 0]\r[241 118 102]\r#f17666\r谷鞘红\rguqiaohong\r200\r[0 77 69 0]\r[241 86 66]\r#f15642\r苹果红\rpingguohong\r201\r[0 84 82 0]\r[245 57 28]\r#f5391c\r铁水红\rtieshuihong\r202\r[0 76 67 0]\r[242 90 71]\r#f25a47\r桂红\rguihong\r203\r[0 84 82 0]\r[243 59 31]\r#f33b1f\r极光红\rjiguanghong\r204\r[0 38 25 0]\r[242 185 178]\r#f2b9b2\r粉红\rfenhong\r205\r[0 53 36 0]\r[241 151 144]\r#f19790\r舌红\rshehong\r206\r[0 76 68 0]\r[240 90 70]\r#f05a46\r曲红\rquhong\r207\r[0 83 81 0]\r[242 62 35]\r#f23e23\r红汞红\rhonggonghong\r208\r[0 29 16 0]\r[242 202 201]\r#f2cac9\r淡绯\rdanfei\r209\r[0 43 24 0]\r[239 175 173]\r#efafad\r无花果红\rwuhuaguohong\r210\r[0 57 36 0]\r[241 144 140]\r#f1908c\r榴子红\rliuzihong\r211\r[0 83 81 0]\r[240 63 36]\r#f03f24\r胭脂红\ryanzhihong\r212\r[0 50 23 0]\r[240 161 168]\r#f0a1a8\r合欢红\rhehuanhong\r213\r[0 56 27 0]\r[241 147 156]\r#f1939c\r春梅红\rchunmeihong\r214\r[0 65 38 0]\r[240 124 130]\r#f07c82\r香叶红\rxiangyehong\r215\r[0 80 72 0]\r[240 74 58]\r#f04a3a\r珊瑚红\rshanhuhong\r216\r[0 84 82 0]\r[241 60 34]\r#f13c22\r萝卜红\rluobohong\r217\r[0 65 29 0]\r[231 124 142]\r#e77c8e\r淡茜红\rdanqianhong\r218\r[0 77 49 0]\r[237 90 101]\r#ed5a65\r艳红\ryanhong\r219\r[0 81 66 0]\r[237 72 69]\r#ed4845\r淡菽红\rdanshuhong\r220\r[0 84 76 0]\r[237 59 47]\r#ed3b2f\r鱼鳃红\ryusaihong\r221\r[0 86 82 0]\r[237 51 33]\r#ed3321\r樱桃红\ryingtaohong\r222\r[0 82 44 0]\r[238 72 102]\r#ee4866\r淡蕊香红\rdanruixianghong\r223\r[0 82 46 0]\r[238 72 99]\r#ee4863\r石竹红\rshizhuhong\r224\r[0 82 50 0]\r[239 71 93]\r#ef475d\r草茉莉红\rcaomolihong\r225\r[0 84 60 0]\r[238 63 77]\r#ee3f4d\r茶花红\rchahuahong\r226\r[0 86 74 0]\r[237 51 51]\r#ed3333\r枸枢红\rgoushuhong\r227\r[0 88 81 0]\r[236 43 36]\r#ec2b24\r秋海棠红\rqiuhaitanghong\r228\r[0 89 84 0]\r[235 38 26]\r#eb261a\r丽春红\rlichunhong\r229\r[0 90 90 0]\r[222 42 24]\r#de2a18\r夕阳红\rxiyanghong\r230\r[0 92 95 0]\r[212 37 23]\r#d42517\r鹤顶红\rhedinghong\r231\r[19 89 85 9]\r[171 55 47]\r#ab372f\r鹅血石红\rexueshihong\r232\r[17 98 100 8]\r[172 31 24]\r#ac1f18\r覆盆子红\rfupenzihong\r233\r[36 81 64 54]\r[93 49 49]\r#5d3131\r貂紫\rdiaozi\r234\r[35 94 77 53]\r[92 34 35]\r#5c2223\r暗玉紫\ranyuzi\r235\r[35 100 85 54]\r[90 25 27]\r#5a191b\r栗紫\rlizi\r236\r[35 100 80 54]\r[90 18 22]\r#5a1216\r葡萄酱紫\rputaojiangzi\r237\r[0 49 27 0]\r[238 162 164]\r#eea2a4\r牡丹粉红\rmudanfenhong\r238\r[0 78 44 0]\r[237 85 106]\r#ed556a\r山茶红\rshanchahong\r239\r[0 86 55 0]\r[240 55 82]\r#f03752\r海棠红\rhaitanghong\r240\r[13 83 62 3]\r[192 72 81]\r#c04851\r玉红\ryuhong\r241\r[11 93 77 2]\r[192 44 56]\r#c02c38\r高粱红\rgaolianghong\r242\r[22 76 54 12]\r[167 83 90]\r#a7535a\r满江红\rmanjianghong\r243\r[28 100 86 33]\r[124 24 35]\r#7c1823\r枣红\rzaohong\r244\r[39 92 67 64]\r[76 31 36]\r#4c1f24\r葡萄紫\rputaozi\r245\r[39 100 79 63]\r[77 16 24]\r#4d1018\r酱紫\rjiangzi\r246\r[0 89 62 0]\r[238 39 70]\r#ee2746\r淡曙红\rdanshuhong\r247\r[0 93 76 0]\r[222 28 49]\r#de1c31\r唐菖蒲红\rtangchangpuhong\r248\r[1 95 82 0]\r[209 26 45]\r#d11a2d\r鹅冠红\reguanhong\r249\r[13 76 50 2]\r[196 90 101]\r#c45a65\r莓红\rmeihong\r250\r[10 96 82 2]\r[194 31 48]\r#c21f30\r枫叶红\rfengyehong\r251\r[19 99 86 11]\r[166 27 41]\r#a61b29\r苋菜红\rxiancaihong\r252\r[29 73 51 28]\r[137 78 84]\r#894e54\r烟红\ryanhong\r253\r[27 98 79 30]\r[130 32 43]\r#82202b\r暗紫苑红\ranziyuanhong\r254\r[27 100 90 29]\r[130 17 31]\r#82111f\r殷红\ryanhong\r255\r[36 95 71 59]\r[84 30 36]\r#541e24\r猪肝紫\rzhuganzi\r256\r[38 100 81 61]\r[80 10 22]\r#500a16\r金鱼紫\rjinyuzi\r257\r[1 11 9 0]\r[248 235 230]\r#f8ebe6\r草珠红\rcaozhuhong\r258\r[0 68 21 0]\r[236 118 150]\r#ec7696\r淡绛红\rdanjianghong\r259\r[0 86 30 0]\r[239 52 115]\r#ef3473\r品红\rpinhong\r260\r[0 69 22 0]\r[234 114 147]\r#ea7293\r凤仙花红\rfengxianhuahong\r261\r[0 52 18 0]\r[236 155 173]\r#ec9bad\r粉团花红\rfentuanhuahong\r262\r[0 80 28 0]\r[235 80 126]\r#eb507e\r夹竹桃红\rjiazhutaohong\r263\r[0 88 36 0]\r[237 47 106]\r#ed2f6a\r榲桲红\rwenpohong\r264\r[0 39 14 0]\r[238 184 195]\r#eeb8c3\r姜红\rjianghong\r265\r[0 80 27 0]\r[234 81 127]\r#ea517f\r莲瓣红\rlianbanhong\r266\r[0 33 11 0]\r[241 196 205]\r#f1c4cd\r水红\rshuihong\r267\r[0 60 18 0]\r[236 138 164]\r#ec8aa4\r报春红\rbaochunhong\r268\r[8 78 35 1]\r[206 87 109]\r#ce5777\r月季红\ryuejihong\r269\r[0 52 15 0]\r[237 157 178]\r#ed9db2\r豇豆红\rjiangdouhong\r270\r[0 63 18 0]\r[239 130 160]\r#ef82a0\r霞光红\rxiaguanghong\r271\r[0 85 33 0]\r[235 60 112]\r#eb3c70\r松叶牡丹红\rsongyemudanhong\r272\r[0 88 40 0]\r[236 44 100]\r#ec2c64\r喜蛋红\rxidanhong\r273\r[5 38 20 0]\r[227 180 184]\r#e3b4b8\r鼠鼻红\rshubihong\r274\r[5 96 73 1]\r[204 22 58]\r#cc163a\r尖晶玉红\rjianjingyuhong\r275\r[16 61 34 4]\r[194 124 136]\r#c27c88\r山黎豆红\rshanlidouhong\r276\r[13 90 56 3]\r[191 53 83]\r#bf3553\r锦葵红\rjinkuihong\r277\r[41 64 44 36]\r[115 87 92]\r#73575c\r鼠背灰\rshubeihui\r278\r[33 100 75 49]\r[98 22 36]\r#621624\r甘蔗紫\rganzhezi\r279\r[32 100 84 49]\r[99 7 28]\r#63071c\r石竹紫\rshizhuzi\r280\r[57 72 54 74]\r[54 40 43]\r#36282b\r苍蝇灰\rcangyinghui\r281\r[52 88 58 81]\r[48 22 28]\r#30161c\r卵石紫\rluanshizi\r282\r[56 88 62 84]\r[43 18 22]\r#2b1216\r李紫\rlizi\r283\r[58 90 63 83]\r[45 12 19]\r#2d0c13\r茄皮紫\rqiepizi\r284\r[0 76 16 0]\r[206 94 138]\r#ce5e8a\r吊钟花红\rdiaozhonghuahong\r285\r[0 81 18 0]\r[236 78 138]\r#ec4e8a\r兔眼红\rtuyanhong\r286\r[0 87 24 0]\r[238 44 121]\r#ee2c79\r紫荆红\rzijinghong\r287\r[24 99 52 19]\r[149 28 72]\r#951c48\r菜头紫\rcaitouzi\r288\r[34 97 54 50]\r[98 29 52]\r#621d34\r鹞冠紫\ryaoguanzi\r289\r[33 100 58 60]\r[98 16 46]\r#62102e\r葡萄酒红\rputaojiuhong\r290\r[53 81 50 74]\r[56 33 41]\r#382129\r磨石紫\rmoshizi\r291\r[48 90 50 76]\r[56 25 36]\r#381924\r檀紫\rtanzi\r292\r[50 91 54 79]\r[51 20 30]\r#33141e\r火鹅紫\rhuoezi\r293\r[53 92 55 81]\r[49 15 27]\r#310f1b\r墨紫\rmozi\r294\r[0 48 15 0]\r[238 166 183]\r#eea6b7\r晶红\rjinghong\r295\r[0 82 16 0]\r[239 73 139]\r#ef498b\r扁豆花红\rbiandouhuahong\r296\r[2 66 22 0]\r[222 120 151]\r#de7897\r白芨红\rbaijihong\r297\r[0 85 24 0]\r[222 63 124]\r#de3f7c\r嫩菱红\rnenlinghong\r298\r[5 87 30 1]\r[209 60 116]\r#d13c74\r菠根红\rbogenhong\r299\r[15 68 28 2]\r[197 112 139]\r#c5708b\r酢酱草红\rcujiangcaohong\r300\r[22 83 34 11]\r[168 69 107]\r#a8456b\r洋葱紫\ryangcongzi\r301\r[40 92 47 64]\r[75 30 47]\r#4b1e2f\r海象紫\rhaixiangzi\r302\r[41 97 49 68]\r[70 22 41]\r#461629\r绀紫\rganzi\r303\r[42 99 51 69]\r[68 14 37]\r#440e25\r古铜紫\rgutongzi\r304\r[0 30 12 0]\r[240 201 207]\r#f0c9cf\r石蕊红\rshiruihong\r305\r[0 50 16 0]\r[235 160 179]\r#eba0b3\r芍药耕红\rshaoyaogenghong\r306\r[0 88 23 0]\r[236 45 122]\r#ec2d7a\r藏花红\rcanghuahong\r307\r[0 71 18 0]\r[225 108 150]\r#e16c96\r初荷红\rchuhehong\r308\r[6 13 7 0]\r[237 227 231]\r#ede3e7\r马鞭草紫\rmabiancaozi\r309\r[7 20 8 0]\r[233 215 223]\r#e9d7df\r丁香淡紫\rdingxiangdanzi\r310\r[7 79 18 0]\r[210 86 140]\r#d2568c\r丹紫红\rdanzihong\r311\r[4 89 21 0]\r[210 53 125]\r#d2357d\r玫瑰红\rmeiguihong\r312\r[19 27 9 0]\r[209 194 211]\r#d1c2d3\r淡牵牛紫\rdanqianniuzi\r313\r[21 37 12 0]\r[200 173 196]\r#c8adc4\r凤信紫\rfengxinzi\r314\r[23 53 14 1]\r[192 142 175]\r#c08eaf\r萝兰紫\rluolanzi\r315\r[18 91 18 2]\r[186 47 123]\r#ba2f7b\r玫瑰紫\rmeiguizi\r316\r[58 56 17 2]\r[128 118 163]\r#8076a3\r藤萝紫\rtengluozi\r317\r[57 62 16 2]\r[128 109 158]\r#806d9e\r槿紫\rjinzi\r318\r[56 72 15 1]\r[129 92 148]\r#815c94\r蕈紫\rxunzi\r319\r[54 89 12 1]\r[129 60 133]\r#813c85\r桔梗紫\rjiegengzi\r320\r[52 100 17 7]\r[126 22 113]\r#7e1671\r魏紫\rweizi\r321\r[3 26 10 0]\r[233 204 211]\r#e9ccd3\r芝兰紫\rzhilanzi\r322\r[10 67 12 0]\r[210 118 163]\r#d276a3\r菱锰红\rlingmenghong\r323\r[11 97 10 0]\r[204 85 149]\r#cc5595\r龙须红\rlongxuhong\r324\r[8 22 12 0]\r[230 210 213]\r#e6d2d5\r蓟粉红\rjifenhong\r325\r[16 79 14 1]\r[195 86 145]\r#c35691\r电气石红\rdianqishihong\r326\r[19 68 18 1]\r[192 111 152]\r#c06f98\r樱草紫\ryingcaozi\r327\r[25 31 26 5]\r[189 174 173]\r#bdaead\r芦穗灰\rlusuihui\r328\r[26 43 26 6]\r[181 152 161]\r#b598a1\r隐红灰\ryinhonghui\r329\r[27 97 27 14]\r[155 30 100]\r#9b1e64\r苋菜紫\rxiancaizi\r330\r[39 53 38 25]\r[133 109 114]\r#856d72\r芦灰\rluhui\r331\r[49 71 49 58]\r[79 56 62]\r#4f383e\r暮云灰\rmuyunhui\r332\r[49 82 46 63]\r[72 41 54]\r#482936\r斑鸠灰\rbanjiuhui\r333\r[4 11 9 0]\r[242 231 229]\r#f2e7e5\r淡藤萝紫\rdantengluozi\r334\r[10 27 11 0]\r[224 200 209]\r#e0c8d1\r淡青紫\rdanqingzi\r335\r[24 58 15 1]\r[188 132 168]\r#bc84a8\r青蛤壳紫\rqinghakezi\r336\r[31 71 15 1]\r[173 101 152]\r#ad6598\r豆蔻紫\rdoukouzi\r337\r[35 75 18 2]\r[163 92 143]\r#a35c8f\r扁豆紫\rbiandouzi\r338\r[39 91 15 3]\r[152 54 128]\r#983680\r芥花紫\rjiehuazi\r339\r[43 97 19 8]\r[139 38 113]\r#8b2671\r青莲\rqinglian\r340\r[44 85 24 10]\r[137 66 118]\r#894276\r芓紫\rzizi\r341\r[45 99 24 16]\r[126 32 101]\r#7e2065\r葛巾紫\rgejinzi\r342\r[49 100 29 32]\r[104 23 82]\r#681752\r牵牛紫\rqianniuzi\r343\r[53 75 41 41]\r[93 63 81]\r#5d3f51\r紫灰\rzihui\r344\r[55 87 41 52]\r[78 42 64]\r#4e2a40\r龙睛鱼紫\rlongjingyuzi\r345\r[58 96 40 61]\r[65 28 53]\r#411c35\r荸荠紫\rbiqizi\r346\r[63 74 52 70]\r[54 41 47]\r#36292f\r古鼎灰\rgudinghui\r347\r[81 87 54 84]\r[30 19 29]\r#1e131d\r乌梅紫\rwumeizi\r348\r[83 87 55 86]\r[28 13 26]\r#1c0d1a\r深牵牛紫\rshenqianniuzi\r349\r[7 5 7 0]\r[241 240 237]\r#f1f0ed\r银白\ryinbai\r350\r[13 10 9 0]\r[226 225 228]\r#e2e1e4\r芡食白\rqianshibai\r351\r[23 18 12 1]\r[204 204 214]\r#ccccd6\r远山紫\ryuanshanzi\r352\r[39 31 17 2]\r[167 168 189]\r#a7a8bd\r淡蓝紫\rdanlanzi\r353\r[74 64 14 1]\r[97 100 159]\r#61649f\r山梗紫\rshangengzi\r354\r[63 53 22 5]\r[116 117 155]\r#74759b\r螺甸紫\rluodianzi\r355\r[21 17 19 1]\r[207 204 201]\r#cfccc9\r玛瑙灰\rmanaohui\r356\r[80 73 21 6]\r[82 82 136]\r#525288\r野菊紫\ryejuzi\r357\r[100 93 21 5]\r[46 49 124]\r#2e317c\r满天星紫\rmantianxingzi\r358\r[48 45 40 26]\r[122 115 116]\r#7a7374\r锌灰\rxinhui\r359\r[91 84 40 43]\r[48 47 75]\r#302f4b\r野葡萄紫\ryeputaozi\r360\r[70 69 49 56]\r[62 56 65]\r#3e3841\r剑锋紫\rjianfengzi\r361\r[79 74 49 60]\r[50 47 59]\r#322f3b\r龙葵紫\rlongkuizi\r362\r[90 84 50 69]\r[34 32 46]\r#22202e\r暗龙胆紫\ranlongdanzi\r363\r[98 93 48 73]\r[31 32 64]\r#1f2040\r晶石紫\rjingshizi\r364\r[100 94 52 77]\r[19 17 36]\r#131124\r暗蓝紫\ranlanzi\r365\r[95 46 10 1]\r[39 117 182]\r#2775b6\r景泰蓝\rjingtailan\r366\r[96 47 11 1]\r[36 116 181]\r#2474b5\r尼罗蓝\rniluolan\r367\r[25 6 10 0]\r[208 223 230]\r#d0dfe6\r远天蓝\ryuantianlan\r368\r[53 19 15 1]\r[147 181 207]\r#93b5cf\r星蓝\rxinglan\r369\r[74 27 16 2]\r[97 154 195]\r#619ac3\r羽扇豆蓝\ryushandoulan\r370\r[95 45 10 1]\r[35 118 183]\r#2376b7\r花青\rhuaqing\r371\r[78 27 17 2]\r[86 152 195]\r#5698c3\r睛蓝\rjinglan\r372\r[99 44 10 1]\r[33 119 184]\r#2177b8\r虹蓝\rhonglan\r373\r[43 4 16 0]\r[176 213 223]\r#b0d5df\r湖水蓝\rhushuilan\r374\r[59 12 19 0]\r[138 188 209]\r#8abcd1\r秋波蓝\rqiubolan\r375\r[73 17 20 1]\r[102 169 201]\r#66a9c9\r涧石蓝\rjianshilan\r376\r[93 36 15 2]\r[41 131 187]\r#2983bb\r潮蓝\rchaolan\r377\r[99 48 11 1]\r[23 114 180]\r#1772b4\r群青\rqunqing\r378\r[74 2 24 0]\r[99 187 208]\r#63bbd0\r霁青\rjiqing\r379\r[77 7 24 0]\r[92 179 204]\r#5cb3cc\r碧青\rbiqing\r380\r[94 32 17 3]\r[36 134 185]\r#2486b9\r宝石蓝\rbaoshilan\r381\r[98 43 14 2]\r[22 119 179]\r#1677b3\r天蓝\rtianlan\r382\r[100 52 11 1]\r[18 107 174]\r#126bae\r柏林蓝\rbolinlan\r383\r[92 10 25 1]\r[34 162 195]\r#22a2c3\r海青\rhaiqing\r384\r[94 16 23 3]\r[26 148 188]\r#1a94bc\r钴蓝\rgulan\r385\r[95 25 20 4]\r[21 139 184]\r#158bb8\r鸢尾蓝\ryuanweilan\r386\r[98 42 16 3]\r[17 119 176]\r#1177b0\r牵牛花蓝\rqianniuhualan\r387\r[100 65 11 1]\r[15 89 164]\r#0f59a4\r飞燕草蓝\rfeiyancaolan\r388\r[95 47 14 2]\r[43 115 175]\r#2b73af\r品蓝\rpinlan\r389\r[24 14 16 1]\r[205 209 211]\r#cdd1d3\r银鱼白\ryinyubai\r390\r[93 49 17 3]\r[49 112 167]\r#3170a7\r安安蓝\rananlan\r391\r[64 52 39 28]\r[94 97 109]\r#5e616d\r鱼尾灰\ryuweihui\r392\r[78 60 40 31]\r[71 81 100]\r#475164\r鲸鱼灰\rjingyuhui\r393\r[69 64 52 59]\r[255 254 250]\r#fffefa\r海参灰\rhaishenhui\r394\r[76 70 51 60]\r[53 51 60]\r#35333c\r沙鱼灰\rshayuhui\r395\r[100 89 54 79]\r[15 20 35]\r#0f1423\r钢蓝\rganglan\r396\r[35 13 13 0]\r[186 204 217]\r#baccd9\r云水蓝\ryunshuilan\r397\r[55 20 18 1]\r[143 178 201]\r#8fb2c9\r晴山蓝\rqingshanlan\r398\r[100 60 8 1]\r[22 97 171]\r#1661ab\r靛青\rdianqing\r399\r[29 16 17 1]\r[196 203 207]\r#c4cbcf\r大理石灰\rdalishihui\r400\r[100 67 16 3]\r[21 85 154]\r#15559a\r海涛蓝\rhaitaolan\r401\r[81 41 24 8]\r[78 124 161]\r#4e7ca1\r蝶翅蓝\rdiechilan\r402\r[93 50 21 6]\r[52 108 156]\r#346c9c\r海军蓝\rhaijunlan\r403\r[77 68 54 66]\r[47 47 53]\r#2f2f35\r水牛灰\rshuiniuhui\r404\r[80 70 53 65]\r[45 46 54]\r#2d2e36\r牛角灰\rniujiaohui\r405\r[100 86 54 78]\r[19 24 36]\r#131824\r燕颔蓝\ryanhanlan\r406\r[21 6 10 0]\r[216 227 231]\r#d8e3e7\r云峰白\ryunfengbai\r407\r[32 8 13 0]\r[195 215 223]\r#c3d7df\r井天蓝\rjingtianlan\r408\r[91 24 22 4]\r[47 144 185]\r#2f90b9\r云山蓝\ryunshanlan\r409\r[96 34 18 4]\r[23 129 181]\r#1781b5\r釉蓝\ryoulan\r410\r[28 12 17 0]\r[199 210 212]\r#c7d2d4\r鸥蓝\roulan\r411\r[100 53 21 6]\r[17 101 154]\r#11659a\r搪磁蓝\rtangcilan\r412\r[29 18 21 2]\r[192 196 195]\r#c0c4c3\r月影白\ryueyingbai\r413\r[36 20 23 2]\r[178 187 190]\r#b2bbbe\r星灰\rxinghui\r414\r[70 38 36 18]\r[94 121 135]\r#5e7987\r淡蓝灰\rdanlanhui\r415\r[100 68 32 20]\r[20 74 116]\r#144a74\r鷃蓝\ryanlan\r416\r[55 40 40 23]\r[116 120 122]\r#74787a\r嫩灰\rnenhui\r417\r[77 50 41 31]\r[73 92 105]\r#495c69\r战舰灰\rzhanjianhui\r418\r[67 57 49 49]\r[71 72 76]\r#47484c\r瓦罐灰\rwaguanhui\r419\r[87 69 51 58]\r[43 51 62]\r#2b333e\r青灰\rqinghui\r420\r[100 77 50 62]\r[28 41 56]\r#1c2938\r鸽蓝\rgelan\r421\r[100 82 51 64]\r[20 35 52]\r#142334\r钢青\rgangqing\r422\r[100 84 51 68]\r[16 31 48]\r#101f30\r暗蓝\ranlan\r423\r[11 0 8 0]\r[238 247 242]\r#eef7f2\r月白\ryuebai\r424\r[33 0 14 0]\r[198 230 232]\r#c6e6e8\r海天蓝\rhaitianlan\r425\r[57 0 22 0]\r[147 213 220]\r#93d5dc\r清水蓝\rqingshuilan\r426\r[79 0 27 0]\r[81 196 211]\r#51c4d3\r瀑布蓝\rpubulan\r427\r[89 0 29 0]\r[41 183 203]\r#29b7cb\r蔚蓝\rweilan\r428\r[92 0 28 0]\r[14 176 201]\r#0eb0c9\r孔雀蓝\rkongquelan\r429\r[93 0 31 0]\r[16 174 194]\r#10aec2\r甸子蓝\rdianzilan\r430\r[78 36 0 0]\r[87 195 194]\r#57c3c2\r石绿\rshilv\r431\r[40 0 30 0]\r[185 222 201]\r#b9dec9\r竹篁绿\rzhuhuanglv\r432\r[64 0 46 0]\r[131 203 172]\r#83cbac\r粉绿\rfenlv\r433\r[95 0 52 0]\r[18 170 156]\r#12aa9c\r美蝶绿\rmeidielv\r434\r[75 0 61 0]\r[102 193 140]\r#66c18c\r毛绿\rmaolv\r435\r[78 0 62 0]\r[93 190 138]\r#5dbe8a\r蔻梢绿\rkoushaolv\r436\r[81 0 62 0]\r[85 187 138]\r#55bb8a\r麦苗绿\rmaimiaolv\r437\r[86 0 63 0]\r[69 183 135]\r#45b787\r蛙绿\rwalv\r438\r[92 0 64 0]\r[43 174 133]\r#2bae85\r铜绿\rtonglv\r439\r[96 0 64 0]\r[27 167 132]\r#1ba784\r竹绿\rzhulv\r440\r[98 2 64 0]\r[18 161 130]\r#12a182\r蓝绿\rlanlv\r441\r[32 7 18 0]\r[196 215 214]\r#c4d7d6\r穹灰\rqionghui\r442\r[94 11 33 1]\r[30 158 179]\r#1e9eb3\r翠蓝\rcuilan\r443\r[96 16 31 3]\r[15 149 176]\r#0f95b0\r胆矾蓝\rdanfanlan\r444\r[96 18 34 4]\r[20 145 168]\r#1491a8\r樫鸟蓝\rjianniaolan\r445\r[64 18 32 2]\r[124 171 177]\r#7cabb1\r闪蓝\rshanlan\r446\r[40 24 32 6]\r[164 172 167]\r#a4aca7\r冰山蓝\rbingshanlan\r447\r[56 26 36 7]\r[134 157 157]\r#869d9d\r虾壳青\rxiakeqing\r448\r[71 28 39 10]\r[100 142 147]\r#648e93\r晚波蓝\rwanbolan\r449\r[89 27 41 13]\r[59 129 140]\r#3b818c\r蜻蜓蓝\rqingtinglan\r450\r[99 33 38 21]\r[18 110 130]\r#126e82\r玉鈫蓝\ryuqinlan\r451\r[57 37 42 21]\r[115 124 123]\r#737c7b\r垩灰\rehui\r452\r[65 40 44 26]\r[97 113 114]\r#617172\r夏云灰\rxiayunhui\r453\r[100 52 46 43]\r[19 72 87]\r#134857\r苍蓝\rcanglan\r454\r[67 53 51 50]\r[71 75 76]\r#474b4c\r黄昏灰\rhuanghunhui\r455\r[94 58 54 60]\r[33 55 61]\r#21373d\r灰蓝\rhuilan\r456\r[100 64 56 68]\r[19 44 51]\r#132c33\r深灰蓝\rshenhuilan\r457\r[49 5 37 0]\r[164 202 182]\r#a4cab6\r玉簪绿\ryuzanlv\r458\r[96 12 66 2]\r[44 150 120]\r#2c9678\r青矾绿\rqingfanlv\r459\r[52 11 37 0]\r[154 190 175]\r#9abeaf\r草原远绿\rcaoyuanyuanlv\r460\r[74 14 51 1]\r[105 167 148]\r#69a794\r梧枝绿\rwuzhilv\r461\r[55 16 40 1]\r[146 179 165]\r#92b3a5\r浪花绿\rlanghualv\r462\r[99 23 70 10]\r[36 128 103]\r#248067\r海王绿\rhaiwanglv\r463\r[88 24 61 9]\r[66 134 117]\r#428675\r亚丁绿\ryadinglv\r464\r[40 27 36 8]\r[159 163 154]\r#9fa39a\r镍灰\rniehui\r465\r[52 28 42 10]\r[138 152 142]\r#8a988e\r明灰\rminghui\r466\r[63 31 50 14]\r[112 136 125]\r#70887d\r淡绿灰\rdanlvhui\r467\r[82 32 60 20]\r[73 117 104]\r#497568\r飞泉绿\rfeiquanlv\r468\r[62 43 52 34]\r[93 101 95]\r#5d655f\r狼烟灰\rlangyanhui\r469\r[85 44 64 52]\r[49 74 67]\r#314a43\r绿灰\rlvhui\r470\r[93 46 70 61]\r[34 62 54]\r#223e36\r苍绿\rcanglv\r471\r[98 46 73 63]\r[26 59 50]\r#1a3b32\r深海绿\rshenhailv\r472\r[67 60 57 68]\r[54 52 51]\r#363433\r长石灰\rchangshihui\r473\r[82 60 65 80]\r[31 38 35]\r#1f2623\r苷蓝绿\rganlanlv\r474\r[90 62 67 86]\r[20 30 27]\r#141e1b\r莽丛绿\rmangconglv\r475\r[33 1 29 0]\r[198 223 200]\r#c6dfc8\r淡翠绿\rdancuilv\r476\r[53 1 44 0]\r[158 204 171]\r#9eccab\r明绿\rminglv\r477\r[75 0 59 0]\r[104 184 142]\r#68b88e\r田园绿\rtianyuanlv\r478\r[98 0 82 0]\r[32 161 98]\r#20a162\r翠绿\rcuilv\r479\r[78 6 62 0]\r[97 172 133]\r#61ac85\r淡绿\rdanlv\r480\r[90 7 73 0]\r[64 160 112]\r#40a070\r葱绿\rconglv\r481\r[99 10 91 2]\r[34 148 83]\r#229453\r孔雀绿\rkongquelv\r482\r[27 11 27 1]\r[202 211 195]\r#cad3c3\r艾绿\railv\r483\r[92 14 76 2]\r[60 149 102]\r#3c9566\r蟾绿\rchanlv\r484\r[100 17 92 5]\r[32 137 77]\r#20894d\r宫殿绿\rgongdianlv\r485\r[61 19 52 3]\r[131 167 141]\r#83a78d\r松霜绿\rsongshuanglv\r486\r[81 19 67 4]\r[87 149 114]\r#579572\r蛋白石绿\rdanbaishilv\r487\r[100 22 90 10]\r[32 127 76]\r#207f4c\r薄荷绿\rbohelv\r488\r[66 29 58 12]\r[110 139 116]\r#6e8b74\r瓦松绿\rwasonglv\r489\r[100 31 91 25]\r[26 104 64]\r#1a6840\r荷叶绿\rheyelv\r490\r[62 42 56 34]\r[94 102 91]\r#5e665b\r田螺绿\rtianluolv\r491\r[74 42 65 40]\r[72 91 77]\r#485b4d\r白屈菜绿\rbaiqucailv\r492\r[64 57 60 67]\r[57 55 51]\r#393733\r河豚灰\rhetunhui\r493\r[68 56 60 66]\r[55 56 52]\r#373834\r蒽油绿\renyoulv\r494\r[76 56 75 72]\r[43 49 44]\r#2b312c\r槲寄生绿\rhujishenglv\r495\r[91 60 76 83]\r[21 35 27]\r#15231b\r云杉绿\ryunshanlv\r496\r[9 1 14 0]\r[240 245 229]\r#f0f5e5\r嫩菊绿\rnenjulv\r497\r[20 1 23 0]\r[223 236 213]\r#dfecd5\r艾背绿\raibeilv\r498\r[47 0 49 0]\r[173 213 162]\r#add5a2\r嘉陵水绿\rjialingshuilv\r499\r[89 0 96 0]\r[65 179 73]\r#41b349\r玉髓绿\ryusuilv\r500\r[88 0 99 0]\r[67 178 68]\r#43b244\r鲜绿\rxianlv\r501\r[90 0 100 0]\r[65 174 60]\r#41ae3c\r宝石绿\rbaoshilv\r502\r[18 4 33 0]\r[226 231 191]\r#e2e7bf\r海沬绿\rhaimeilv\r503\r[28 4 44 0]\r[208 222 170]\r#d0deaa\r姚黄\ryaohuang\r504\r[44 3 61 0]\r[178 207 135]\r#b2cf87\r橄榄石绿\rganlanshilv\r505\r[62 0 76 0]\r[140 194 105]\r#8cc269\r水绿\rshuilv\r506\r[42 3 67 0]\r[183 208 122]\r#b7d07a\r芦苇绿\rluweilv\r507\r[28 6 66 0]\r[210 217 122]\r#d2d97a\r槐花黄绿\rhuaihuahuanglv\r508\r[41 4 76 0]\r[186 207 101]\r#bacf65\r苹果绿\rpingguolv\r509\r[58 1 88 0]\r[150 194 78]\r#96c24e\r芽绿\ryalv\r510\r[19 9 84 1]\r[226 216 73]\r#e2d849\r蝶黄\rdiehuang\r511\r[38 8 94 1]\r[190 201 54]\r#bec936\r橄榄黄绿\rganlanhuanglv\r512\r[81 0 100 0]\r[91 174 35]\r#5bae23\r鹦鹉绿\ryingwulv\r513\r[84 64 94 45]\r[37 61 36]\r#253d24\r油绿\ryoulv\r514\r[0 1 4 0]\r[255 254 248]\r#fffef8\r象牙白\rxiangyabai\r515\r[3 5 8 0]\r[248 244 237]\r#f8f4ed\r汉白玉\rhanbaiyu\r516\r[0 1 3 0]\r[255 254 249]\r#fffef9\r雪白\rxuebai\r517\r[4 4 8 0]\r[247 244 237]\r#f7f4ed\r鱼肚白\ryudubai\r518\r[12 12 16 0]\r[228 223 215]\r#e4dfd7\r珍珠灰\rzhenzhuhui\r519\r[16 15 20 1]\r[218 212 203]\r#dad4cb\r浅灰\rqianhui\r520\r[28 5 30 5]\r[187 181 172]\r#bbb5ac\r铅灰\rqianhui\r521\r[28 25 30 5]\r[187 181 172]\r#bbb5ac\r中灰\rzhonghui\r522\r[42 40 43 23]\r[134 126 118]\r#867e76\r瓦灰\rwahui\r523\r[43 40 44 42]\r[132 124 116]\r#847c74\r夜灰\ryehui\r524\r[42 42 45 27]\r[128 118 110]\r#80766e\r雁灰\ryanhui\r525\r[42 42 46 27]\r[129 119 110]\r#81776e\r深灰\rshenhui\rmyData.json\rrow\rdate\revents\r0\r2024-12-31\r[牙齿问题,有牙结石,要去医院 早睡早起📌 减肥 准备跳槽,好好复习: 计网(待补)，数据结构(待补), 英语学习(待补)]\r1\r2024-03-05\r2\r[]\r[22 7]\r2\r2024-02-06\r2\r[]\r[23 7]\r3\r2024-02-05\r2\r[]\r[23 7]\r4\r2024-02-04\r2\r[两只猫绝育 搬家]\r[23 7]\r5\r2024-02-03\r2\r[]\r[2 7]\r6\r2024-02-02\r2\r[]\r[23 7]\r7\r2024-02-01\r2\r[]\r1\r[23 7]\r8\r2024-01-31\r2\r[]\r[23 7]\r9\r2024-01-30\r2\r[]\r[23 7]\r10\r2024-01-29\r1\r[坪洲 1350 华南公寓的房子]\r1\r[6 8]\r11\r2024-01-28\r[看好的房子，房东不准养猫，放弃 宝安中心逛商场]\r[1 7]\r12\r2024-01-27\r[]\r[23 7]\r13\r2024-01-26\r2\r[]\r1\r[23 3]\r14\r2024-01-25\r2\r[]\r[23 7]\r15\r2024-01-24\r1\r[]\r[23 7]\r16\r2024-01-23\r2\r[计网，子网掩码]\r[23 7]\r17\r2024-01-22\r2\r[]\r[23 7]\r18\r2024-01-21\r[计网,IP地址分类 礼物挑选]\r[23 7]\r19\r2024-01-21\r[]\r[23 7]\r20\r2024-01-20\r[大梅沙之行]\r[23 7]\r21\r2024-01-19\r2\r[]\r[0 7]\r22\r2024-01-18\r2\r[]\r[23 7]\r23\r2024-01-17\r2\r[长沙公积金提取]\r[22 7]\r24\r2024-01-16\r2\r[计网层次复习]\r[22 7]\r25\r2024-01-15\r2\r[]\r[23 8]\r26\r2024-01-14\r[]\r1\r[23 8]\r27\r2024-01-13\r2\r[]\r[4 11]\r28\r2024-01-12\r2\r[]\r1\r[23 8]\r29\r2024-01-11\r2\r[计网,ARP协议]\r[23 8]\r30\r2024-01-10\r2\r[]\r1\r[3 8]\r31\r2024-01-09\r2\r[]\r[23 8]\r32\r2香菇青菜包\u0026#43;2烧麦;冬瓜\u0026#43;排骨\r2024-01-07\r2\r[]\r[23 8]\r33\r2香菇青菜包\u0026#43;2烧麦;冬瓜\u0026#43;排骨\r2024-01-08\r2\r[优化图片显示]\r1\r[3 8]\r34\r上海青炒肉;猪脚饭\r2024-01-07\r[]\r1\r[23 8]\r35\r2鱼香肉丝包\u0026#43;2梅干菜肉包\u0026#43;2烧麦\u0026#43;2肉包\u0026#43;1豆浆;玉米猪肉饺子\r2024-01-06\r[]\r[3 8]\r36\r2024-01-05\r2\r[]\r[4 8]\r37\r2024-01-04\r2\r[修改function.js, 时间更新函数bug修复]\r[0 8]\r38\r2024-01-03\r2\r[]\r[23 8]\r39\r2024-01-02\r2\r[]\r[4 8]\r40\r2024-01-01\r[]\r1\r[4 8]\r41\r2023-12-31\r[医院看痔疮,混合痔]\r[3 8]\r42\r2023-12-30\r[妙三多第三针]\r[23 7]\r43\r2023-12-29\r2\r[计网(待补)，数据结构(待补) 我的书单功能(待补)]\r[3 8]\r44\r2023-12-28\r1\r[myData.csv 转成 myData.json 删除]\r[23 8]\r45\r2023-12-27\r1\r[厕所又堵了... 增加plantUML功能 ]\r1\r[3 8]\r46\r2023-12-26\r1\r[优化页面布局 元旦公司发了一张jd E卡(100元)]\r1\r[23 7]\r47\r2023-12-25\r[瞎忙了一天...]\r1\r[0 7]\r48\r2023-12-24\r[0 7]\r49\r2023-12-23\r[23 7]\r50\r2023-12-22\r[计网(待补)，数据结构(待补) github 热力图]\r2\r[3 7]\r51\r2023-12-21\r[计网(待补)，数据结构 键位清单修改]\r2\r[23 7]\r52\r2023-12-20\r[计网，数据结构(补充) 188购买了ltao.top域名]\r2\r[23 8]\r53\r2023-12-19\r[计网，数据结构(这天熬夜，没有去做) 首页修改卡片化布局 ltao.cc域名要到期了，考虑购买ltao.top(阿里云)]\r2\r[3 8]\r54\r2023-12-18\r1\r[计网，数据结构 同步键位修改 严重迟到.下次注意]\r2\r[0 9]\r55\r2023-12-17\r[我是谁，没有真正的安全]\r[0 9]\r56\r2023-12-16\r[铁雨 铁雨2]\r[0 9]\r57\r2023-12-15\r1\r2\r[3 9]\r58\r2023-12-14\r2\r[1 8]\r59\r2023-12-13\r2\r[2 8]\r60\r2023-12-12\r[申请社保卡(支付宝)]\r2\r[0 8]\r61\r2023-12-11\r[颜色板 引用结构优化]\r2\r[0 8]\r62\r2023-12-10\r1\r[0 8]\r63\r2023-12-09\r[0 8]\r64\r2023-12-08\r2\r[办理社保卡 关于我的(创建) 首页美化(添加创建文档)]\r[23 7]\r65\r燕麦粥\t2023-12-07\r2\r[复查出牙龈炎 滚动条美化、Data展示、颜色美化]\r[23 8]\r66\r八宝粥\r2023-12-06\r2\r[日历美化 markDown格式美化]\r[2 8]\r67\r燕麦粥\r2023-12-05\r2\r[timeline美化、日历美化]\r1\r[23 7]\r68\r2023-12-04\r[食谱参考 timeline美化]\r[1 7]\r69\r2023-12-03\r1\r[重置电脑]\r[3 10]\r70\r2023-12-02\r[妙三多第第二针]\r[4 10]\r71\r2023-12-01\r1\r[2 7]\r72\r2023-11-30\r[美年大健康体检(补牙720下周四固定，右侧有一颗肾结石，多喝水少坐)]\r2\r[0 7]\r73\r2023-11-29\r1\r[TCP 内容补充 插入排序]\r1\r[4 8]\r74\r2023-11-28\r[计网1小时(TCP三次握手和三次挥手) 数据结构1小时(顺序\\二分\\分块)]\r[23 7]\r75\r快餐\r2023-11-27\r2\r[更新python 方法参考 更新hugo 方法参考]\r[12 7]\r76\r快餐\r2023-11-26\r[0 7]\r77\r快餐\r2023-11-25\r[打了篮球1小时]\r1\r[1 7]\r78\r粥\r2023-11-24\r1\r[优化代码]\r1\r[2 7]\r79\r快餐\r2023-11-23\r2\r[从快倒闭的时光相册里下载照片 再次更新changeKey.ahk]\r[2 7]\r80\r快餐\r2023-11-22\r1\r[时间树外观调整 进一步优化数据处理及其结构]\r[1 7]\r81\r快餐\r2023-11-21\r[导入myData数据]\r[1 7]\r82\r粥\r2023-11-20\r1\r[创建时间树]\r[23 8]\r83\r快餐\r2023-11-19\r[23 7]\r84\r快餐\r2023-11-18\r[1 7]\r85\r快餐\r2023-11-17\r1\r[写完了findAllJson.py]\r[1 7]\r86\r快餐\r2023-11-16\r2\r[1 7]\r87\r快餐\r2023-11-15\r2\r[看udp和tcp 视频 下载阿里云盘的电影]\r[0 7]\r88\r外卖\r2023-11-14\r1\r[1 9]\r89\r五香干\u0026#43;猪肉\r2023-11-13\r2\r[半小时午休]\r[23 7]\r90\r2023-11-12\r[4个小时午休]\r[23 7]\r91\r2023-11-11\r[2个小时投篮]\r92\r五香干\u0026#43;猪肉\u0026#43;煎蛋\r2023-11-10\r1\r[购入两个两盘盒和硬盘]\r1\r[3 7]\r93\r2023-11-09\r3\r[json 汇总并转为csv]\r[23 7]\r94\r2023-11-08\r2\r[新增myData.csv HttpCanary抓包微信支付和美团共享单车]\r1\r[0 7]\r95\r2023-11-07\r3\r96\r18:33\r2023-10-16\r[23 7]\r97\r2023-10-15\r[统一颜色 color-light code 代码块更改: 文本折行 \\ 高亮 \\ 字体和大小 把 neo 5 SE 解开 bl 获取 root 了 差点成砖.]\r98\r2023-10-14\r[把 小米9 刷成 miui13了]\r99\r2023-10-13\r[买了个 apple music 的家庭会员 效果还不错 但是有一些歌没有]\r100\r2023-10-12\r[新增第三行内容(原第三行成第四行) 确定所有文章的字数之和 写完了第一行内容: 时间段确定 判断早中晚\\上下班确定 判断离上下班有多久时间 \\ 离本周与本月有多久]\r101\r2023-10-11\r[运动打球一次 确定首页展示内容，包括 万物皆有定数 和 首页美景]\r102\r2023-10-10\r[找到如何修改首页的方法了，明天再改过去。 时间格式化完成， 模仿 微博 格式 (秒级别的还没改)]\r103\r2023-10-09\r[带饭的玻璃碗在微波炉里裂开了 退了 8.5 _index.md(首页) 补充一些语录 日志的文件 _index.md(首页) → 日志.md(列表下) 新增稿 技术记录 并将每个问题记录文件改为添加到该文件中的 3 级标题下]\r104\r2023-10-08\r105\r2023-10-07\r106\r2023-10-06\r107\r2023-10-05\r108\r2023-10-04\r[增加文章数量统计]\r109\r2023-10-03\r110\r2023-10-02\r[买了一个99元一年的碎屏险]\r111\r2023-10-01\r112\r2023-09-30\r[退掉 neo5，买 neo 5 SE（花了2100）]\r113\r2023-09-29\r[安装插件接入chatGPT 增加字数统计 countWords(同 word 字数)]\r114\r2023-09-28\r115\r2023-09-27\r[花 2800 买了一个realme gt neo5 16g 1T ]\r116\r2023-09-26\r[把obsidian 项目搭建到 GitHub，并修改网站颜色和字体，完成更新时间自动修复。 开始记日记 失眠]\r117\r2023-09-25\r[开始部署搭建 obsidian环境]\r118\r18:17\r2023-09-21\r119\r18:34\r2023-05-29\r120\r2023-05-28\r121\r2023-05-27\r122\r2023-05-26\r123\r18:36\r2023-05-25\r124\r2023-05-24\r125\r2023-05-23\r126\r19:04\r2023-05-22\r127\r18:34\r2023-05-19\r128\r18:55\r2023-05-18\r129\r18:36\r2023-05-17\r130\r18:18\r2023-05-16\r131\r18:23\r2023-05-15\r132\r18:49\r2023-04-28\r133\r18:24\r2023-04-27\r134\r18:35\r2023-04-26\r135\r19:45\r2023-04-18\rmyMuiscs.json\rrow\ralbumName\rartistName\rdurationInMillis\rname\rreleaseDate\rid\r0\r我的名字\r焦迈奇\r251518\r我的名字\r2018-04-27\ri.1YBN9Ezu7Pg857A\r1\r我爱他 - Single\r王小帅\r255759\r我爱他\r2019-12-25\ri.1YBN9g4I7Pg857A\r2\r汪苏泷歌曲合辑, Vol. 2\r汪苏泷\r205659\r不分手的恋爱\r2010-07-01\ri.1YBNb1AF7Pg857A\r3\r今夜二十岁\r杨坤 \u0026amp; 郭采洁\r231731\r答案\r2014-09-02\ri.1YBNbGOh7Pg857A\r4\r另一个童话 - Single\r邓紫棋\r229338\r倒数\r2018-08-30\ri.1YBNbMPt7Pg857A\r5\r飞轮海 (首张同名专辑)\r飛輪海 \u0026amp; 田馥甄\r239000\r只对你有感觉\r2006-01-01\ri.1YBNbxQS7Pg857A\r6\r爱是无畏的冒险 - Single\r程今\r177372\r爱是无畏的冒险\r2022-11-04\ri.6xpN921fYA4W0YE\r7\r林忆莲\u0026#39;s\r林忆莲\r274800\r至少还有你\r2000-01-01\ri.6xpN9BrSYA4W0YE\r8\r零零柒\r潘玮柏\r250187\r亲爱的 (feat. 詹惠雯, 林妍希, 廖育佑)\r2009-05-22\ri.6xpN9E2tYA4W0YE\r9\r一匹\r青鸟飞鱼\r267813\r此生不换\r2009-03-16\ri.6xpN9ENFYA4W0YE\r10\r你从未离去 - Single\r林怡婕\r228566\r你从未离去\r2022-02-10\ri.6xpNLG7tYA4W0YE\r11\r阿嶽正传\r张震岳\r239373\r爱的初体验\r1997-09-25\ri.6xpNLGQFYA4W0YE\r12\r新的心跳\r邓紫棋\r206057\r再见\r2015-10-30\ri.6xpNLMBHYA4W0YE\r13\r我是歌手第四季 (第三期 Live)\r苏运莹\r297094\r野子 (Live)\r2016-01-29\ri.6xpNLVNfYA4W0YE\r14\r滚石三十青春音乐记事簿: 纸条传情\r林依晨\r266000\r孤单北半球\r2004-07-13\ri.6xpNLW7HYA4W0YE\r15\rLive for Today\r陈奕迅\r207852\r岁月如歌\r2003-07-22\ri.6xpNLYrTYA4W0YE\r16\r绿色 - Single\r陈雪凝\r269591\r绿色\r2019-02-14\ri.AWPN9LBHNa2QzN0\r17\r别再为他流泪\r梁静茹\r267427\r没有如果\r2009-01-16\ri.AWPN9P6SNa2QzN0\r18\rI\u0026#39;m O.K.\r陶喆\r295667\r小镇姑娘\r1999-08-24\ri.AWPN9eBiNa2QzN0\r19\r银河与星斗 - Single\ryihuik苡慧\r194815\r银河与星斗\r2021-05-30\ri.AWPN9lvuNa2QzN0\r20\r见习爱神 (国)\rTwins\r211182\r莫斯科没有眼泪\r2005-04-20\ri.AWPNG2dTNa2QzN0\r21\r高手\r潘玮柏 \u0026amp; 弦子\r281413\r不得不爱\r2005-01-01\ri.AWPNG4vHNa2QzN0\r22\r慢热 - Single\r满舒克\r190000\r慢热\r2021-03-06\ri.AWPNG88uNa2QzN0\r23\r玫瑰凭证\r告五人\r258788\r给你一瓶魔法药水\r2022-06-30\ri.AWPNGgeFNa2QzN0\r24\rThe Best of G.E.M. 2008-2012 (Deluxe Version)\r邓紫棋\r250480\r我的秘密\r2010-10-22\ri.AWPNGm5cNa2QzN0\r25\r南征北战精选\r南征北战\r209267\r哈尼宝贝\r2014-12-03\ri.LVk691pHZBOKqZM\r26\r陪着我走 in search of lost time\r林忆莲\r252453\r分分钟需要你\r2016-04-06\ri.LVk69RKfZBOKqZM\r27\r破天荒\r张芸京\r212800\r偏爱\r2009-05-08\ri.LVk69d8fZBOKqZM\r28\r自娱自乐 - Single\r金志文\r225254\r自娱自乐\r2021-08-19\ri.LVk69dYHZBOKqZM\r29\r我的名字 - Single\r焦迈奇\r253323\r我的名字\r2018-04-27\ri.LVk6r3pUZBOKqZM\r30\r中国好声音 第二期\r丁丁\r134971\r爱要坦荡荡 (中国好声音)\r2012-07-20\ri.LVk6r58TZBOKqZM\r31\r千嬅盛放\r杨千嬅\r220667\r野孩子\r2001-01-01\ri.LVk6r5GHZBOKqZM\r32\r看我72变\r蔡依林\r294600\r布拉格广场\r2003-03-07\ri.LVk6rMYUZBOKqZM\r33\r须尽欢 - Single\r郑浩\r277500\r须尽欢\r2021-10-19\ri.LVk6rOgTZBOKqZM\r34\rFighting! 生存之道\rTank Lu\r246173\r三国恋\r2006-01-01\ri.LVk6rPGSZBOKqZM\r35\r喜欢你 - Single\r邓紫棋\r239010\r喜欢你\r2014-08-15\ri.LVk6raWTZBOKqZM\r36\r男女情歌对唱冠军全记录\r卢巧音\r181400\r好心分手 (feat. 王力宏)\r2002-10-29\ri.LVk6rlzUZBOKqZM\r37\r雨爱\r杨丞琳\r261478\r雨爱\r2009-12-21\ri.O1RG30As8l1aW8Y\r38\r一生有你 - EP\r水木年华\r258133\r一生有你\r2001-01-01\ri.O1RG36mu8l1aW8Y\r39\r春娇与志明 - Single\r街道办GDC \u0026amp; 欧阳耀莹\r205079\r春娇与志明\r2017-06-25\ri.O1RG3BWS8l1aW8Y\r40\r海龟先生\r海龟先生\r306907\r男孩别哭\r2012-12-01\ri.O1RG3KAt8l1aW8Y\r41\rOK\r张震岳\r255693\r思念是一种病 (feat. 蔡健雅)\r2007-06-25\ri.O1RG3LrC8l1aW8Y\r42\r3 - EP\r水木年华\r215333\r在他乡\r2002-01-01\ri.O1RG3Oxh8l1aW8Y\r43\r滚石香港黄金十年 - 张震嶽精选\r张震岳\r284790\r爱我别走\r1998-12-01\ri.O1RG3vLH8l1aW8Y\r44\r在你身边\r张学友\r257973\r烦恼歌\r2007-01-01\ri.O1RGeRqI8l1aW8Y\r45\rI\u0026#39;m O.K.\r陶喆\r304707\r找自己\r1999-08-24\ri.O1RGemgu8l1aW8Y\r46\rShall We Dance? Shall We Talk!\r陈奕迅\r211251\r单车\r2001-04-13\ri.O1RGerGH8l1aW8Y\r47\r放个大招给你看 (OPPO Reno 宣传曲) - Single\rRyan.B\r178720\r放个大招给你看 (OPPO Reno 宣传曲)\r2019-06-26\ri.PkdZ65mcP5ZmOPa\r48\r放空 - Single\r大籽 \u0026amp; Lil E\r150626\r放空\r2021-04-30\ri.PkdZ6XAfP5ZmOPa\r49\r大海\r张雨生\r280027\r大海\r1992-11-28\ri.PkdZ6dDIP5ZmOPa\r50\r人人弹起 新曲\u0026#43;精选\rTwins\r208133\r下一站天后\r2003-04-29\ri.PkdZ7GatP5ZmOPa\r51\r带我去找夜生活 - Single\r告五人\r299705\r带我去找夜生活\r2019-12-25\ri.PkdZ7KXfP5ZmOPa\r52\r形容 - Single\r沈以诚\r269571\r形容\r2021-02-18\ri.PkdZ7VZtP5ZmOPa\r53\r为爱走天涯\r任贤齐\r269736\r死不了\r2000-01-27\ri.QvzkKAmf73Q8z7g\r54\rHello 1 - EP\r金志文\r241952\r远走高飞\r2017-04-28\ri.QvzkKXYU73Q8z7g\r55\r署前街少年\r赵雷\r329892\r我记得\r2022-08-29\ri.QvzkKXpS73Q8z7g\r56\r像极了 - Single\rRyan.B\r194453\r像极了\r2019-11-15\ri.QvzkKa7U73Q8z7g\r57\r我的歌声里\r李代沫\r260000\r我是不是你最疼爱的人\r2012-12-28\ri.QvzkW07f73Q8z7g\r58\r中国好声音: 第四期\r金志文\r142314\r为爱痴狂 (中国好声音)\r2012-08-03\ri.QvzkW0et73Q8z7g\r59\r南征北战精选\r南征北战\r234109\r我的天空\r2014-12-03\ri.QvzkW5Yt73Q8z7g\r60\rLove Moments 爱的时刻 自选辑\r萧敬腾\r264733\r新不了情\r2009-04-26\ri.QvzkW9PF73Q8z7g\r61\r新的心跳\r邓紫棋\r216882\r多远都要在一起\r2015-02-19\ri.QvzkW9xt73Q8z7g\r62\r改变自己\r王力宏\r246320\r我们的歌\r2007-01-01\ri.QvzkWGxT73Q8z7g\r63\r蓝光 新歌 (精选辑)\r胡歌\r272088\r忘记时间\r2009-03-16\ri.QvzkWJAU73Q8z7g\r64\r跨时代\r周杰伦\r254787\r爱的飞行日记 (feat. 杨瑞代)\r2010-05-18\ri.QvzkWJkT73Q8z7g\r65\r再爱一遍·天后\r陈势安\r289400\r天后\r2011-11-11\ri.QvzkWQeT73Q8z7g\r66\rOK\r张震岳\r210760\r再见\r2007-06-25\ri.V7BvQ04i4eRGk4q\r67\r光年之外 (电影《太空旅客》主题曲) - Single\r邓紫棋\r235505\r光年之外 (电影《太空旅客》主题曲)\r2016-12-30\ri.V7BvQ1et4eRGk4q\r68\r路过人间\r郁可唯\r247133\r路过人间 (电视剧《我们与恶的距离》插曲)\r2019-03-28\ri.V7BvQDRS4eRGk4q\r69\r把回忆拼好给你 - EP\r苏星婕\r180601\r把回忆拼好给你\r2022-07-19\ri.V7BvQJJt4eRGk4q\r70\r我肯定在几百年前就说过爱你\r告五人\r349774\r披星戴月的想你\r2018-10-30\ri.V7BvQZzi4eRGk4q\r71\r慢慢懂\r汪苏泷\r196885\r小星星\r2010-06-01\ri.V7BvQdvH4eRGk4q\r72\r国语真经典: 王菲\r王菲\r260480\r但愿人长久\r1995-07-01\ri.V7BvQqXI4eRGk4q\r73\r每当我 - Single\r刘诗人\r143021\r每当我\r2020-11-20\ri.V7Bvx6RU4eRGk4q\r74\r劲歌热舞\r马赛克乐队\r271040\r霓虹甜心\r2018-11-11\ri.V7BvxBLs4eRGk4q\r75\r渺小\r田馥甄\r231554\r不醉不会\r2013-11-29\ri.V7BvxrrS4eRGk4q\r76\r世界\r逃跑计划\r255507\r一万次悲伤\r2012-01-01\ri.ZOMrKB1SvL8qXvO\r77\r猎户星座\r朴树\r301000\r平凡之路\r2017-04-30\ri.ZOMrKN3svL8qXvO\r78\r一比一\r范玮琪\r228520\r如果的事 (feat. 张韶涵)\r2005-01-01\ri.ZOMrKWLFvL8qXvO\r79\r隐形超人\r郭采洁\r196453\r我的未来式\r2007-05-11\ri.ZOMrKdJivL8qXvO\r80\r一路生花 - Single\r温奕心\r256250\r一路生花\r2021-01-19\ri.ZOMrv7acvL8qXvO\r81\r爱不老-罗震环2020 - EP\r罗震环\r230296\r靠近 (电视剧《爱情公寓3》片尾曲)\r2020-01-13\ri.ZOMrvD3CvL8qXvO\r82\rHello 1 - EP\r金志文\r235967\r远走高飞 (合唱版) [feat. 徐佳莹]\r2017-04-28\ri.ZOMrvzGHvL8qXvO\r83\r心要野\r后海大鲨鱼\r279133\r心要野\r2015-03-18\ri.gelJ4ZoFRoZGPR0\r84\r失控 - Single\r井迪\r255000\r失控\r2020-11-20\ri.gelJ4lJhRoZGPR0\r85\r风驶过的声音是 (说唱版) - Single\r海洋Bo, FRIEME \u0026amp; Zy\r147264\r风驶过的声音是 (说唱版)\r2023-04-27\ri.gelJr19fRoZGPR0\r86\r魔杰座\r周杰伦\r223453\r稻香\r2008-10-14\ri.gelJr8dURoZGPR0\r87\r我相信\r张靓颖\r281700\r如果这就是爱情\r2009-03-12\ri.gelJrB9sRoZGPR0\r88\r今天 2002-2008生活作品集\r许巍\r270524\r蓝莲花\r2002-12-18\ri.gelJrP0SRoZGPR0\r89\r不是因为寂寞才想你 - Single\r王小帅\r196000\r不是因为寂寞才想你\r2019-09-15\ri.gelJradHRoZGPR0\r90\r还是分开 - Single\r张叶蕾\r226741\r还是分开\r2017-03-06\ri.gelJrm5hRoZGPR0\r91\r为你写诗\r吴克群\r285693\r为你写诗\r2008-03-14\ri.qQdGNVGIN2KDMNW\r92\r运气来得若有似无\r告五人\r270761\r唯一 (三立/台视戏剧《恋爱是科学》插曲)\r2020-12-31\ri.qQdGNW4FN2KDMNW\r93\r再也没有 - Single\rRyan.B \u0026amp; AY杨佬叁\r212541\r再也没有\r2018-04-17\ri.qQdGNZGFN2KDMNW\r94\r每一刻都是崭新的\r许巍\r261504\r曾经的你\r2004-01-01\ri.qQdGNpmuN2KDMNW\r95\r范特西\r周杰伦\r270987\r简单爱\r2001-09-14\ri.qQdGNqeuN2KDMNW\r96\r就忘了吧 (DJ版) - Single\r刘大拿\r225145\r就忘了吧 (DJ版)\r2022-06-01\ri.qQdGk2lfN2KDMNW\r97\r向云端 - Single\r小霞 \u0026amp; 海洋Bo\r251613\r向云端\r2023-05-30\ri.qQdGkBEsN2KDMNW\r98\rUntil We Meet Again\r陈奕迅\r198800\r数字人生\r2004-06-15\ri.qQdGkE0hN2KDMNW\r99\r在你的身边\r盛哲\r262310\r在你的身边\r2017-01-01\ri.qQdGkK0sN2KDMNW\r"},{"id":36,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/","title":"数学知识","section":"理论知识","content":"\r等比数列公式\r进制转换\r十进制转二进制\r十进制数转换为二进制数时，由于整数和小数的转换方法不同，所以先将十进制数的整数部分和小数部分分别转换后，再加以合并。\n十进制整数转换为二进制整数采用\u0026quot;除2取余，逆序排列\u0026quot;法。具体做法是：用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为0时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。\n二进制转十进制\r要从右到左用二进制的每个数去乘以2的相应次方，或者把二进制数首先写成加权系数展开式，然后按十进制加法规则求和。这种做法称为\u0026quot;按权相加\u0026quot;法。\n二进制数1000110转成十进制数可以看作这样：\n数字中共有三个1 即第一位一个，第二位一个，第六位一个，然后对应十进制数即2的1次方+2的2次方+2的6次方， 即1000110=64+0+0+0+4+2+0=70\n"},{"id":37,"href":"/notes/%E6%9D%82%E6%80%9D/%E9%9A%8F%E8%AE%B0/","title":"随记笔记","section":"杂思","content":"7\n"},{"id":38,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/","title":"网站收藏","section":"技术","content":"\r学习网站\r全历史 https://www.allhistory.com 今日热榜 https://rebang.today 计网 http://home.ustc.edu.cn/~chaf/course/network.html https://www.runoob.com/w3cnote/summary-of-network.html https://www.cainiaoplus.com/ 软件工具\r画图工具 https://handraw.top Chatgpt https://chat.openai.com 科学上网 追云加速 https://www.zhuiyun.shop 一元机场 https://yfh4rrze3snwnnwj.xn--4gq62f52gdss.vip/ 机场推荐 http://www.maomeng.cf kaggle https://www.kaggle.com SMS-activate https://sms-activate.org 内网穿透 https://www.natfrp.com/ autoHotKey https://wyagd001.github.io/v2/docs/ applemusic 推荐 订阅 Apple Music 该选哪个区？——中美坡港台日六大地区全对比（第二版） - 向远公园 | Step Park 建站参考\rhugo https://hugo.aiaide.com/post\n另一个hugo文档 https://gohugobrasil.netlify.app\nLyricify https://github.com/WXRIW/Lyricify-App\n颜色墙 http://zhongguose.com/#shangengzi\n博客部署\nnameSilo https://www.namesilo.com 阿里云 https://cn.aliyun.com Vercel https://vercel.com jsDelivr * vercel https://cloud.tencent.com/developer/article/1875306 元素生成\ndigraph https://zhuanlan.zhihu.com/p/21993254 fullcalendar https://fullcalendar.io/docs Lunar https://6tail.cn/calendar/api.html graphviz https://graphviz.org plantuml https://plantuml.com/zh/ 参考博客\n干志雄 https://ganzhixiong.com 雷雷屋头 https://ll.sc.cn hugo参考 https://www.andbible.com/tags/hugo/ "},{"id":39,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/","title":"维基百科","section":"技术","content":"维基百科（Wikipedia）提供了一套API，允许开发者通过HTTP请求来获取和检索维基百科的内容。以下是一些关于维基百科API的基本信息：\n维基百科 API 基本信息\rEndpoint（终端点）： https://en.wikipedia.org/w/api.php （英语维基百科的API终端点，你可以替换 en 为其他语言标识符）\n请求方式： 主要使用HTTP GET请求，但也支持POST请求。\n返回格式： 默认返回JSON格式，也可以选择其他格式，如XML。\n常用维基百科 API 请求参数\raction（动作）： 定义API的行为，常见值包括 query（查询）、parse（解析）、opensearch（开放搜索）等。 format（格式）： 指定返回结果的格式，常见值包括 json 和 xml。 titles（标题）： 指定要查询的页面标题，可以是单个标题或多个标题。 pageid（页面ID）： 指定要查询的页面的ID，与标题二选一使用。 prop（属性）： 查询页面的属性，如 revisions（修订版本）、categories（分类）等。 rvprop（修订版本属性）： 用于指定 revisions 属性的具体内容，如 content（内容）、timestamp（时间戳）等。 redirects（重定向）： 控制是否将重定向页面包含在结果中。 limit（限制）： 用于限制查询结果的数量。 示例：获取页面内容\rhttps://en.wikipedia.org/w/api.php?action=query\u0026amp;format=json\u0026amp;titles=Python_(programming_language)\u0026amp;prop=revisions\u0026amp;rvprop=content 这个例子用于获取“Python编程语言”页面的内容。你可以通过修改参数来执行不同的操作和查询其他页面。\n请注意：使用维基百科API时，你可能需要遵循维基百科的使用政策和服务条款。详细的API文档和更多信息可以在维基百科开发者页面找到。\n"},{"id":40,"href":"/notes/%E6%9D%82%E6%80%9D/%E4%B8%BA%E4%BB%80%E4%B9%88/","title":"为什么","section":"杂思","content":"功利和兴趣，应做到平衡 戒掉不如替代，让人不想走某条路，只需将路弄烂 分清主要矛盾和次要矛盾\n人为什么会懒\r害怕失败 缺乏勇气 精神疲惫，注意力被分散， 身体疲惫 人为什么闲不下来\r潜意识没有安全感 空着或者睡觉觉得浪费时间，运动或者学习工作觉得太累，只好刷短视频看小说 "},{"id":41,"href":"/notes/%E6%9D%82%E6%80%9D/%E6%96%87%E6%91%98/","title":"文摘","section":"杂思","content":"\r滕王阁序 唐 王勃\r豫章故郡，洪都新府。星分翼轸，地接衡庐。 襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟。 人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。 台隍枕夷夏之交，宾主尽东南之美。 都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。 十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗. 紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。 时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。 临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。 鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。\n披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。 闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。 云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。 渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。 遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。 睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。 四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷； 兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。 地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人； 萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？ 嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。 屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？ 所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。 酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。 孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠； 有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。 他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ 呜呼！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯； 登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔； 滕王高阁临江渚，佩玉鸣鸾罢歌舞。 画栋朝飞南浦云，珠帘暮卷西山雨。 闲云潭影日悠悠，物换星移几度秋。 阁中帝子今何在？槛外长江空自流。\n过秦论 汉 贾谊\r秦孝公据崤函之固，拥雍州之地，君臣固守以窥周室，有席卷天下，包举宇内，囊括四海之意，并吞八荒之心。 当是时也，商君佐之，内立法度，务耕织，修守战之具，外连衡而斗诸侯。于是秦人拱手而取西河之外。 孝公既没，惠文、武、昭襄蒙故业，因遗策，南取汉中，西举巴、蜀，东割膏腴之地，北收要害之郡。 诸侯恐惧，会盟而谋弱秦，不爱珍器重宝肥饶之地，以致天下之士，合从缔交，相与为一。 当此之时，齐有孟尝，赵有平原，楚有春申，魏有信陵。 此四君者，皆明智而忠信，宽厚而爱人，尊贤而重士，约从离衡，兼韩、魏、燕、楚、齐、赵、宋、卫、中山之众。 于是六国之士，有宁越、徐尚、苏秦、杜赫之属为之谋，齐明、周最、陈轸、召滑、楼缓、翟景、苏厉、乐毅之徒通其意，吴起、孙膑、带佗、倪良、王廖、田忌、廉颇、赵奢之伦制其兵。 尝以十倍之地，百万之众，叩关而攻秦。 秦人开关延敌，九国之师，逡巡而不敢进。秦无亡矢遗镞之费，而天下诸侯已困矣。于是从散约败，争割地而赂秦。 秦有余力而制其弊，追亡逐北，伏尸百万，流血漂橹；因利乘便，宰割天下，分裂山河。强国请服，弱国入朝。 延及孝文王、庄襄王，享国之日浅，国家无事。 及至始皇，奋六世之余烈，振长策而御宇内，吞二周而亡诸侯，履至尊而制六合，执敲扑而鞭笞天下，威振四海。 南取百越之地，以为桂林、象郡；百越之君，俯首系颈，委命下吏。乃使蒙恬北筑长城而守藩篱，却匈奴七百余里； 胡人不敢南下而牧马，士不敢弯弓而报怨。于是废先王之道，焚百家之言，以愚黔首；隳名城，杀豪杰； 收天下之兵，聚之咸阳，销锋镝，铸以为金人十二，以弱天下之民。 然后践华为城，因河为池，据亿丈之城，临不测之渊，以为固。 良将劲弩守要害之处，信臣精卒陈利兵而谁何。 天下已定，始皇之心，自以为关中之固，金城千里，子孙帝王万世之业也。 秦王既没，余威震于殊俗。然陈涉瓮牖绳枢之子，氓隶之人，而迁徙之徒也； 才能不及中人，非有仲尼，墨翟之贤，陶朱、猗顿之富； 蹑足行伍之间，而倔起阡陌之中，率疲弊之卒，将数百之众，转而攻秦； 斩木为兵，揭竿为旗，天下云集响应，赢粮而景从。 山东豪俊遂并起而亡秦族矣。且夫天下非小弱也，雍州之地，崤函之固，自若也。 陈涉之位，非尊于齐、楚、燕、赵、韩、魏、宋、卫、中山之君也； 锄懮棘矜，非铦于钩戟长铩也；谪戍之众，非抗于九国之师也；深谋远虑，行军用兵之道，非及向时之士也。 然而成败异变，功业相反，何也？试使山东之国与陈涉度长絜大，比权量力，则不可同年而语矣。 然秦以区区之地，致万乘之势，序八州而朝同列，百有余年矣；然后以六合之家，崤函为宫； 一夫作难而七庙隳，身死人手，为天下笑者，何也？仁义不施而攻守之势异也。\n"},{"id":42,"href":"/notes/%E6%9D%82%E6%80%9D/%E6%88%91%E7%9A%84%E5%9B%BE%E5%BA%93/","title":"我的图库","section":"杂思","content":"\rGG Bond\rhttps://pic3.zhimg.com/80/v2-01e239fd23d617079b80967dedb9c80a_720w.webp /images/Pasted%20image%2020240401104526.png https://pic1.zhimg.com/80/v2-9d834eaffaceef8293b200bb30cf2220_720w.webp https://pic2.zhimg.com/v2-f82902567e57fe2b589547a4ee1543c9_b.webp https://pic2.zhimg.com/80/v2-c9d6a070d9245f00c502404043b46a11_720w.webp https://pic3.zhimg.com/80/v2-6f159b30efff0990f2a3285488720c5a_720w.webp https://pic2.zhimg.com/80/v2-5b59e0d97165316eeac3adf6806d558d_720w.webp https://pic3.zhimg.com/80/v2-4cc9c9947c632e3bc8820ed9485763a6_720w.webp https://pic2.zhimg.com/80/v2-1bc233e9f5ada71e902a66f69332422d_720w.webp https://pic1.zhimg.com/v2-fe829dfd94d8685de2d7ef6c31865720_b.webp https://pic2.zhimg.com/80/v2-63fc8f635ac519c40a8391752772c80d_720w.webp https://pic4.zhimg.com/80/v2-a7a56cddb44bc76e74dec2c6b4647dcf_720w.webp https://pic2.zhimg.com/v2-7afb67a8aa2442af3b932b0b803070d5_b.webp https://wx2.sinaimg.cn/mw690/b64da6adly1hle98iabtdj20zu0y0gu2.jpg https://wx1.sinaimg.cn/mw690/b64da6adly1hle98l23hbj20zu0wmn5s.jpg https://wx4.sinaimg.cn/mw690/b64da6adly1hle98lw9rhj20zu0wqai7.jpg https://wx1.sinaimg.cn/mw690/b64da6adly1hle98gktyyj20zu0ws467.jpg https://wx3.sinaimg.cn/mw690/b64da6adly1hle98h1kjvj20zu0z947o.jpg https://wx1.sinaimg.cn/mw690/b64da6adly1hle98hi8l3j20zu0wltgr.jpg 蜡笔小新\rhttps://wx4.sinaimg.cn/mw690/0074P3wTgy1h8psi5nzjjj31kw1kwjvy.jpg https://wx2.sinaimg.cn/mw690/0074P3wTgy1h8psi5d1l5j31kw1kwjvb.jpg https://wx4.sinaimg.cn/mw690/0074P3wTgy1h8psi5321cj31kw1kwwin.jpg https://wx2.sinaimg.cn/mw690/0074P3wTgy1h8psi4tmi7j31kw1kwn19.jpg https://wx2.sinaimg.cn/mw690/0074P3wTgy1h8psi4ghuuj31kw1kwtd8.jpg https://wx3.sinaimg.cn/mw690/0074P3wTgy1h8psi2p570j31kw1kwwk0.jpg https://wx1.sinaimg.cn/mw690/0074P3wTgy1h8psi3bkjpj31kw1kw7a6.jpg https://wx4.sinaimg.cn/mw690/0074P3wTgy1h8psi44b22j31kw1kwdkl.jpg https://wx4.sinaimg.cn/mw690/0074P3wTgy1h8psi2zhcfj31kw1kwtcg.jpg "},{"id":43,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E4%BA%94%E7%AC%94%E8%BE%93%E5%85%A5%E6%B3%95/","title":"五笔输入法","section":"理论知识","content":" 笔画 笔画是指汉字书写时不间断的一次连续写成的一个线条 字根 笔画交叉复合而成的固定结构,是构成汉字的最基本单位 不符规律的键位 横 G[五] F[二] D[古] S[木丁西] A[工] 竖 "},{"id":44,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E5%8A%9B%E6%89%A3/%E7%B3%BB%E7%BB%9F%E6%94%BB%E7%95%A5/","title":"系统攻略","section":"力扣","content":"这是一份由力扣官方整理的推荐刷题路径，适合 考虑系统性地按各知识点刷题 的扣友。\n你可以这样使用本刷题攻略：\n按照本讨论帖推荐的顺序逐一刷题，适合第一次系统性刷题的朋友； 按照索引找到对应的知识点，选择自己较为薄弱的算法知识针对性刷题； 除了按照本帖推荐的刷题路径进行刷题以外，你还可以一同参与这个题单的创建与维护，你可以：\n提供 更合理的刷题顺序； 提供 知识点下更合理的题目分类； 提供 题目分类对应的典型题； 分享 和算法有关的精彩的文章、题解或讨论帖； 贡献 自己对这个知识点的精彩总结； 更新日志\n日期 内容 贡献者 2023 - 03 - 03 【数组篇 - 统计数组中的元素】删除 274. H 指数，这题是「二分查找」，已经不是单纯考数组的问题了。【链表篇 - 链表中的双指针技巧】增加 142. 环形链表 II liweiwei1419 2023 - 03 - 07 【图篇】修正了深度优先搜索和广度优先搜索英文使用错误。 Mrclick 2023 - 03 - 07 【树与二叉树篇】调整了【题目分类】的颗粒度和排序 力扣 (LeetCode) 2023 - 03 - 10 【滑动窗口专题】、【二分查找专题】、【双指针专题】、【前缀和专题】、【位运算专题】完成更新。 力扣 (LeetCode) 索引\n数组篇 链表篇 哈希表篇 栈与队列篇 字符串篇 数与位篇 递归篇 分治篇 贪心篇 排序算法篇 字符串算法篇 树与二叉树篇 动态规划篇 图篇 滑动窗口专题 二分查找专题 双指针专题 前缀和专题 位运算专题 数组篇\r题目分类 题目编号 数组的改变、移动 453. 最小移动次数使数组元素相等 // 665. 非递减数列 // 283. 移动零 数组的旋转 189. 旋转数组 // 396. 旋转函数 统计数组中的元素 645. 错误的集合 // 697. 数组的度 // 448. 找到所有数组中消失的数字 // 442. 数组中重复的数据 // 41. 缺失的第一个正数 数组的遍历 485. 最大连续1的个数 // 495. 提莫攻击 // 414. 第三大的数 // 628. 三个数的最大乘积 二维数组及滚动数组 118. 杨辉三角 // 119. 杨辉三角 II // 661. 图片平滑器 // 598. 范围求和 II // 419. 甲板上的战舰 特定顺序遍历二维数组 54. 螺旋矩阵 // 59. 螺旋矩阵 II // 498. 对角线遍历 二维数组变换 566. 重塑矩阵 // 48. 旋转图像 // 73. 矩阵置零 // 289. 生命游戏 前缀和数组 303. 区域和检索 - 数组不可变 // 304. 二维区域和检索 - 矩阵不可变 // 238. 除自身以外数组的乘积 推荐阅读 (欢迎投稿)\n没有人一起从零开始刷力扣(一)——数组篇 by noone_\n《数组和字符串》 by 力扣 (LeetBook)\n链表篇\r题目分类 题目编号 移除与插入链表元素 707. 设计链表 // 203. 移除链表元素 // 237. 删除链表中的节点 // 19. 删除链表的倒数第 N 个结点 // 83. 删除排序链表中的重复元素 // 82. 删除排序链表中的重复元素 II 链表的遍历 430. 扁平化多级双向链表 // 114. 二叉树展开为链表 链表的旋转与反转 61. 旋转链表 // 24. 两两交换链表中的节点 // 206. 反转链表 // 92. 反转链表 II // 25. K 个一组翻转链表 链表高精度加法 2. 两数相加 // 445. 两数相加 II // 面试题 02.05. 链表求和 链表的合并 21. 合并两个有序链表 // 23. 合并K个升序链表 链表中的双指针技巧 86. 分隔链表 // 19. 删除链表的倒数第 N 个结点 // 141. 环形链表 // 142. 环形链表 II // 876. 链表的中间结点 // 143. 重排链表 // 160. 相交链表 推荐阅读 (欢迎投稿)\n力扣刷题总结之链表 by return up;\n一文搞定常见的链表问题 by 自在飞花\n【反转链表】：双指针，递归，妖魔化的双指针 by 路漫漫我不畏\n《链表精讲》 by 力扣 (LeetBook)\n哈希表篇\r题目分类 题目编号 哈希表的查找、插入及删除 706. 设计哈希映射 // 217. 存在重复元素 // 349. 两个数组的交集 // 128. 最长连续序列 //290. 单词规律 // 532. 数组中的 k-diff 数对 // 205. 同构字符串 // 138. 复制带随机指针的链表 哈希表与索引 1. 两数之和 // 599. 两个列表的最小索引总和 // 219. 存在重复元素 II 哈希表与统计 594. 最长和谐子序列 // 350. 两个数组的交集 II // 554. 砖墙 // 609. 在系统中查找重复文件 // 454. 四数相加 II 哈希表与前缀和 560. 和为 K 的子数组 // 523. 连续的子数组和 // 525. 连续数组 推荐阅读 (欢迎投稿)\n哈希表刷题笔记 by 程序厨\n一文助你把哈希表整的明明白白 by AC 自动机\n哈希表图文学 by 力扣 (LeetBook)\n栈与队列篇\r题目分类 题目编号 栈的实现 232. 用栈实现队列 // 225. 用队列实现栈// 面试题 03.01. 三合一 // 1441. 用栈操作构建数组 单调栈 496. 下一个更大元素 I // 84. 柱状图中最大的矩形// 9. 每日温度 // 901. 股票价格跨度 // 42. 接雨水 最小/大栈 面试题 03.02. 栈的最小值 // 剑指 Offer 30. 包含min函数的栈 // 155. 最小栈 // 716. 最大栈 字符串去重问题 316.去除重复字母 // 1209. 删除字符串中的所有相邻重复项 II // 1081.不同字符的最小子序列 栈与括号匹配 20. 有效的括号 // 636. 函数的独占时间 // 591. 标签验证器 // 32. 最长有效括号 表达式求值 150. 逆波兰表达式求值//224. 基本计算器 //227. 基本计算器 II // 772. 基本计算器 III // 770. 基本计算器 IV 用栈访问最后若干元素 682. 棒球比赛 // 71. 简化路径 // 388. 文件的最长绝对路径 递归 385. 迷你语法分析器 // 341. 扁平化嵌套列表迭代器 // 394. 字符串解码 滑动窗口最大值问题 239. 滑动窗口最大值 求前 K 个高频元素 347. 前K个高频元素 // 692. 前K个高频单词 推荐阅读 (欢迎投稿)\n分享｜2021秋招算法总结12-栈篇 by 鲂\n【柱状图中最大的矩形】单调栈入门，使用单调栈快速寻找边界 by Ikaruga\nC++ 利用哨兵👨‍✈️，维护一个单调栈📈(图解，直观掌握) by 文慕阳\n《队列与栈精讲》 by 力扣 (LeetBook)\n字符串篇\r题目分类 题目编号 字符 520. 检测大写字母 回文串的定义 125. 验证回文串 公共前缀 14. 最长公共前缀 单词 434. 字符串中的单词数 // 58. 最后一个单词的长度 字符串的反转 344. 反转字符串 // 541. 反转字符串 II // 557. 反转字符串中的单词 III // 151. 翻转字符串里的单词 字符的统计 387. 字符串中的第一个唯一字符 // 389. 找不同 // 383. 赎金信 // 242. 有效的字母异位词 // 49. 字母异位词分组 // 451. 根据字符出现频率排序 // 423. 从英文中重建数字 // 657. 机器人能否返回原点 // 551. 学生出勤记录 I // 696. 计数二进制子串 // 467. 环绕字符串中唯一的子字符串 数字与字符串间转换 299. 猜数字游戏 // 412. Fizz Buzz // 506. 相对名次 // 539. 最小时间差 // 553. 最优除法 // 537. 复数乘法 // 592. 分数加减运算 // 640. 求解方程 // 38. 外观数列 // 443. 压缩字符串 // 8. 字符串转换整数 (atoi) // 13. 罗马数字转整数 // 12. 整数转罗马数字 // 273. 整数转换英文表示 // 165. 比较版本号 // 481. 神奇字符串 子序列 392. 判断子序列 // 524. 通过删除字母匹配到字典里最长单词 // 521. 最长特殊序列 Ⅰ // 522. 最长特殊序列 II 高精度运算 66. 加一 // 67. 二进制求和 // 415. 字符串相加 // 43. 字符串相乘 // 306. 累加数 字符串变换 482. 密钥格式化 // 6. Z 字形变换 // 68. 文本左右对齐 字符串匹配 28. 实现 strStr() // 686. 重复叠加字符串匹配 // 459. 重复的子字符串 // 214. 最短回文串 中心拓展法 5. 最长回文子串 // 647. 回文子串 推荐阅读 (欢迎投稿)\n没有人一起从零开始刷力扣(二)——字符串篇 by noone_\n数组和字符串 by 力扣 (LeetBook)\n数与位篇\r题目分类 题目编号 进制转换 67. 二进制求和 // 504. 七进制数 // 405. 数字转换为十六进制数 // 476. 数字的补数 // 66. 加一 // 479. 最大回文数乘积 // 564. 寻找最近的回文数 // 504. 七进制数 // 7. 整数反转 // 693. 交替位二进制数 数值计算 415. 字符串相加 // 43. 字符串相乘 // 556. 下一个更大元素 III // 9. 回文数 // 258. 各位相加 // 461. 汉明距离 // 477. 汉明距离总和 数学问题 204. 计数质数 // 263. 丑数 // 367. 有效的完全平方数 // 1071. 字符串的最大公因子 推荐阅读 (欢迎投稿)\n没有人一起从零开始刷力扣（三）- 数与位篇 by noone_\n递归篇\r题目分类 题目编号 二叉树相关问题 100. 相同的树 // 226. 翻转二叉树 // 104. 二叉树的最大深度 // 543. 二叉树的直径 // 617. 合并二叉树 // 572. 另一棵树的子树 // 965. 单值二叉树 // 101. 对称二叉树 // 104. 二叉树的最大深度 回溯相关问题 51. N 皇后 // 37. 解数独 // 39. 组合总和 // 46. 全排列 // 79. 单词搜索 动态规划相关问题 509. 斐波那契数 // 70. 爬楼梯 // 53. 最大子数组和 // 198. 打家劫舍 // 300. 最长递增子序列 推荐阅读 (欢迎投稿)\n一看就会，一写就废？详解递归 by 腐烂的橘子\n一篇文章带你吃透对称性递归(思路分析+解题模板+案例解读) by 星晴pro\n递归和分治图文学 by 力扣 (LeetBook)\n分治篇\r题目分类 题目编号 分解问题 169. 多数元素 // 4. 寻找两个正序数组的中位数 // 543. 二叉树的直径 解决子问题 69. x 的平方根 // 53. 最大子数组和 // 34. 在排序数组中查找元素的第一个和最后一个位置 合并结果 23. 合并 K 个升序链表 // 1277. 统计全为 1 的正方形子矩阵 推荐阅读 (欢迎投稿)\n递归和分治图文学 by 力扣 (LeetBook)\n贪心篇\r题目分类 题目编号 区间类 435. 无重叠区间 // 452. 用最少数量的箭引爆气球 // 763. 划分字母区间 // 1353. 最多可以参加的会议数目 // 1520. 最多的不重叠子字符串 // 738. 单调递增的数字 峰谷类 122. 买卖股票的最佳时机 II // 714. 买卖股票的最佳时机含手续费 // 376. 摆动序列 // 135. 分发糖果 钱币类 322. 零钱兑换 // 860. 柠檬水找零 // 1342. 将数字变成 0 的操作次数 任务类 621. 任务调度器 // 1705. 吃苹果的最大数目 矩形类 1630. 等差子数组 // 870. 优势洗牌 // 1262. 可被三整除的最大和 推荐阅读 (欢迎投稿)\n贪心问题汇总 by FennelDumplings\n贪心题型总结 by AC 自动机\n贪心算法（Java） by liweiwei1419\n贪心算法精讲 by 力扣 (LeetBook)\n排序算法篇\r题目分类 题目编号 冒泡排序 912. 排序数组 选择排序 215. 数组中的第K个最大元素 插入排序 147. 对链表进行插入排序 快速排序 973. 最接近原点的 K 个点 归并排序 23. 合并 K 个升序链表 堆排序 347. 前 K 个高频元素 桶排序 1648. 销售价值减少的颜色球 // 220. 存在重复元素 III 计数排序 75. 颜色分类 推荐阅读 (欢迎投稿)\n排序算法图文学 by 力扣 (LeetBook)\n字符串算法篇\r题目分类 题目编号 字符串匹配算法 Rabin-Karp 算法： 28. 找出字符串中第一个匹配项的下标 // KMP 算法: 214. 最短回文串 // Boyer-Moore 算法： 819. 最常见的单词 字符串排序算法 75. 颜色分类 // 451. 根据字符出现频率排序 // 179. 最大数 // 937. 重新排列日志文件 字符串压缩算法 Run-Length 编码：443. 压缩字符串 // 哈夫曼编码：297. 二叉树的序列化与反序列化 字符串搜索算法 17. 电话号码的字母组合 // 22. 括号生成 // 30. 串联所有单词的子串 字符串编辑距离算法 583. 两个字符串的删除操作 // 1143. 最长公共子序列 正则表达式 10. 正则表达式匹配 // 65. 有效数字 暴力算法 14. 最长公共前缀 // 125. 验证回文串 // 344. 反转字符串 推荐阅读 (欢迎投稿)\n树与二叉树篇\r注：对二叉树进行遍历时，除了使用递归的方法以外，建议尝试使用非递归的方法。面试常考，并且能加深自己对知识点的理解。\n题目分类 题目编号 二叉树的遍历 144. 二叉树的前序遍历 // 94. 二叉树的中序遍历 // 145. 二叉树的后序遍历 // 102. 二叉树的层序遍历 // 103. 二叉树的锯齿形层序遍历 二叉树的构造与修改 105. 从前序与中序遍历序列构造二叉树 // 106. 从中序与后序遍历序列构造二叉树 // 889. 根据前序和后序遍历构造二叉树 // 226. 翻转二叉树 // 617. 合并二叉树 二叉树的搜索问题 用DFS或BFS均可解决的问题： 513. 找树左下角的值 // 515. 在每个树行中找最大值 // 623. 在二叉树中增加一行 // 只能用DFS解决的问题： 199. 二叉树的右视图 // 需要两次搜索才能解决的问题： 655. 输出二叉树 // 865. 具有所有最深节点的最小子树 // 834. 树中距离之和 // 1339. 分裂二叉树的最大乘积 // 863. 二叉树中所有距离为 K 的结点 //101. 对称二叉树 // 222. 完全二叉树的节点个数 // 404. 左叶子之和 // 513. 找树左下角的值 二叉树的路径问题 自顶向下路径问题：257. 二叉树的所有路径 // 面试题04.12.求和路径 // 112.路径总和 // 437. 路径总和 III // 988. 从叶结点开始的最小字符串 // 非自顶向下路径问题：124. 二叉树中的最大路径和 // 687. 最长同值路径 // 543. 二叉树的直径 二叉树属性问题 104. 二叉树的最大深度 // 111. 二叉树的最小深度 // 222. 完全二叉树的节点个数 // 543. 二叉树的直径 二叉树公共祖先问题 235. 二叉搜索树的最近公共祖先 // 1483. 树节点的第 K 个祖先 二叉搜索树 98.验证二叉搜索树 // 173. 二叉搜索树迭代器 // 701. 二叉搜索树中的插入操作 // 669. 修剪二叉搜索树 // 450. 删除二叉搜索树中的节点 // 230. 二叉搜索树中第K小的元素 // 235. 二叉搜索树的最近公共祖先 //108. 将有序数组转换为二叉搜索树 // 783. 二叉搜索树节点最小距离 // 538. 把二叉搜索树转换为累加树 // 1038. 从二叉搜索树到更大和树 平衡二叉树 110. 平衡二叉树 // 109. 有序链表转换二叉搜索树 // 1382. 将二叉搜索树变平衡 推荐阅读 (欢迎投稿)\n二叉树的遍历(深度优先/广度优先 递归/非递归 层序遍历)详解 by\nbitkevin\n史上最全遍历二叉树详解 by golandscape\n一篇文章解决所有二叉树路径问题（问题分析+分类模板+题目剖析） by 星晴pro\n匹配类二叉树题目总结 by 腐烂的橘子\n红黑树杀人事件始末 by 公众号_码海\n二叉查找树 (树ADT连载 3/13) by yukiyama\nAVL树 (树ADT连载 4/13) by yukiyama\nsplay树 (树ADT连载 5/13) by yukiyama\n红黑树从入门到看开 by yukiyama\n树状数组从入门到下车 by yukiyama\n线段树从入门到急停 by yukiyama\n普通树 by 力扣 (LeetBook)\n二叉搜索树 by 力扣 (LeetBook)\nN 叉树 by 力扣 (LeetBook)\n动态规划篇\r题目分类 题目编号 01背包问题 416. 分割等和子集 // 474. 一和零 // 494. 目标和 // 1049. 最后一块石头的重量 II // 805. 数组的均值分割 完全背包问题 139. 单词拆分 // 279. 完全平方数 // 322. 零钱兑换 // 377. 组合总和 Ⅳ // 518. 零钱兑换 II 一维DP 32. 最长有效括号 // 70. 爬楼梯 // 120. 三角形最小路径和 // 91. 解码方法 // 131. 分割回文串 // 132. 分割回文串 II // 121. 买卖股票的最佳时机 二维DP 5. 最长回文子串 // 97. 交错字符串 // 62. 不同路径 // 64. 最小路径和 // 72. 编辑距离 // 115. 不同的子序列 三维DP 87. 扰乱字符串 线性DP 10. 正则表达式匹配 // 44. 通配符匹配 // 53. 最大子数组和 // 72. 编辑距离 // 120. 三角形最小路径和 // 121. 买卖股票的最佳时机 // 122. 买卖股票的最佳时机 II // 123. 买卖股票的最佳时机 III // 128. 最长连续序列 // 152. 乘积最大子数组 // 198. 打家劫舍 // 213. 打家劫舍 II // 300. 最长递增子序列 // 319. 灯泡开关 // 354. 俄罗斯套娃信封问题 // 714. 买卖股票的最佳时机含手续费 // 887. 鸡蛋掉落 // 1143. 最长公共子序列 // 940. 不同的子序列 II // 1092. 最短公共超序列 // 1463. 摘樱桃 II // 1696. 跳跃游戏 VI 区间DP 312. 戳气球 // 516. 最长回文子序列 // 664. 奇怪的打印机 // 730. 统计不同回文子序列 1039. 多边形三角剖分的最低得分 // 813. 最大平均值和的分组 // 1278. 分割回文串 树形DP 124. 二叉树中的最大路径和 // 337. 打家劫舍 III // 543. 二叉树的直径 数位DP 233. 数字 1 的个数 // 902. 最大为 N 的数字组合 // 1015. 可被 K 整除的最小整数 // 600. 不含连续1的非负整数 // 1012. 至少有 1 位重复的数字 状态压缩DP 464. 我能赢吗 // 526. 优美的排列 // 935. 骑士拨号器 // 1349. 参加考试的最大学生数 // 1986. 完成任务的最少工作时间段 计数型DP 62. 不同路径 // 63. 不同路径 II // 96. 不同的二叉搜索树 递推型DP 70. 爬楼梯 // 509. 斐波那契数 // 935. 骑士拨号器 // 957. N天后的牢房 // 1137. 第 N 个泰波那契数 概率型DP 808. 分汤 // 837. 新 21 点 博弈型DP 292. Nim游戏 // 794. 有效的井字游戏 // 877. 石子游戏 // 1140. 石子游戏 II // 1275. 找出井字棋的获胜者 // 1690. 石子游戏 VII 乘法原理 分隔长廊的方案数 推荐阅读 (欢迎投稿)\n一文学会动态规划解题技巧 by 公众号_码海\n一篇文章吃透背包问题！（细致引入+解题模板+例题分析+代码呈现） by 星晴pro\n分享｜深度讲解背包问题：面试中每五道动态规划就有一道是背包模型 \u0026hellip; by 宫水三叶\n动态规划基础模型精讲 by 力扣 (LeetBook)\n动态规划背包问题精讲 by 力扣 (LeetBook)\n动态规划图文学：线性 \u0026amp; 区间动态 by 力扣 (LeetBook)\n动态规划图文学：状压、计数 \u0026amp; 数位动态 by 力扣 (LeetBook)\n动态规划图文学: 树形、图上、概率 \u0026amp; 博弈动态 by 力扣 (LeetBook)\n图篇\r题目分类 题目编号 图的表示 329. 矩阵中的最长递增路径 // 1579.保证图可完全遍历 // 210. 课程表 II // 980. 不同路径 // 1128. 等价多米诺骨牌对的数量 // 133. 克隆图 // 1743. 从相邻元素对还原数组 广度优先搜索（BFS） 127. 单词接龙 // 126. 单词接龙 II // 207. 课程表 // 210. 课程表 II // 113. 路径总和 II // 542. 01 矩阵 // 200. 岛屿数量 // 117. 填充每个节点的下一个右侧节点指针 II // 130. 被围绕的区域 // 1091. 二进制矩阵中的最短路径 // 752. 打开转盘锁 // 733. 图像渲染 // 102. 二叉树的层序遍历 // 429. N 叉树的层序遍历 深度优先搜索（DFS） 130. 被围绕的区域 // 417. 太平洋大西洋水流问题 // 200. 岛屿数量 // 104. 二叉树的最大深度 // 463. 岛屿的周长 // 695. 岛屿的最大面积 // 827. 最大人工岛 // 1219. 黄金矿工 // 690. 员工的重要性 // 113. 路径总和 II // 226. 翻转二叉树 // 129. 求根节点到叶节点数字之和 最小生成树问题 1584. 连接所有点的最小费用 // 1131. 绝对值表达式的最大值 // 1631. 最小体力消耗路径 // 1489. 找到最小生成树里的关键边和伪关键边 最短路径问题 743. 网络延迟时间 // 127. 单词接龙 // 787. K 站中转内最便宜的航班// 994. 腐烂的橘子 // 882. 细分图中的可到达节点 // 1030. 距离顺序排列矩阵单元格 // 1162. 地图分析 // 1631. 最小体力消耗路径 图的连通性 785. 判断二分图 // 面试题 04.01. 节点间通路 // 547. 省份数量 // 886. 可能的二分法 // 959. 由斜杠划分区域 // 990. 等式方程的可满足性 推荐阅读 (欢迎投稿)\n滑动窗口专题\r题目分类 题目编号 固定窗口大小的滑动窗口问题 76. 最小覆盖子串 // 3. 无重复字符的最长子串 // 567. 字符串的排列 // 438. 找到字符串中所有字母异位词 // 1763. 最长的美好子字符串 // 446. 等差数列划分 II - 子序列 // 718. 最长重复子数组 // 239. 滑动窗口最大值 // 480. 滑动窗口中位数 // 128. 最长连续序列 // 346. 数据流中的移动平均值 不固定窗口大小的滑动窗口问题 209. 长度最小的子数组 // 674. 最长连续递增序列 // 943. 最短超级串 // 904. 水果成篮 // 632. 最小区间 // 560. 和为 K 的子数组 // 395. 至少有 K 个重复字符的最长子串 // 862. 和至少为 K 的最短子数组 推荐阅读 (欢迎投稿)\n滑动窗口 by powcai\n滑动窗口和双指针 by 力扣 (LeetBook)\n二分查找专题\r题目分类 题目编号 普通二分查找 704. 二分查找 // 69. x 的平方根 // 35. 搜索插入位置 // 153. 寻找旋转排序数组中的最小值 // 367. 有效的完全平方数 // 50. Pow(x, n) // 278. 第一个错误的版本 // 4. 寻找两个正序数组的中位数 // 167. 两数之和 II - 输入有序数组 // 744. 寻找比目标字母大的最小字母 // 162. 寻找峰值 查找区间 34. 在排序数组中查找元素的第一个和最后一个位置 // 658. 找到 K 个最接近的元素 // 278. 第一个错误的版本 // 74. 搜索二维矩阵 旋转排列数组 33. 搜索旋转排序数组 // 81. 搜索旋转排序数组 II // 240. 搜索二维矩阵 II // 48. 旋转图像 // 448. 找到所有数组中消失的数字 // 154. 寻找旋转排序数组中的最小值 II 推荐阅读 (欢迎投稿)\n写对二分查找不是套模板并往里面填空，需要仔细分析题意 by liweiwei1419\n二分查找 by 力扣 (LeetBook)\n双指针专题\r题目分类 题目编号 对撞指针问题 1. 两数之和 // 344. 反转字符串 // 345. 反转字符串中的元音字母 // 125. 验证回文串 // 11. 盛最多水的容器 // 15. 三数之和 // 18. 四数之和 // 167. 两数之和 II - 输入有序数组 // 88. 合并两个有序数组 // 283. 移动零 // 27. 移除元素 // 455. 分发饼干 // 561. 数组拆分 // 9. 回文数 快慢指针问题 876. 链表的中间结点 // 206. 反转链表 // 19. 删除链表的倒数第 N 个结点 // 141. 环形链表 // 142. 环形链表 II // 21. 合并两个有序链表 // 26. 删除有序数组中的重复项 // 83. 删除排序链表中的重复元素 // 82. 删除排序链表中的重复元素 II // 86. 分隔链表 // 234. 回文链表 滑动窗口问题 209. 长度最小的子数组 // 5. 最长回文子串 // 76. 最小覆盖子串 // 283. 移动零 // 80. 删除有序数组中的重复项 II // 561. 数组拆分 // 457. 环形数组是否存在循环 // 718. 最长重复子数组 推荐阅读 (欢迎投稿)\n滑动窗口和双指针 by 力扣 (LeetBook)\n前缀和专题\r题目分类 题目编号 一维数组的前缀和 560. 和为 K 的子数组 // 930. 和相同的二元子数组 // 525. 连续数组 // 974. 和可被 K 整除的子数组 // 523. 连续的子数组和 // 1248. 统计「优美子数组」 二维数组的前缀和 304. 二维区域和检索 - 矩阵不可变 // 1314. 矩阵区域和 // 1074. 元素和为目标值的子矩阵数量 // 363. 矩形区域不超过 K 的最大数值和 前缀和与二叉树 437. 路径总和 III // 1022. 从根到叶的二进制数之和 // 129. 求根节点到叶节点数字之和 推荐阅读 (欢迎投稿)\n前缀和 by 力扣 (LeetBook)\n位运算专题\r题目分类 题目编号 位运算的基本运算 136. 只出现一次的数字 // 190. 颠倒二进制位 // 191. 位1的个数 // 201. 数字范围按位与 // 338. 比特位计数 位运算的技巧 260. 只出现一次的数字 III // 342. 4的幂 // 371. 两整数之和 布隆过滤器 705. 设计哈希集合 // 706. 设计哈希映射 // 1044. 最长重复子串 // 211. 添加与搜索单词 - 数据结构设计 推荐阅读 (欢迎投稿)\n位运算和数学 by 力扣 (LeetBook)\n"},{"id":45,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E5%85%B4%E8%B5%B7/","title":"兴起","section":"个人","content":"\rWi-Fi 点对点传（二次开发）\r实现任意设备之间的点对点对传, 任意设备包括 Android、IPhone、PC、MAC、Linux。\n需要重点关注的问题\r如何通过扫二维码连接热点？ 接收端将WiFi信息(WiFi类型、安全等级、SSID、、密码)生成 QR 二维码，接着发送方通过扫码 QR 二维码 获取WiFi信息从而成功连接上接收端WiFi，相关 Kotlin 代码如下。 实现WiFi信息(WiFi类型、安全等级、SSID、、密码)生成 QR 二维码 package dev.spiegl.flyingcarpet import android.app.Application import android.graphics.Bitmap import android.graphics.Color import androidx.documentfile.provider.DocumentFile import com.google.zxing.BarcodeFormat import com.google.zxing.qrcode.QRCodeWriter import java.io.File import java.nio.ByteBuffer import java.security.MessageDigest fun getQrCodeBitmap(ssid: String, password: String): Bitmap { val size = 1024 // pixels val qrCodeContent = \u0026#34;$ssid;$password\u0026#34; val bits = QRCodeWriter().encode(qrCodeContent, BarcodeFormat.QR_CODE, size, size) return Bitmap.createBitmap(size, size, Bitmap.Config.RGB_565).also { for (x in 0 until size) { for (y in 0 until size) { it.setPixel(x, y, if (bits[x, y]) Color.BLACK else Color.WHITE) } } } } 实现读取QR码来获取SSID和密码\nbarcodeLauncher = registerForActivityResult(ScanContract()) { result -\u0026gt; if (result.contents == null) { viewModel.outputText(\u0026#34;Scan cancelled, exiting transfer.\u0026#34;) cleanUpTransfer() } else { val ssidAndPassword = result.contents.split(\u0026#39;;\u0026#39;) if (ssidAndPassword.count() \u0026gt; 1) { viewModel.ssid = ssidAndPassword[0] viewModel.password = ssidAndPassword[1] // make sha256 hash of password val hasher = MessageDigest.getInstance(\u0026#34;SHA-256\u0026#34;) hasher.update(viewModel.password.encodeToByteArray()) viewModel.key = hasher.digest() } else { viewModel.password = ssidAndPassword[0] // make sha256 hash of password val hasher = MessageDigest.getInstance(\u0026#34;SHA-256\u0026#34;) hasher.update(viewModel.password.encodeToByteArray()) viewModel.key = hasher.digest() viewModel.ssid = \u0026#34;flyingCarpet_%02x%02x\u0026#34;.format(viewModel.key[0], viewModel.key[1]) } // join hotspot joinHotspot() } 连接热点以后如何建立 TCP 连接 先是获取这个 设备IP, 后面再通过 socket 进行文件传输，相关 Kotlin 代码如下。 获取这个 设备IP // this is our findGateway(), so after we get the gateway/dhcp server ip we\u0026#39;re ready to confirm mode and launch transfer override fun onLinkPropertiesChanged(network: Network, linkProperties: LinkProperties) { super.onLinkPropertiesChanged(network, linkProperties) // check if transfer was cancelled before this callback ran if (!transferIsRunning) { return } // this was set to null in joinHotspot right before requesting the network that triggers this function. // check that it\u0026#39;s null so we only start the transfer once per joinHotspot invocation if (peerIP == null) { if (Build.VERSION.SDK_INT \u0026gt;= Build.VERSION_CODES.R) { linkProperties.dhcpServerAddress?.let { peerIP = it } } else { for (route in linkProperties.routes) { if (route.isDefaultRoute) { peerIP = route.gateway as Inet4Address? } } } transferCoroutine = GlobalScope.launch { try { startTransfer() } catch (e: Exception) { outputText(\u0026#34;Transfer error: ${e.message}\\n\u0026#34;) } _transferFinished.postValue(true) } } } 获取热点的设备IP\nprivate suspend fun startTCP() { withContext(Dispatchers.IO) { if (isHosting()) { server = ServerSocket(PORT) client = server.accept() } else { client = Socket(peerIP, 3290) } client.sendBufferSize = chunkSize * 2 client.receiveBufferSize = chunkSize * 2 inputStream = client.getInputStream() outputStream = client.getOutputStream() } } 建立 TCP 连接之后如何传输文件 suspend fun startTransfer() { outputText(\u0026#34;\\nStarting Transfer\u0026#34;) startTCP() confirmVersion() confirmMode() // send/receive if (mode == Mode.Sending) { // tell receiving end how many files we\u0026#39;re sending val numFilesBytes = longToBigEndianBytes(fileStreams.size.toLong()) withContext(Dispatchers.IO) { outputStream.write(numFilesBytes) // write to receiving end } // send files for (i in 0 until fileStreams.size) { outputText(\u0026#34;=========================\u0026#34;) outputText(\u0026#34;Sending file ${i + 1} of ${fileStreams.size}. Filename: ${files[i].name}.\u0026#34;) val path = if (i \u0026lt; filePaths.size) { filePaths[i] } else { \u0026#34;\u0026#34; } sendFile(files[i], fileStreams[i], path) } } else if (mode == Mode.Receiving) { // find out how many files we\u0026#39;re receiving val numFilesBytes = readNBytes(8, inputStream) val numFiles = ByteBuffer.wrap(numFilesBytes).long // receive files for (i in 0 until numFiles) { outputText(\u0026#34;=========================\u0026#34;) outputText(\u0026#34;Receiving file ${i + 1} of $numFiles\u0026#34;) receiveFile(i == numFiles - 1) } } outputText(\u0026#34;=========================\u0026#34;) outputText(\u0026#34;Transfer complete\\n\u0026#34;) } 如何判定哪些设备在编程时开热点和连接网络有不可行性? 参考文档\n入门 · Kotlin 官方文档 中文版 (kotlincn.net) android SDK安装以及环境变量配置（windows）_在windows上,需要将android sdk的路径添加到系统的环境变量中,这样你就可以在命令-CSDN博客 Kotlin/Native 开发入门 - 使用 IntelliJ IDEA - Kotlin 语言参考文档 中文版 (liying-cn.net) 该项目参考已经实现的项目\nspieglt/FlyingCarpet：跨平台 AirDrop。通过 ad hoc WiFi 在 Android、iOS、Linux、macOS 和 Windows 之间传输文件。无需网络基础设施，只需两台带有 WiFi 芯片的近距离设备。 (github.com) 首页美化计划\r目的是增强博客的丰富度和内容,使得博客不再那么枯燥无味,并进一步将个人数据透明化和可视化 步骤如下\n初步利用网页组件美化 搞定数据的存储和传输 图表可视化 万物皆有定数\r方式: 系统api/相关软件/自行记录 数据格式: JSON\n内容: 与我有关的所有数据,单位为天\n步数 睡眠时长, 睡眠起始点 键盘输入字符数量 \\ 鼠标点击次数 饮水量 \\ 吃饭内容 洗澡 \\ 洗头 购物记录 重要的定数 计算力 记忆力 意志力 一言\r介绍\r在息屏或者锁屏状态下显示一段话,可以运行在移动端或者PC端,每隔一定的时间按照某种顺序来切换另一段话,数据接口可以为本地或网络上的.JSON文件和.CSV文件等.\n待定计划\r短信应用开发 移动端和PC端应用开发 参考内容\rhttp://blog.lwons.com/archieve/3_entity_search_databases.html https://languageresources.github.io/2018/03/07/%E8%8B%97%E8%8F%81%E8%8F%81_Wikidata%E7%9F%A5%E8%AF%86%E5%BA%93/ https://www.wikidata.org/w/api.php?action=wbsearchentities\u0026search=Fudan\u0026language=en\u0026limit=20\u0026format=json Wikipedia json数据 https://dumps.wikimedia.org/wikidatawiki/entities/ 有书可读方案\r电子书 下载到本地 优秀的阅读体验 个人存储方案\rNAS 好处在于可扩展存储，数据安全，价格也不算特别高 坏处在于速度和可用性需要网络支持，需要内网穿透或者公网IP，且需要24小时开启，费电\nType-C U盘 好处在于速度有保障、不需要依赖网络 坏处在于用时候没法充电，容易丢失，带来发热量，价格略贵\nSD 卡 存储 好处在于速度有保障、不需要依赖网络 坏处在于容易丢失，带来发热量，价格贵\n网络云盘（阿里云盘等） 好处在于可扩展存储，数据安全，价格也不算特别高 坏处在于速度和可用性需要运营商支持，一般来说，速度都比较慢\n最后总结一下,四个存储方案,供大家参考\n价格 读写速度 可扩展性 稳定性 其他问题 NAS 硬盘便宜,NAS本身贵,网费和电费月支 网速 多块硬盘 极其稳定 Type-C U盘 价格 SD 卡存储 网络云盘(阿里云盘等) "},{"id":46,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E4%BF%AE%E8%BA%AB/","title":"修身","section":"个人","content":"\r目的\r解决睡眠作息混乱 保持身体卫生和健康 工作面试和找点事情做 项目\r第一项：11 点前睡觉 第二项：天天洗澡，天天锻炼 第三项：笔记：Linux、计网、Python、django、Git 完成情况\r第一项 第二项 第三项 备注 9.24 ✕ ✓ ✓ 稍微晚了点，12点才睡，万事开头难，搞了点 Git 目录 9.25 ✕ ✕ ✕ 凌晨1点才睡，有点懈怠了 9.26 ✕ ✕ ✕ 没完成计划的一天 10.7 ✕ ✕ ✕ 就洗了个澡 10.14 ✕ ✕ ✕ 没干事情,熬了个通宵 理论\r定时\r定时体检,选重要的关键的体检项目, 原则\r极简, 如无必要勿增实体 实用, 凡事要看它有没有用 长远, 不要只关注今天和昨天 果断, 当断不断,必受其乱 耐心, 不要傲慢和偏见 稳步, 区分轻重缓急 隔离，工作，娱乐，休息三者的时间空间不能相同 必做\r11 点前睡觉 选做\r不在手机上刷短视频 多看书 408科目复习 刷算法题 做 50道计算题 骑车回去 20 个俯卧撑 100 个单腿,左50,右50 穿好衣服,整理仪容仪表 打球 交流\r求同存异, 不说服, 列事实 "},{"id":47,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/408/%E5%BA%94%E7%94%A8%E5%B1%82-qa/","title":"应用层-Q\u0026A","section":"理论知识","content":"应用层是指电脑上各种应用软件进程通过何种应用层协议来使用网络提供的通信服务\n域名系统DNS是什么\r域名系统是指 Internet 中用于把主机名字转换成IP的系统\n为啥 IP 数据包不使用域名而是用 IP 地址呢\r因为 IP 地址的长度是固定的32位或者固定的128位，而域名的长度是可变的\n域名服务器DNS使用频率非常高，如何解决域名服务器可能出现的故障问题呢\r域名服务器DNS被设计成联机分布式数据系统，采用B/S架构, 大多域名在本地进行解析,少量解析需要通过互联网.\n域名到IP地址的解析过程是怎么样的呢\r当应用需要将域名转 IP 地址时, 应用就调用解析程序( resolver ), 把待解析的域名放在 DNS 请求报文中, 以 UDP 方式发送给本地域名服务器,本地服务查找域名之后, 把对应的 IP 地址发送给应用主机.\n域名是怎么组成的呢\r早期是无层次的名字空间, 后来因为用户数量急剧增加, 管理这个域名集合空间非常困难, 互联网才用了层次树状结构的命名方法, 任何在互联网上的主机或者路由器, 都有一个唯一层次结构的名字(即域名)，域名由标号和点组成，如 www.baidu.com ，其中com为顶层域名，baidu为二级域名，www为三级域名。\n互联网域名空间是一个倒过来的树状结构，最上面的是根，根下面的第一层是顶级域名，第二层是二级域名，第三层是三级域名，以此类推，最后一层是叶子节点，也就是这主机名字。\n域名中的标号是怎么规定的呢\r由英文字母和数字组成，不区分大小写，每个标号不超过63个字符（为记忆最好不要超过12个字符）。\n前面提到域名服务器是联机分布式数据系统，那么它是如何分布管理的呢\r域名服务器采用分区的方法来管理，因为这样相比起按照域名来划分，会使域名服务器的数量太多，使域名系统的运行效率降低。\n区（zone）是指域名服务器负责的范围。\n域名服务器之间的解析过程是怎么样的呢？\r主机向本地域名服务器查询基本采用递归查询。\n本地域名服务器想根域名服务器采用迭代查询。\n文件传输协议有哪些？\r文件传输协议包括两种FTP和TFTP协议，FTP基于TCP支持文件传输和交互，而TFTP基于UDP支持文件传输不能交互。\nTELNET 是什么协议？\rTELNET 是一个基于TCP的简单远程终端协议，用于远程登录另一台主机。\nWWW 、HTTP、HTML 是指什么？两者有什么关系 ？\rWWW（World Wide Web）是一个基于HTTP协议的、分布式的、超文本的信息存储系统。\nHTTP （HyperText Transfer Protocol）是一个无状态的、基于TCP的应用层协议。\nURL 的格式？URL 是否区分大小写?\r\u0026lt;协议\u0026gt;://\u0026lt;主机\u0026gt;:\u0026lt;端口\u0026gt;/\u0026lt;路径\u0026gt;\n不区分大小写\nHTTP 的传输过程\r建立 TCP 连接 B发送 请求报文 C发送 响应报文 关闭 TCP 连接 HTTP 的状态码分别代表什么?\r1xx代表通知信息,如何请求收到了或正在处理 2xx代表成功,如接受或知道了 3xx代表重定向, 如完成请求还要进一步采取行动 4xx代表客户端请求错误,如因为客户端输入错误的URL而无法访问 5xx代表服务器响应错误, 如服务器已关闭连接. 为什么存在 Cookie 这种东西?\r由于 HTTP 本身是无状态的，但是在一些网站实际业务中不可避免要记住用户的当前状态，如果要记住用户的登录状态，当用户登录成功之后，网站服务器便在响应中设置一个识别码“Set-cookie”，当用户的浏览器收到响应之后，就会将其中的 Cookie 予以保存到本地，并在下次请求时将 Cookie 放到请求头中去。\n"},{"id":48,"href":"/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/408/%E8%BF%90%E8%BE%93%E5%B1%82-qa/","title":"运输层-Q\u0026A","section":"理论知识","content":"\r运输层是干啥的？为啥会有运输层\r运输层是为进程与进程之间通信服务用的，规定了进程与进程之间应该以何种协议进行传输数据。\n如果没有运输层，通信数据的传输将不可靠稳定，从而影响整个网络的通信速度质量。\n运输层包括哪些协议内容？这些协议内容有哪些异同点？\r运输层主要包括TCP【传输控制协议】协议和UDP【用户数据报协议】协议。\n不同点：\nUDP 不需要建立连接直接发送数据包，TCP需要进行三次握手再发送数据 UDP支持一对一、一对多、多对一、多对多的相互通信，TCP支持一对一的点对点通信 UDP不保证数据传输能顺利抵达目的，TCP通过一些内部协议来保证数据传输的一定抵达目的 TCP 协议的三次握手四次挥手过程是怎么样的？\r三次握手是指客户端和服务端之间建立连接的过程，而四次挥手则是两者释放连接的过程。\n第一次握手：客户向服务端主动发送信号【SYN】，具体内容为我已经准备好同步了，如果你要开始与同步，发送一个确认码ack给我（Acknowledge number，值我发送的随机码+1），代表你真的收到我发的东西了。\n"},{"id":49,"href":"/notes/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"正则表达式","section":"技术","content":"正则表达式的所有元字符 正则表达式的所有元字符包括(markdown表格列出来)：\n元字符 描述 . 匹配任意字符（除了换行符） \\d 匹配数字字符 \\D 匹配非数字字符 \\w 匹配单词字符（字母、数字、下划线） \\W 匹配非单词字符 \\s 匹配空白字符（空格、制表符、换行符等） \\S 匹配非空白字符 ^ 匹配字符串的开头 $ 匹配字符串的结尾 * 匹配前面的元素零次或多次 + 匹配前面的元素一次或多次 ? 表示前面的元素是可选的，匹配零次或一次 {n} 表示前面的元素恰好出现 n 次 {n,} 表示前面的元素至少出现 n 次 {n,m} 表示前面的元素出现 n 到 m 次之间 [] 字符集，匹配括号中任意一个字符 [^] 或 [^\u0026hellip;] 否定字符集，匹配除了括号中指定的任意字符之外的其他字符 "},{"id":50,"href":"/notes/%E4%B8%AA%E4%BA%BA/%E6%94%AF%E5%87%BA%E8%AE%A1%E7%AE%97/","title":"支出计算","section":"个人","content":"现在一个月支出\n"},{"id":51,"href":"/moments/%E4%B8%AD%E5%9B%BD/","title":"中国","section":"Moments","content":" https://photocdn.sohu.com/20081008/Img259904537.jpg https://www.gov.cn/test/images/images/00188b27c9090bf5a75813.jpg "}]