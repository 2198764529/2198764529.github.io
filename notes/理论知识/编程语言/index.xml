<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程语言 on 流笔</title>
    <link>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 编程语言 on 流笔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Django</title>
      <link>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/django/</guid>
      <description>架构图 card &amp;#34;Brown（浏览器）&amp;#34; as Brown card &amp;#34;Urls（路由）&amp;#34; as Urls card &amp;#34;View（视图）&amp;#34; as View card &amp;#34;Model（模型）&amp;#34; as Model card &amp;#34;Template（模板）&amp;#34; as Template database &amp;#34;database（数据库）&amp;#34; as database Brown --&amp;gt; Urls: 发送请求 Urls --&amp;gt; View: 路由分发 View &amp;lt;--&amp;gt; Model: 操作数据/返回结果 View &amp;lt;--&amp;gt; Template:调用模板 Model &amp;lt;--&amp;gt; database: ORM Template --&amp;gt; Brown: 返回响应 备注:
ORM: object relation mapping MVT架构层 Model 模型层 from django.db import models class Person(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) 模型 模型操作 以下模型操作创建、删除、更改、保存， 读取操作属于 QuerySet 那部分</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/</guid>
      <description>概念类 什么是 闭包/装饰器? 闭包 装饰器 本质 嵌套返回函数的函数 用于扩展修改类或方法的闭包 特征 嵌套的函数,内部函数使用外部函数的参数,返回内部函数 闭包特征 + 参数传入为被装饰函数 目的 使得内部函数可以访问外部函数的变量 不修改函数本身，修改或扩展函数功能 缺点 可能会造成额外的内存占用 闭包的缺点 应用场景 数据封装;工厂函数;函调函数;延迟计算;装饰器;缓存结果 记录日志;统计时间;访问控制;参数验证;重试机制 理解闭包的应用场景 # 闭包示例代码合集 # 1. 数据封装 def counter(): # count 变量被封装在闭包内，外部无法直接访问 count = 0 def increment(): # 使用 nonlocal 关键字，闭包可以修改外部函数的变量 nonlocal count count += 1 return count return increment # 创建一个闭包实例，并多次调用它 counter_func = counter() print(counter_func()) # 输出: 1 print(counter_func()) # 输出: 2 # 2. 工厂函数 def make_multiplier(factor): # multiplier 函数捕获了外部的 factor 变量 def multiplier(x): return x * factor return multiplier # 创建不同的乘数函数 double = make_multiplier(2) triple = make_multiplier(3) print(double(5)) # 输出: 10 print(triple(5)) # 输出: 15 # 3.</description>
    </item>
    
    <item>
      <title>python 方法参考</title>
      <link>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>以下内容由 ChatGPT 生成, 仅供学习参考
目录 文件处理（os、io） 网络编程（socket、urllib） 日期和时间处理（datetime、time） 数学运算（math、random） 字符串处理（re、string） 数据结构（list、tuple、dict、set） 对象编程（class、object） 错误处理（try、except） 文件处理（os、io） import os import io #️⃣ os 模块 # 获取和更改当前工作目录 current_directory = os.getcwd() # 返回当前工作目录 os.chdir(&amp;#39;/path/to/directory&amp;#39;) # 改变当前工作目录 # 列出目录内容 contents = os.listdir(&amp;#39;.&amp;#39;) # 列出当前目录中的所有文件和目录 # 创建和删除目录 os.mkdir(&amp;#39;new_directory&amp;#39;) # 创建新目录 os.makedirs(&amp;#39;parent/child_directory&amp;#39;) # 递归创建目录 os.rmdir(&amp;#39;new_directory&amp;#39;) # 删除目录（仅当目录为空时） os.removedirs(&amp;#39;parent/child_directory&amp;#39;) # 递归删除目录 # 删除文件 os.remove(&amp;#39;file.txt&amp;#39;) # 删除文件 os.unlink(&amp;#39;file.txt&amp;#39;) # 删除文件，与 os.remove 功能相同 # 重命名文件或目录 os.rename(&amp;#39;old_name.txt&amp;#39;, &amp;#39;new_name.txt&amp;#39;) # 重命名文件或目录 os.renames(&amp;#39;old_directory&amp;#39;, &amp;#39;new_directory&amp;#39;) # 递归重命名文件或目录 # 文件和目录属性 exists = os.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/notes/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis/</guid>
      <description>Redis 简介 一个开源的、</description>
    </item>
    
  </channel>
</rss>
