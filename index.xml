<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>好记性不如烂笔头 on 李枫的地</title>
    <link>https://ltao.cc/</link>
    <description>Recent content in 好记性不如烂笔头 on 李枫的地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://ltao.cc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>22年去深圳计划</title>
      <link>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/22%E5%B9%B4%E5%8E%BB%E6%B7%B1%E5%9C%B3%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 02 Feb 2023 20:30:04 +0800</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/22%E5%B9%B4%E5%8E%BB%E6%B7%B1%E5%9C%B3%E8%AE%A1%E5%88%92/</guid>
      <description>计划明细 项目项 具体值 出发时间 待定 出发工具 待定 目的地 固戌 要带的东西 见【物品清单】 要做的事情 见【事情清单】 物品清单 要带的东西 电脑 鼠标，键盘 手机 (mi9, iphone6坏掉的) 硬盘(一个256固态, 一个1T机械) 电水壶 背包 配件类，电脑充电器，手机充电器（typec，mirc) 几个n95口罩 两瓶水 毛巾、洗漱牙刷杯子牙膏 要买的东西 厨房用具：电饭煲， 锅 插板 显示器 洗澡: 拖鞋, 衣架 篮球鞋 事情清单 走之前要做的事 剪头发 收拾房间 到之后要做的事 打电话 相关信息 衡阳到深圳的交通费用
火车，坐106，卧180，8小时
顺风车，350，11个小时
飞机，520，一天</description>
    </item>
    
    <item>
      <title>22年过年运动记账</title>
      <link>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/22%E5%B9%B4%E8%BF%87%E5%B9%B4%E8%BF%90%E5%8A%A8%E8%AE%B0%E8%B4%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/22%E5%B9%B4%E8%BF%87%E5%B9%B4%E8%BF%90%E5%8A%A8%E8%AE%B0%E8%B4%A6/</guid>
      <description> 1月4号 25
1月5号 40
1月6号 43 已结
1月7号 40
1月8号 35
1月9号 60 已结
1月10号 30
1月11号 25
1月13号 45 已结
1月14号 40 （第十天）
1月17号 30
1月18号 2 已结
1月19号 53
1月20号 57
1月21号 59 已结（剩下54元）
1月25号 14
1月26号 20
1月27号 30 (已结)
1月28号 73
1月29号 34
1月30号 37 已结
320 = 140+65+53+57+5 已结清
项目规则：
跑步，一圈5元，每天最多跑4圈 深蹲，50个15元，每天最多做100个 羽毛球，20个4元，40个7元，60个10元，每天最多60个 </description>
    </item>
    
    <item>
      <title>git操作</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/</guid>
      <description>Git 所有操作及命令 Git 是一个分布式版本控制系统，常用于管理代码的版本和协作开发。以下是 Git 的一些常用操作和命令：
usage: git [-v | --version] [-h | --help] [-C &amp;lt;path&amp;gt;] [-c &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;] [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;] [--config-env=&amp;lt;name&amp;gt;=&amp;lt;envvar&amp;gt;] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects Git diff 在默认的 Git diff 输出中，您通常会看到以下内容：</description>
    </item>
    
    <item>
      <title>Hugo 方法参考</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>String:用于字符串处理 trim ：从字符串中删除前导和尾随空格。 {{ trim &amp;#34; 你好，世界！ &amp;#34; }} upper ：将字符串转换为小写或大写。 {{ lower &amp;#34;你好&amp;#34; }} {{ upper &amp;#34;world&amp;#34; }} title ：将字符串中每个单词的首字母转换为大写。 {{ title &amp;#34;hello world&amp;#34; }} replace ：用另一个子字符串替换子字符串的出现。 {{ replace &amp;#34;你好，世界！&amp;#34; &amp;#34;你好&amp;#34; &amp;#34;嗨&amp;#34; }} substr ：返回给定字符串的子字符串，从指定位置开始，可选长度。 {{ substr &amp;#34;你好，世界！&amp;#34; 7 5 }} len ：返回字符串的长度。 {{ len &amp;#34;你好，世界！&amp;#34; }} printf ：使用fmt.Printf语法格式化字符串。 {{ printf &amp;#34;你好，%s！&amp;#34; &amp;#34;世界&amp;#34; }} urlize ：将字符串转换为适合URL的格式。 {{ urlize &amp;#34;这是一个示例字符串&amp;#34; }} humanize ：将字符串转换为人类可读的格式。 {{ humanize &amp;#34;some_string&amp;#34; }} pluralize ：基于计数返回词的复数形式。 {{ with index .</description>
    </item>
    
    <item>
      <title>markDown 语法</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/</guid>
      <description>标题：使用&amp;quot;#&amp;ldquo;字符表示标题，数量代表标题级别，最多支持6级标题。例如：
# 一级标题 ## 二级标题 ### 三级标题 ... ###### 六级标题 段落：段落之间以空行分隔。
强调：使用&amp;rdquo;*&amp;ldquo;或&amp;rdquo;_&amp;ldquo;将需要强调的文本包围起来。例如：
*斜体* _斜体_ **粗体** __粗体__ ***粗斜体*** ___粗斜体___ 列表：有序列表以数字和句点开始，无序列表以&amp;rdquo;*&amp;quot;、&amp;quot;+&amp;ldquo;或&amp;rdquo;-&amp;ldquo;开始。例如：
1. 第一项 2. 第二项 3. 第三项 - 无序列表项1 - 无序列表项2 - 嵌套的无序列表项 - 更深层次的无序列表项 * 无序列表项A * 无序列表项B * 嵌套的无序列表项 * 更深层次的无序列表项 + 无序列表项X + 无序列表项Y + 嵌套的无序列表项 + 更深层次的无序列表项 链接：使用&amp;rdquo; 链接文本&amp;ldquo;的格式添加链接。例如：
[Google](https://www.google.com) 图片：使用&amp;rdquo; &amp;ldquo;的格式插入图片。例如：
![示例图片](https://example.com/image.jpg) 引用：使用&amp;rdquo;&amp;gt;&amp;ldquo;字符表示引用。例如：
&amp;gt; 这是一段引用的文本。 代码块：使用三个反引号(`)包围代码块，并在开始位置指定代码语言（可选）。例如：
def hello_world(): print(&amp;#34;Hello, world!&amp;#34;) 表格：使用&amp;rdquo;|&amp;ldquo;和&amp;rdquo;-&amp;ldquo;分隔表头和表格内容，并使用&amp;rdquo;:&amp;ldquo;来对齐表格内容。例如：
| 列1标题 | 列2标题 | |---------|---------| | 内容1 | 内容2 | | 内容3 | 内容4 | 左对齐列1标题 | 右对齐列2标题 :------------|-------------: 左对齐内容1 | 右对齐内容2 左对齐内容3 | 右对齐内容4 水平线：使用三个或更多连续的&amp;rdquo;*&amp;quot;、&amp;quot;-&amp;ldquo;或&amp;rdquo;_&amp;ldquo;表示水平线。例如：</description>
    </item>
    
    <item>
      <title>python 方法参考</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>Number(数字) ceil(x)： 返回不小于 x 的最小整数 import math result = math.ceil(4.2) # 返回 5 floor(x)： 返回不大于 x 的最大整数 import math result = math.floor(4.8) # 返回 4 sqrt(x)： 返回 x 的平方根 import math result = math.sqrt(25) # 返回 5.0 pow(x, y)： 返回 x 的 y 次方 import math result = math.pow(2, 3) # 返回 8.0 exp(x)： 返回 e 的 x 次方 import math result = math.exp(2) # 返回 7.389... log(x)： 返回 x 的自然对数 import math result = math.</description>
    </item>
    
    <item>
      <title>个人存储方案</title>
      <link>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/%E4%B8%AA%E4%BA%BA%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/%E4%B8%AA%E4%BA%BA%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>关于篮球</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%AF%AE%E7%90%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%AF%AE%E7%90%83/</guid>
      <description>健壮的身体和娴熟的技术
关于投篮 动作要点: 调整脚步,左脚在前,右脚在后 想象下面有个凳子坐下去,接着像弹簧一样起来 辅助手确定最左出手范围，控制方向 直臂出手,打直手腕 手指拨球,压腕让球保持高度和旋速 保持投篮动作 目标是弧度尽量高，发力尽量轻松 要往上发力投篮，就要往下下面压，下半身和上半身要发力不脱节 投篮手不要抓球，食指和中指张开，压腕时合拢 辅助手确定投篮范围，控制方向 在脚发力完成之前， 投篮夹角＜90度 投篮弧度要是一个抛物线，高度要高于篮板上沿 几个重要的指标：球旋速、球高度 关于上篮 果冻上篮，手心正对着篮板，旋球到篮板的左上角或者右上角 多观察全局位置 攻击前侧脚 关于运球 减少运球时间 只突破不经常终结，多多分球 踮脚尖走路能锻炼小腿肌肉和踝关节稳定性。 一直收肚子能减少身体负担 </description>
    </item>
    
    <item>
      <title>关于睡觉</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%9D%A1%E8%A7%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%9D%A1%E8%A7%89/</guid>
      <description> 喝牛奶 晒太阳（促进褪黑素分泌） 晚上10点半以后不看手机 不焦虑 多听音乐 </description>
    </item>
    
    <item>
      <title>关于做事</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E5%81%9A%E4%BA%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E5%81%9A%E4%BA%8B/</guid>
      <description>发展 发展才能解决一切问题 悲观和乐观 悲观带来怀疑、沮丧、恐惧、绝望、焦虑和抑郁，乐观带来坚定、韧性、勇气、希望、开朗和阳光
尝试 做事情就像搭建木，前期可以大胆尝试，坍塌的代价不过几块小积木而已，后期则必须小心翼翼，不然花费很多时间的高楼将重头再来搭建。 在当下，大部分事情是无意义且有害的 当下找不到意义的事情，影响往往是长远的 多去说话，弥补自己说话吞吞吐吐的缺点 做了总比不做好 休息 闲下来充分休息，不要忙得没时间思考 态度 因地制宜,因时制宜,什么时候就做应该做的事情
逆水行舟，不进则退
忌讳是懒惰，绝对不要拖延症
慢工出细活
凡事预则立，不预则废，没有准备的事情失败是应该的，顺利则是侥幸
为长远记，目光短浅是会患得患失的，是会后悔的
注意边际效应</description>
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>应用层 应用层协议是为了各应用进程需要不同的通信规则而存在的, 也是要依赖运输层所提供的基本通信服务。
概念 应用层主要包括以下内容
域名系统 DNS WWW 和 HTTP 协议 电子邮件的相关协议，SMTP 协议和 POP3 协议、IMAP 协议 域名系统 DNS DNS 的作用是将域名转为IP地址，具体的过程是应用进程调用 resolver（解析程序），发送包含待解析的域名的 DNS 请求报文，通过 UDP 进行再包装发送到本地域名服务器，本地域名服务器搜索以后，把对应的 IP 地址放在回答报文返回。
域名 域名是一个空间概念，可比作一个盒子，最大的一个盒就是顶级域名，再里面的盒子叫做二级域名，再里面的盒子叫做三级域名。
如www.baidu.com这个域名，从左到右域名等级依次提高，com就是顶级域名，baidu则是二级域名，www是三级域名。
这些顶级域名和二级域名以及其他等级的域名都是要遵守域名规则
必须是英文字母或数字，不区分大小写 一个域名长度不超过 63 个字符 所有域名加起来长度 255 个字符 运输层 TCP 协议 特点:面向连接(虚连接);点对点;可靠有序,不丢不重;全双工通信;字节流
全双工通信:发送缓存和接收缓存
TCP首部 0 8 16 24 31 --------------------------------------------------------------------------- 源端口 | 目的端口 --------------------------------------------------------------------------- 序号(seq) --------------------------------------------------------------------------- 确认号 --------------------------------------------------------------------------- 首部长度|保留|[URG,ACK,PSH,RST,SYN,FIN] |	接收窗口大小 --------------------------------------------------------------------------- 检验和 | 紧急指针 --------------------------------------------------------------------------- 选项(长度可变) | 填充 --------------------------------------------------------------------------- 图 TCP的报文段首部 说明: 1.</description>
    </item>
    
    <item>
      <title>技术记录</title>
      <link>https://ltao.cc/posts/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/</guid>
      <description>hugo 添加mermaid作图 https://cloud.tencent.com/developer/article/1944123
CSS 字体 在CSS中，font-size属性可以使用多种单位来指定字体大小。以下是一些常见的font-size单位：
😋
像素（px）：像素是绝对单位，它会直接指定字体的像素大小。例如，font-size: 16px; 将文本字体设置为16像素高。
磅（pt）：磅是印刷单位，通常用于打印。1磅等于1/72英寸，因此它也可以用于屏幕上的字体大小。例如，font-size: 12pt; 将字体设置为12磅。
毫米（mm）：毫米是长度单位，也可以用于字体大小。例如，font-size: 5mm; 将字体大小设置为5毫米。
厘米（cm）：厘米也是长度单位，可以用于指定字体大小。例如，font-size: 0.5cm; 将字体大小设置为0.5厘米。
百分比（%）：百分比是相对于父元素的大小来定义字体大小。例如，font-size: 150%; 表示字体大小是父元素字体大小的150%。
em：em单位是相对于当前元素的字体大小来定义的。例如，font-size: 1.5em; 表示字体大小是当前元素字体大小的1.5倍。
rem：rem单位也是相对于根元素（html元素）的字体大小来定义的。这可以使字体大小在整个文档中保持一致。例如，font-size: 1.2rem; 表示字体大小是根元素字体大小的1.2倍。
刷机参考 TWRP刷机 https://zhuanlan.zhihu.com/p/96968140 Magisk 刷入 https://magiskcn.com/ 沸米计划 https://mi.fiime.cn/FiimePlan/24.html#gallery hugo 日期转时间戳 原因是这样的,我在设置文章更新时间的时候,大部分的日期转时间戳貌似都没问题,除了当天的时间转时间戳,当时时间为当天的 14 点,出来的时间戳一转成时间,结果居然是 22 点, 不断测试,发现不是我代码的问题.
多次修改无果,问了chatGPT才知道,转时间戳的过程原来还有其他东西会影响
在处理时间戳时，有一些需要注意的重要事项, ChatGPT 的回答如下
时间戳精度： 时间戳可以是秒级或毫秒级的，具体取决于系统和编程语言。确保您清楚时间戳的精度，以免出现错误。
时区和区域性： 时间戳通常是与协调世界时 (UTC) 相关的。时区和区域性的问题可能会导致时间戳的解释不正确。在处理时间戳时，考虑时区和区域性，以便正确地显示和解释日期时间。
时间戳格式： 时间戳可以采用不同的格式，包括整数（秒或毫秒）、ISO 8601（例如：2023-10-11T14:44:16Z）等。确保您了解所使用的时间戳格式，以正确解释和显示日期时间。
溢出和范围： 时间戳的范围是有限的，因此要小心处理超出范围的情况。对于以秒为单位的时间戳，通常范围在约1970年至2038年之间。对于以毫秒为单位的时间戳，范围更大，但仍然有限。
精确性： 根据时间戳的精度，可能会存在一些精度问题。毫秒级时间戳可以提供更高的精度，但仍然有限。在某些情况下，您可能需要考虑四舍五入或截断精度以满足需求。
跨时区计算： 如果涉及到多个时区，确保正确进行时区转换。使用合适的工具和库来处理跨时区问题。
日期时间显示： 在显示时间戳时，考虑最终用户的需求和偏好。提供适当的日期时间格式，并考虑将时间戳转换为本地时区以获得更好的用户体验。
维护和更新： 时间戳可能需要在未来进行维护和更新，以适应不同的需求或问题。时刻注意更新可能会影响应用程序的行为。
总之，处理时间戳需要小心，要理解时间戳的精度、格式、时区和区域性，以及如何正确地显示和处理日期时间数据。这可以确保您的应用程序或系统在时间方面表现正确。
hugo 字段bug publishDate字段会有时候让文章显示不出来, 或许是 hugo 内部编译执行的过程出错</description>
    </item>
    
    <item>
      <title>目标</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E7%9B%AE%E6%A0%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E7%9B%AE%E6%A0%87/</guid>
      <description> 长期目标 利用chatgpt之类的大模型接入一个语音助手 瘦下来到120斤 保持最佳状态(睡足、吃好) 跳槽准备 短期目标 投影仪 计算机网络复习 数据结构复习 英语学习 </description>
    </item>
    
    <item>
      <title>清单</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E6%B8%85%E5%8D%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E6%B8%85%E5%8D%95/</guid>
      <description> 安卓手机 软件 小黑屋 appShare Cemiuiler magisk: 苹方字体模块 神仙救砖 LSPosed-zygisk 爱玩机工具箱 ES 文件浏览器 Via 浏览器 b站(带漫游模块) Clash NoActive 手机性能排行 GKD(跳广告) 讯飞输入法: ios Apple music Telegram X Play 商店 MIUI 主题: 遇见IOS (AP景深宠物岛) 主题破解 win 软件 QQ 输入法 vscode 图吧工具箱 vivaldi 浏览器 Obsidian autoHotKey ; 将 Lalt 单键映射成ctrl LAlt::LCtrl ; 大写锁定 &amp;gt;&amp;gt; 回车键 CapsLock::Enter ; ` &amp;gt;&amp;gt; 退格键 `:: BackSpace +`::Delete ; F1 &amp;gt;&amp;gt; Home F1:: Home ; F2 &amp;gt;&amp;gt; end F2:: end </description>
    </item>
    
    <item>
      <title>数据结构和算法</title>
      <link>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</guid>
      <description> 参考 https://www.cs.usfca.edu/~galles/visualization/Algorithms
查找 评价指标: 查找长度(SL) 平均查找长度(ASL):考虑查找成功和失败的平均SL 顺序查找 O(n) def search_seq(ls,k): for i in range(len(ls)): if k == ls[i]: return i return -1 二分查找 O(Log2n) def search_bin(ls,k): low = 0 high = len(ls)-1 while low&amp;lt;=high: mid = (high-low)/2 if ls[mid] == k: return mid elif ls[mid]&amp;lt;k: high = mid+1 else: low = mid-1 如果取整为向上(向下),则左子树比右子数量大(小)1个或相等
排序 评价指标 稳定性 时间复杂度 空间复杂度 读写次数(外部排序时) 分类 数据是否全部在内存中 内部排序:数据都在内存中 外部排序:数据太多,无法全部放入内存中 直接插入排序 </description>
    </item>
    
    <item>
      <title>晚风</title>
      <link>https://ltao.cc/posts/%E6%AD%8C%E8%AF%8D/%E6%99%9A%E9%A3%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%AD%8C%E8%AF%8D/%E6%99%9A%E9%A3%8E/</guid>
      <description>作曲 : Copy/BT07-PZ
作词 : Copy/BT07-PZ
编曲：July
采样：星爷
混音：XTONE
将近的晚风快吹干整条小巷
燃尽的灯光无法再将我们点亮
要明白有些事情不能总靠想象
大不了今晚继续喝到明天早上
看不到希望的人还在自言自语说着
抱怨得不到温暖的人还在继续作着
他对着电话那头说着自己过得很好
挂断之后他又在被子里面偷偷哭了
不存在一帆风顺 偶尔也会去疯混
尽管有好多人讨论着你是什么门货
慢慢也有了分寸 不屑于那些争论
所以我大多数的时候都会选择沉默
付出的一切难免最后都会化为落尘
就算整个世界空绝就剩我独自一人
感觉到肩上重了 心里又再次痛了
把委屈偷偷收好索性忘掉那些过程
一个人漫无目的 迷失在晚风里
我知道后会无期 但也不能逃避
迷惘的日子 感谢能遇见你
究竟还要经历多少荆棘
也许该为我的选择庆幸
人活着到底为了什么东西忙碌可能为了一张到老也不够还清的账单
我每天碌碌无为却又感觉活的累总有人劝我别追梦了快去上班
混到头来不过为了一个名称
你喜欢的东西总有许多人争
他们随便动动手指就能得到的你却要付出百倍努力还要赌上你的人生
或许被打到鼻青脸肿也不敢还手吧
你知道后果没有人可以来为你承担
吃完泡面会撒谎自己的钱还有
一半是不想被担心一半怕再难堪
我没有他们那么出众没有开豪车的叔送
就这样其实我也无所谓
不就是被骂了两句并不值得你去选择放弃
听完这首歌就早点睡
一个人漫无目的 迷失在晚风里
我知道后会无期 但也不能逃避
迷惘的日子 感谢能遇见你
究竟还要经历多少荆棘
也许该为我的选择庆幸
你没做怎么知道没搞头
你不要做了 我劝你要脚踏实地的做人嘛
这里有份洗厕所的工作你先做着 你就别做梦了
做人如果没梦想 那跟咸鱼有什么分别啊
你连鞋都没有 那不就是咸鱼一条喽 还学人家讲理想？
话不能这么讲 我心中的一团火是不会熄的</description>
    </item>
    
    <item>
      <title>网站收藏</title>
      <link>https://ltao.cc/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</guid>
      <description> 学习网站 全历史 https://www.allhistory.com 今日热榜 https://tophub.today 知乎日报 https://tophub.today 网络工具 科学上网 机场巴巴 http://www.ckcloud.cc 白嫖机场 https://yyds.白嫖.net 机场推荐 http://www.maomeng.cf SMS-activate https://sms-activate.org 内网穿透 https://www.natfrp.com/ jsDelivr * vercel https://cloud.tencent.com/developer/article/1875306 nameSilo https://www.namesilo.com 软件工具 画图工具 https://handraw.top Chatgpt https://chat.openai.com hugo https://hugo.aiaide.com/post Lyricify https://github.com/WXRIW/Lyricify-App 颜色墙 http://zhongguose.com/#shangengzi Lunar https://6tail.cn/calendar/api.html fullcalendar https://fullcalendar.io/docs </description>
    </item>
    
    <item>
      <title>维基百科</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/</guid>
      <description>维基百科（Wikipedia）提供了一套API，允许开发者通过HTTP请求来获取和检索维基百科的内容。以下是一些关于维基百科API的基本信息：
维基百科 API 基本信息 Endpoint（终端点）： https://en.wikipedia.org/w/api.php （英语维基百科的API终端点，你可以替换 en 为其他语言标识符）
请求方式： 主要使用HTTP GET请求，但也支持POST请求。
返回格式： 默认返回JSON格式，也可以选择其他格式，如XML。
常用维基百科 API 请求参数 action（动作）： 定义API的行为，常见值包括 query（查询）、parse（解析）、opensearch（开放搜索）等。
format（格式）： 指定返回结果的格式，常见值包括 json 和 xml。
titles（标题）： 指定要查询的页面标题，可以是单个标题或多个标题。
pageid（页面ID）： 指定要查询的页面的ID，与标题二选一使用。
prop（属性）： 查询页面的属性，如 revisions（修订版本）、categories（分类）等。
rvprop（修订版本属性）： 用于指定 revisions 属性的具体内容，如 content（内容）、timestamp（时间戳）等。
redirects（重定向）： 控制是否将重定向页面包含在结果中。
limit（限制）： 用于限制查询结果的数量。
示例：获取页面内容 https://en.wikipedia.org/w/api.php?action=query&amp;amp;format=json&amp;amp;titles=Python_(programming_language)&amp;amp;prop=revisions&amp;amp;rvprop=content 这个例子用于获取“Python编程语言”页面的内容。你可以通过修改参数来执行不同的操作和查询其他页面。
请注意：使用维基百科API时，你可能需要遵循维基百科的使用政策和服务条款。详细的API文档和更多信息可以在 维基百科开发者页面找到。</description>
    </item>
    
    <item>
      <title>信息参考</title>
      <link>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/%E4%BF%A1%E6%81%AF%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/%E4%BF%A1%E6%81%AF%E5%8F%82%E8%80%83/</guid>
      <description> low high 悲观 乐观 紧张 放松 怀疑 自信 懒惰 勤劳 内向 外向 疲惫 兴奋 麻烦 方便 伤心 开心 肮脏 干净 虚假 真实 失败 胜利 轻盈 沉重 善变 稳定 冷淡 热烈 异常 正常 模糊 清晰 狭窄 宽阔 短暂 长久 温和 强硬 小气 大方 分离 统一 </description>
    </item>
    
    <item>
      <title>兴起</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B4%E8%B5%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B4%E8%B5%B7/</guid>
      <description> 首页美化计划 目的是增强博客的丰富度和内容,使得博客不再那么枯燥无味,并进一步将个人数据透明化和可视化
步骤如下
初步利用网页组件美化 搞定数据的存储和传输 图表可视化 万物皆有定数 方式: 系统api/相关软件/自行记录
数据格式: JSON
内容: 与我有关的所有数据,单位为天
步数 睡眠时长, 睡眠起始点 键盘输入字符数量 \ 鼠标点击次数 饮水量 \ 吃饭内容 洗澡 \ 洗头 购物记录 重要的定数 计算力 记忆力 意志力 一言 介绍 在息屏或者锁屏状态下显示一段话,可以运行在移动端或者PC端,每隔一定的时间按照某种顺序来切换另一段话,数据接口可以为本地或网络上的.JSON文件和.CSV文件等.
待定计划 短信应用开发 移动端和PC端应用开发 参考内容 http://blog.lwons.com/archieve/3_entity_search_databases.html https://languageresources.github.io/2018/03/07/%E8%8B%97%E8%8F%81%E8%8F%81_Wikidata%E7%9F%A5%E8%AF%86%E5%BA%93/ https://www.wikidata.org/w/api.php?action=wbsearchentities&amp;search=Fudan&amp;language=en&amp;limit=20&amp;format=json Wikipedia json数据 https://dumps.wikimedia.org/wikidatawiki/entities/ 有书可读方案 电子书 下载到本地 优秀的阅读体验 个人存储方案 NAS
好处在于可扩展存储，数据安全，价格也不算特别高
坏处在于速度和可用性需要网络支持，需要内网穿透或者公网IP，且需要24小时开启，费电
Type-C U盘
好处在于速度有保障、不需要依赖网络
坏处在于用时候没法充电，容易丢失，带来发热量，价格略贵
SD 卡 存储
好处在于速度有保障、不需要依赖网络
坏处在于容易丢失，带来发热量，价格贵
网络云盘（阿里云盘等）
好处在于可扩展存储，数据安全，价格也不算特别高
坏处在于速度和可用性需要运营商支持，一般来说，速度都比较慢
最后总结一下,四个存储方案,供大家参考
价格 读写速度 可扩展性 稳定性 其他问题 NAS 硬盘便宜,NAS本身贵,网费和电费月支 网速 多块硬盘 极其稳定 Type-C U盘 价格 SD 卡存储 网络云盘(阿里云盘等) </description>
    </item>
    
    <item>
      <title>修身</title>
      <link>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E4%BF%AE%E8%BA%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E4%B8%AA%E4%BA%BA/%E4%BF%AE%E8%BA%AB/</guid>
      <description> 内在 主要 11 点前睡觉 次要 不在手机上刷短视频 多看书 408科目复习 刷算法题 做 50道计算题 外在 主要 骑车回去 次要 20 个俯卧撑 100 个单腿,左50,右50 穿好衣服,整理仪容仪表 </description>
    </item>
    
    <item>
      <title>应用层-Q&amp;A</title>
      <link>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E5%BA%94%E7%94%A8%E5%B1%82-qa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E5%BA%94%E7%94%A8%E5%B1%82-qa/</guid>
      <description>应用层是指电脑上各种应用软件进程通过何种应用层协议来使用网络提供的通信服务
域名系统DNS是什么 域名系统是指 Internet 中用于把主机名字转换成IP的系统
为啥 IP 数据包不使用域名而是用 IP 地址呢 因为 IP 地址的长度是固定的32位或者固定的128位，而域名的长度是可变的
域名服务器DNS使用频率非常高，如何解决域名服务器可能出现的故障问题呢 域名服务器DNS被设计成联机分布式数据系统，采用B/S架构, 大多域名在本地进行解析,少量解析需要通过互联网.
域名到IP地址的解析过程是怎么样的呢 当应用需要将域名转 IP 地址时, 应用就调用解析程序( resolver ), 把待解析的域名放在 DNS 请求报文中, 以 UDP 方式发送给本地域名服务器,本地服务查找域名之后, 把对应的 IP 地址发送给应用主机.
域名是怎么组成的呢 早期是无层次的名字空间, 后来因为用户数量急剧增加, 管理这个域名集合空间非常困难, 互联网才用了层次树状结构的命名方法, 任何在互联网上的主机或者路由器, 都有一个唯一层次结构的名字(即域名)，域名由标号和点组成， 如www.baidu.com，其中com为顶层域名，baidu为二级域名，www为三级域名。
互联网域名空间是一个倒过来的树状结构，最上面的是根，根下面的第一层是顶级域名，第二层是二级域名，第三层是三级域名，以此类推，最后一层是叶子节点，也就是这主机名字。
域名中的标号是怎么规定的呢 由英文字母和数字组成，不区分大小写，每个标号不超过63个字符（为记忆最好不要超过12个字符）。
前面提到域名服务器是联机分布式数据系统，那么它是如何分布管理的呢 域名服务器采用分区的方法来管理，因为这样相比起按照域名来划分，会使域名服务器的数量太多，使域名系统的运行效率降低。
区（zone）是指域名服务器负责的范围。
域名服务器之间的解析过程是怎么样的呢？ 主机向本地域名服务器查询基本采用递归查询。
本地域名服务器想根域名服务器采用迭代查询。
文件传输协议有哪些？ 文件传输协议包括两种FTP和TFTP协议，FTP基于TCP支持文件传输和交互，而TFTP基于UDP支持文件传输不能交互。
TELNET 是什么协议？ TELNET 是一个基于TCP的简单远程终端协议，用于远程登录另一台主机。
WWW 、HTTP、HTML 是指什么？两者有什么关系 ？ WWW（World Wide Web）是一个基于HTTP协议的、分布式的、超文本的信息存储系统。
HTTP （HyperText Transfer Protocol）是一个无状态的、基于TCP的应用层协议。
URL 的格式？URL 是否区分大小写? &amp;lt;协议&amp;gt;://&amp;lt;主机&amp;gt;:&amp;lt;端口&amp;gt;/&amp;lt;路径&amp;gt;</description>
    </item>
    
    <item>
      <title>有书可读方案</title>
      <link>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/%E6%9C%89%E4%B9%A6%E5%8F%AF%E8%AF%BB%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E6%9D%82%E6%80%9D/%E6%9C%89%E4%B9%A6%E5%8F%AF%E8%AF%BB%E6%96%B9%E6%A1%88/</guid>
      <description> 电子书 下载到本地 优秀的阅读体验 </description>
    </item>
    
    <item>
      <title>运输层-Q&amp;A</title>
      <link>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%BF%90%E8%BE%93%E5%B1%82-qa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%BF%90%E8%BE%93%E5%B1%82-qa/</guid>
      <description>运输层是干啥的？为啥会有运输层 运输层是为进程与进程之间通信服务用的，规定了进程与进程之间应该以何种协议进行传输数据。
如果没有运输层，通信数据的传输将不可靠稳定，从而影响整个网络的通信速度质量。
运输层包括哪些协议内容？这些协议内容有哪些异同点？ 运输层主要包括TCP【传输控制协议】协议和UDP【用户数据报协议】协议。
不同点：
UDP 不需要建立连接直接发送数据包，TCP需要进行三次握手再发送数据 UDP支持一对一、一对多、多对一、多对多的相互通信，TCP支持一对一的点对点通信 UDP不保证数据传输能顺利抵达目的，TCP通过一些内部协议来保证数据传输的一定抵达目的 TCP 协议的三次握手四次挥手过程是怎么样的？ 三次握手是指客户端和服务端之间建立连接的过程，而四次挥手则是两者释放连接的过程。
第一次握手：客户向服务端主动发送信号【SYN】，具体内容为我已经准备好同步了，如果你要开始与同步，发送一个确认码ack给我（Acknowledge number，值我发送的随机码+1），代表你真的收到我发的东西了。</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式的所有元字符
正则表达式的所有元字符包括(markdown表格列出来)：
元字符 描述 . 匹配任意字符（除了换行符） \d 匹配数字字符 \D 匹配非数字字符 \w 匹配单词字符（字母、数字、下划线） \W 匹配非单词字符 \s 匹配空白字符（空格、制表符、换行符等） \S 匹配非空白字符 ^ 匹配字符串的开头 $ 匹配字符串的结尾 * 匹配前面的元素零次或多次 + 匹配前面的元素一次或多次 ? 表示前面的元素是可选的，匹配零次或一次 {n} 表示前面的元素恰好出现 n 次 {n,} 表示前面的元素至少出现 n 次 {n,m} 表示前面的元素出现 n 到 m 次之间 [] 字符集，匹配括号中任意一个字符 [^] 或 [^&amp;hellip;] 否定字符集，匹配除了括号中指定的任意字符之外的其他字符 </description>
    </item>
    
  </channel>
</rss>
