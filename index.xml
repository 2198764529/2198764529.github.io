<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>好记性不如烂笔头 on 李枫的地</title>
    <link>https://ltao.top/</link>
    <description>Recent content in 好记性不如烂笔头 on 李枫的地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://ltao.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git操作</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/</guid>
      <description> 覆盖本地 git fetch origin git reset --hard origin/&amp;lt;branch_name&amp;gt; </description>
    </item>
    
    <item>
      <title>Hugo 参考</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E5%8F%82%E8%80%83/</guid>
      <description>变量 .Site #️⃣ .AllPages: 所有页面的数组。 #️⃣ .BaseURL: 站点的基本 URL。 #️⃣ .BuildDrafts: 一个布尔值（默认为 false），指示是否构建草稿。 #️⃣ .Config: 站点的配置。 #️⃣ .Copyright: 网站的版权信息。 #️⃣ .Data: 网站的自定义数据。 #️⃣ .DisqusShortname: Disqus 短代码的 shortname。 #️⃣ .GetPage: 获取指定路径的页面。 #️⃣ .GoogleAnalytics: Google Analytics 的跟踪代码。 #️⃣ .Home: 网站的首页信息。 #️⃣ .IsDevelopment: 当前是否处于开发模式。 #️⃣ .IsMultiLingual: 网站是否支持多语言。 #️⃣ .IsServer: 当前是否处于服务器模式。 #️⃣ .Language: 当前网站的语言。 #️⃣ .LanguagePrefix: 语言前缀。 #️⃣ .Languages: 网站支持的语言列表。 #️⃣ .LastChange: 最近一次修改的日期。 #️⃣ .Lastmod: 最后修改的日期。 #️⃣ .MainSections: 主要部分列表。 #️⃣ .Menus: 网站的菜单列表。 #️⃣ .</description>
    </item>
    
    <item>
      <title>lfeng</title>
      <link>https://ltao.top/moments/lfeng/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/moments/lfeng/</guid>
      <description> 耐心是生活的关键 2024-04-10 @@@ 成功完成微信朋友圈的模仿 \images\personal\other\Pasted image 20240401181601.png 2024-04-01 @@@ 好记性不如烂笔头 https://avatars.githubusercontent.com/u/46187375 2024-04-01 </description>
    </item>
    
    <item>
      <title>markDown 语法</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/</guid>
      <description>标题：使用&amp;quot;#&amp;ldquo;字符表示标题，数量代表标题级别，最多支持6级标题。例如：
# 一级标题 ## 二级标题 ### 三级标题 ... ###### 六级标题 段落：段落之间以空行分隔。
强调：使用&amp;rdquo;*&amp;ldquo;或&amp;rdquo;_&amp;ldquo;将需要强调的文本包围起来。例如：
*斜体* _斜体_ **粗体** __粗体__ ***粗斜体*** ___粗斜体___ 列表：有序列表以数字和句点开始，无序列表以&amp;rdquo;*&amp;quot;、&amp;quot;+&amp;ldquo;或&amp;rdquo;-&amp;ldquo;开始。例如：
1. 第一项 2. 第二项 3. 第三项 - 无序列表项1 - 无序列表项2 - 嵌套的无序列表项 - 更深层次的无序列表项 * 无序列表项A * 无序列表项B * 嵌套的无序列表项 * 更深层次的无序列表项 + 无序列表项X + 无序列表项Y + 嵌套的无序列表项 + 更深层次的无序列表项 链接：使用&amp;rdquo; 链接文本&amp;ldquo;的格式添加链接。例如：
[Google](https://www.google.com) 图片：使用&amp;rdquo; &amp;ldquo;的格式插入图片。例如：
![示例图片](https://example.com/image.jpg) 引用：使用&amp;rdquo;&amp;gt;&amp;ldquo;字符表示引用。例如：
&amp;gt; 这是一段引用的文本。 代码块：使用三个反引号(`)包围代码块，并在开始位置指定代码语言（可选）。例如：
def hello_world(): print(&amp;#34;Hello, world!&amp;#34;) 表格：使用&amp;rdquo;|&amp;ldquo;和&amp;rdquo;-&amp;ldquo;分隔表头和表格内容，并使用&amp;rdquo;:&amp;ldquo;来对齐表格内容。例如：
| 列1标题 | 列2标题 | |---------|---------| | 内容1 | 内容2 | | 内容3 | 内容4 | 左对齐列1标题 | 右对齐列2标题 :------------|-------------: 左对齐内容1 | 右对齐内容2 左对齐内容3 | 右对齐内容4 水平线：使用三个或更多连续的&amp;rdquo;*&amp;quot;、&amp;quot;-&amp;ldquo;或&amp;rdquo;_&amp;ldquo;表示水平线。例如：</description>
    </item>
    
    <item>
      <title>python 方法参考</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>以下内容由 ChatGPT 生成, 仅供学习参考
目录 文件处理（os、io） 网络编程（socket、urllib） 日期和时间处理（datetime、time） 数学运算（math、random） 字符串处理（re、string） 数据结构（list、tuple、dict、set） 对象编程（class、object） 错误处理（try、except） 文件处理（os、io） import os import io #️⃣ os 模块 # 获取和更改当前工作目录 current_directory = os.getcwd() # 返回当前工作目录 os.chdir(&amp;#39;/path/to/directory&amp;#39;) # 改变当前工作目录 # 列出目录内容 contents = os.listdir(&amp;#39;.&amp;#39;) # 列出当前目录中的所有文件和目录 # 创建和删除目录 os.mkdir(&amp;#39;new_directory&amp;#39;) # 创建新目录 os.makedirs(&amp;#39;parent/child_directory&amp;#39;) # 递归创建目录 os.rmdir(&amp;#39;new_directory&amp;#39;) # 删除目录（仅当目录为空时） os.removedirs(&amp;#39;parent/child_directory&amp;#39;) # 递归删除目录 # 删除文件 os.remove(&amp;#39;file.txt&amp;#39;) # 删除文件 os.unlink(&amp;#39;file.txt&amp;#39;) # 删除文件，与 os.remove 功能相同 # 重命名文件或目录 os.rename(&amp;#39;old_name.txt&amp;#39;, &amp;#39;new_name.txt&amp;#39;) # 重命名文件或目录 os.renames(&amp;#39;old_directory&amp;#39;, &amp;#39;new_directory&amp;#39;) # 递归重命名文件或目录 # 文件和目录属性 exists = os.</description>
    </item>
    
    <item>
      <title>关于篮球</title>
      <link>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%AF%AE%E7%90%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E7%AF%AE%E7%90%83/</guid>
      <description>健壮的身体和娴熟的技术
关于投篮 动作要点: 调整脚步,左脚在前,右脚在后 想象下面有个凳子坐下去,接着像弹簧一样起来 辅助手确定最左出手范围，控制方向 直臂出手,打直手腕 手指拨球,压腕让球保持高度和旋速 保持投篮动作 目标是弧度尽量高，发力尽量轻松 要往上发力投篮，就要往下下面压，下半身和上半身要发力不脱节 投篮手不要抓球，食指和中指张开，压腕时合拢 辅助手确定投篮范围，控制方向 在脚发力完成之前， 投篮夹角＜90度 投篮弧度要是一个抛物线，高度要高于篮板上沿 几个重要的指标：球旋速、球高度 关于上篮 果冻上篮，手心正对着篮板，旋球到篮板的左上角或者右上角 多观察全局位置 攻击前侧脚 关于运球 减少运球时间 只突破不经常终结，多多分球 踮脚尖走路能锻炼小腿肌肉和踝关节稳定性。 一直收肚子能减少身体负担 </description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E6%88%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B3%E4%BA%8E%E6%88%91/</guid>
      <description>个人介绍 23 岁, 1年工作经验,软工专业, 一名软件开发者。
热爱互联网行业, 擅长做后端开发, 略懂一点对话AI。
爱做项目, 编程 5 年间, 有 15+ 独立项目开发经验 。
喜欢记录总结, www.ltao.top 博客目前已运行近 1 年
个人经历 大学期间, 我自学了多种编程语言和技术栈, 包括Python 后端、前端、大数据等，大三曾取得金砖大赛国二奖,
大四毕业取得湖南省程序设计二等奖和省优秀毕业生,并以基于用户行为的新能源充电桩项目入选校企合作名单。
毕业后, 实习顺利入职湖南超能机器人做 AI 对话, 作为项目核心开发者,将该 AI 对话项目由零迭代到上线。
目前就职深圳亿达信息， 担任 Python 工程师, 负责公司后端接口开发与测试。
工作经历 2021年11月-2023年3月 湖南超能机器人 AI助理 智能问诊项目 负责人 清洗训练数据近 2w 条, 处理NLU 和 NLG 部分工作, 并对接后端开始内部测试 从零推动 AI 对话项目版本迭代到上线开售 2023年4月-至今 深圳亿达信息 Python开发 支付分账项目 参与者 迭代项目版本 测试 技术栈 熟悉Python的Django,Flask等后端框架，掌握基本的数据结构和常见算法 熟悉Linux系统应用部署以及管理，能独立部署项目到服务器 联系我 邮箱: liao4256@qq.com</description>
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>概览图 网络层 _ 设计思路 简单灵活的,无连接的,尽最大努力交付的数据报服务 IP\nInternet Protocol\n网际协议 [#FFBBCC] 配套协议 ARP\nAddress Resolution Protocol\n地址解析协议(IP-&amp;gt;MAC) ICMP\nInternet Control Message Protocol\n控制报文协议 IGMP\nInternet Group Management Protocol\n网际租管理协议 [#FFBBCC] IP 地址编址 历史发展阶段, 分类的IP地址&amp;gt;&amp;gt;子网的划分&amp;gt;&amp;gt;构成超网 构成 {&amp;lt;网络号&amp;gt;,&amp;lt;主机号&amp;gt;} 分类 A 类,{ &amp;lt;网络号(开头为0),8位&amp;gt;,&amp;lt;主机号,24位&amp;gt;} B 类,{ &amp;lt;网络号(开头为10),16位&amp;gt;,&amp;lt;主机号,16位&amp;gt;} C 类,{ &amp;lt;网络号(开头为110),24位&amp;gt;,&amp;lt;主机号,8位&amp;gt;} D 类,开头为1110,多播地址 E 类,保留为今后使用 ARP\nAddress Resolution Protocol\n地址解析协议 功能:用IP地址找到局域网内的对应硬件地址 关键词:ARP cache, 广播, 局域网 过程:广播问局域网内主机对应IP的MAC地址,\n匹配主机单播回应 应用层 应用层协议是为了各应用进程需要不同的通信规则而存在的, 也是要依赖运输层所提供的基本通信服务。
概念 应用层主要包括以下内容
域名系统 DNS WWW 和 HTTP 协议 电子邮件的相关协议，SMTP 协议和 POP3 协议、IMAP 协议 域名系统 DNS DNS 的作用是将域名转为IP地址，具体的过程是应用进程调用 resolver（解析程序），发送包含待解析的域名的 DNS 请求报文，通过 UDP 进行再包装发送到本地域名服务器，本地域名服务器搜索以后，把对应的 IP 地址放在回答报文返回。</description>
    </item>
    
    <item>
      <title>技术记录</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/</guid>
      <description>进制转换 hugo 添加mermaid作图 在 footer.html(页面尾部) 添加以下代码,即可启用mermaid作图
{{ if (.Params.mermaid) }} &amp;lt;!-- MermaidJS support --&amp;gt; &amp;lt;script async src=&amp;#34;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // Replace mermaid pre.code to div Array.from(document.getElementsByClassName(&amp;#34;language-mermaid&amp;#34;)).forEach( (el) =&amp;gt; { el.parentElement.outerHTML = `&amp;lt;div class=&amp;#34;mermaid&amp;#34;&amp;gt;${el.innerText}&amp;lt;/div&amp;gt;`; } ); &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; /* Set svg to center */ .mermaid svg { display: block; margin: auto; } &amp;lt;/style&amp;gt; {{ end }} 参考
https://cloud.tencent.com/developer/article/1944123
https://note.qidong.name/2020/07/mermaid/
CSS 字体 在CSS中，font-size属性可以使用多种单位来指定字体大小。以下是一些常见的font-size单位：
😋
像素（px）：像素是绝对单位，它会直接指定字体的像素大小。例如，font-size: 16px; 将文本字体设置为16像素高。
磅（pt）：磅是印刷单位，通常用于打印。1磅等于1/72英寸，因此它也可以用于屏幕上的字体大小。例如，font-size: 12pt; 将字体设置为12磅。
毫米（mm）：毫米是长度单位，也可以用于字体大小。例如，font-size: 5mm; 将字体大小设置为5毫米。</description>
    </item>
    
    <item>
      <title>清单</title>
      <link>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E6%B8%85%E5%8D%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E6%B8%85%E5%8D%95/</guid>
      <description> 软件 【安卓手机】appShare、ES 文件浏览器、Via 浏览器、 b站(带漫游模块)、Clash、手机性能排行、Apple music、微信输入法
【win】vscode、obsidian、vivaldi（Dark Reader、AdGuard、Stylus、Tampermonkey）、图吧工具箱、autoHotkey（改键位）、 winget
硬件 宏基传奇Edge：
机身规格： 356.7242.312.95mm， 1.17kg 屏幕：16英寸，4k，OLED，E4，屏占比92%，支持HDR500，德国莱茵TUV硬件级低蓝光认证和eyesafe显示认证 性能：R7-6800U，16GB LPDDR5 6400MHz双通道内存，512GB PCIe 4.0 SSD，54Wh 续航8小时 外设接口：单色背光，电源指纹二合一，前置FHD摄像头（支持TNR时域降噪和AI降噪），Wifi 6e 和蓝牙5.2，2个全功能Type-C接口中、1个HDMI接口、2个USB3.2接口、1个耳麦接口 其他：标配65W Type-C 适配器， 附录 【autoHotkey-changeKeys.ahk】：
; Esc 映射成 AltTab *Esc::send &amp;#34;{Blind}!{Tab}&amp;#34; ; 左Alt -&amp;gt;Ctrl *LAlt::Ctrl ;大写键-&amp;gt;回车键 *CapsLock::Enter ;Tab键 -&amp;gt;删除键 *Tab::Backspace ; `键 -&amp;gt; Tab键 *`::Tab ;win+鼠标滚轮上(下滚)滚增加(减少)音量 ;win+点击鼠标滚轮暂停或者播放 A_HotkeyInterval := 0 #WheelUp::Volume_Up #WheelDown::Volume_Down #MButton::Media_Play_Pause ;禁用按win键开始菜单弹出,快捷键不受影响 ~LWin::Send &amp;#34;{Blind}{vkE8}&amp;#34; </description>
    </item>
    
    <item>
      <title>设计语言</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/</guid>
      <description>颜色 颜色要醒目, 令人舒适
不同颜色, 代表不同意义
重的亮深, 轻的暗浅
大小 字多字小, 字段字大
重的大, 轻的小
留白 标志 下划线: 超链接</description>
    </item>
    
    <item>
      <title>数据结构和算法</title>
      <link>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</guid>
      <description>参考 https://www.cs.usfca.edu/~galles/visualization/Algorithms
https://algo.itcharge.cn
https://www.hello-algo.com
https://pdai.tech/md/algorithm/alg-basic-overview.html
https://www.runoob.com/w3cnote/ten-sorting-algorithm.html
https://www.runoob.com/w3cnote/selection-sort.html
排序算法 冒泡排序
两两比较, 符合规则就换, 接着滑动窗口往后移动
选择排序
每次选最大的(无序区)放到最后(有序区)
插入排序
每次选的元素插入到有序区,类似打牌时的排序
在第五步排序的过程。程序运行到当前位置，已排好的子表中包含了 “17，26，54，77，93”五个数据。我们想让31插入该子表中。第一次，31和93比较，93要移到 31右边。同理，77和54也要移位。遇到26时，移动步骤停止，31被插入到此处。此时我们就有了 一个含6个数据项的已排好的子表
快速排序
归并排序
堆排序
桶排序
计数排序
基数排序
树 完美二叉树(满二叉树) 所有节点都是满的
完满二叉树 只有叶子节点未满，且叶子节点尽量靠左填充。
平衡二叉树 任何两个子树高度差小于2</description>
    </item>
    
    <item>
      <title>数学知识</title>
      <link>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</guid>
      <description>等比数列公式 进制转换 十进制转二进制 十进制数转换为二进制数时，由于整数和小数的转换方法不同，所以先将十进制数的整数部分和小数部分分别转换后，再加以合并。
十进制整数转换为二进制整数采用&amp;quot;除2取余，逆序排列&amp;quot;法。具体做法是：用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为0时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。
二进制转十进制 要从右到左用二进制的每个数去乘以2的相应次方，或者把二进制数首先写成加权系数展开式，然后按十进制加法规则求和。这种做法称为&amp;quot;按权相加&amp;quot;法。
二进制数1000110转成十进制数可以看作这样：
数字中共有三个1 即第一位一个，第二位一个，第六位一个，然后对应十进制数即2的1次方+2的2次方+2的6次方， 即1000110=64+0+0+0+4+2+0=70</description>
    </item>
    
    <item>
      <title>网站收藏</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</guid>
      <description> 学习网站 全历史 https://www.allhistory.com 今日热榜 https://rebang.today 计网 http://home.ustc.edu.cn/~chaf/course/network.html https://www.runoob.com/w3cnote/summary-of-network.html 软件工具 画图工具 https://handraw.top Chatgpt https://chat.openai.com 科学上网 追云加速 https://www.zhuiyun.shop 一元机场 https://yfh4rrze3snwnnwj.xn--4gq62f52gdss.vip/ 机场推荐 http://www.maomeng.cf kaggle https://www.kaggle.com SMS-activate https://sms-activate.org 内网穿透 https://www.natfrp.com/ autoHotKey https://wyagd001.github.io/v2/docs/ 建站参考 hugo https://hugo.aiaide.com/post
另一个hugo文档 https://gohugobrasil.netlify.app
Lyricify https://github.com/WXRIW/Lyricify-App
颜色墙 http://zhongguose.com/#shangengzi
博客部署
nameSilo https://www.namesilo.com 阿里云 https://cn.aliyun.com Vercel https://vercel.com jsDelivr * vercel https://cloud.tencent.com/developer/article/1875306 元素生成
digraph https://zhuanlan.zhihu.com/p/21993254 fullcalendar https://fullcalendar.io/docs Lunar https://6tail.cn/calendar/api.html graphviz https://graphviz.org plantuml https://plantuml.com/zh/ 参考博客
干志雄 https://ganzhixiong.com 雷雷屋头 https://ll.sc.cn </description>
    </item>
    
    <item>
      <title>维基百科</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/</guid>
      <description>维基百科（Wikipedia）提供了一套API，允许开发者通过HTTP请求来获取和检索维基百科的内容。以下是一些关于维基百科API的基本信息：
维基百科 API 基本信息 Endpoint（终端点）： https://en.wikipedia.org/w/api.php （英语维基百科的API终端点，你可以替换 en 为其他语言标识符）
请求方式： 主要使用HTTP GET请求，但也支持POST请求。
返回格式： 默认返回JSON格式，也可以选择其他格式，如XML。
常用维基百科 API 请求参数 action（动作）： 定义API的行为，常见值包括 query（查询）、parse（解析）、opensearch（开放搜索）等。
format（格式）： 指定返回结果的格式，常见值包括 json 和 xml。
titles（标题）： 指定要查询的页面标题，可以是单个标题或多个标题。
pageid（页面ID）： 指定要查询的页面的ID，与标题二选一使用。
prop（属性）： 查询页面的属性，如 revisions（修订版本）、categories（分类）等。
rvprop（修订版本属性）： 用于指定 revisions 属性的具体内容，如 content（内容）、timestamp（时间戳）等。
redirects（重定向）： 控制是否将重定向页面包含在结果中。
limit（限制）： 用于限制查询结果的数量。
示例：获取页面内容 https://en.wikipedia.org/w/api.php?action=query&amp;amp;format=json&amp;amp;titles=Python_(programming_language)&amp;amp;prop=revisions&amp;amp;rvprop=content 这个例子用于获取“Python编程语言”页面的内容。你可以通过修改参数来执行不同的操作和查询其他页面。
请注意：使用维基百科API时，你可能需要遵循维基百科的使用政策和服务条款。详细的API文档和更多信息可以在 维基百科开发者页面找到。</description>
    </item>
    
    <item>
      <title>五笔输入法</title>
      <link>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E4%BA%94%E7%AC%94%E8%BE%93%E5%85%A5%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E4%BA%94%E7%AC%94%E8%BE%93%E5%85%A5%E6%B3%95/</guid>
      <description> 笔画
笔画是指汉字书写时不间断的一次连续写成的一个线条 字根
笔画交叉复合而成的固定结构,是构成汉字的最基本单位 不符规律的键位 横 G[五] F[二] D[古] S[木丁西] A[工] 竖 </description>
    </item>
    
    <item>
      <title>兴起</title>
      <link>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B4%E8%B5%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E5%85%B4%E8%B5%B7/</guid>
      <description> 首页美化计划 目的是增强博客的丰富度和内容,使得博客不再那么枯燥无味,并进一步将个人数据透明化和可视化
步骤如下
初步利用网页组件美化 搞定数据的存储和传输 图表可视化 万物皆有定数 方式: 系统api/相关软件/自行记录
数据格式: JSON
内容: 与我有关的所有数据,单位为天
步数 睡眠时长, 睡眠起始点 键盘输入字符数量 \ 鼠标点击次数 饮水量 \ 吃饭内容 洗澡 \ 洗头 购物记录 重要的定数 计算力 记忆力 意志力 一言 介绍 在息屏或者锁屏状态下显示一段话,可以运行在移动端或者PC端,每隔一定的时间按照某种顺序来切换另一段话,数据接口可以为本地或网络上的.JSON文件和.CSV文件等.
待定计划 短信应用开发 移动端和PC端应用开发 参考内容 http://blog.lwons.com/archieve/3_entity_search_databases.html https://languageresources.github.io/2018/03/07/%E8%8B%97%E8%8F%81%E8%8F%81_Wikidata%E7%9F%A5%E8%AF%86%E5%BA%93/ https://www.wikidata.org/w/api.php?action=wbsearchentities&amp;search=Fudan&amp;language=en&amp;limit=20&amp;format=json Wikipedia json数据 https://dumps.wikimedia.org/wikidatawiki/entities/ 有书可读方案 电子书 下载到本地 优秀的阅读体验 个人存储方案 NAS
好处在于可扩展存储，数据安全，价格也不算特别高
坏处在于速度和可用性需要网络支持，需要内网穿透或者公网IP，且需要24小时开启，费电
Type-C U盘
好处在于速度有保障、不需要依赖网络
坏处在于用时候没法充电，容易丢失，带来发热量，价格略贵
SD 卡 存储
好处在于速度有保障、不需要依赖网络
坏处在于容易丢失，带来发热量，价格贵
网络云盘（阿里云盘等）
好处在于可扩展存储，数据安全，价格也不算特别高
坏处在于速度和可用性需要运营商支持，一般来说，速度都比较慢
最后总结一下,四个存储方案,供大家参考
价格 读写速度 可扩展性 稳定性 其他问题 NAS 硬盘便宜,NAS本身贵,网费和电费月支 网速 多块硬盘 极其稳定 Type-C U盘 价格 SD 卡存储 网络云盘(阿里云盘等) </description>
    </item>
    
    <item>
      <title>修身</title>
      <link>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E4%BF%AE%E8%BA%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E4%B8%AA%E4%BA%BA/%E4%BF%AE%E8%BA%AB/</guid>
      <description> 定时 定时体检,选重要的关键的体检项目, 原则 极简, 如无必要勿增实体 实用, 凡事要看它有没有用 长远, 不要只关注今天和昨天 果断, 当断不断,必受其乱 耐心, 不要傲慢和偏见 稳步, 区分轻重缓急 隔离，工作，娱乐，休息三者的时间空间不能相同 必做 11 点前睡觉
不在手机上刷短视频
多看书
408科目复习
刷算法题
做 50道计算题
骑车回去
20 个俯卧撑
100 个单腿,左50,右50
穿好衣服,整理仪容仪表
打球
交流 求同存异, 不说服, 列事实 </description>
    </item>
    
    <item>
      <title>应用层-Q&amp;A</title>
      <link>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E5%BA%94%E7%94%A8%E5%B1%82-qa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E5%BA%94%E7%94%A8%E5%B1%82-qa/</guid>
      <description>应用层是指电脑上各种应用软件进程通过何种应用层协议来使用网络提供的通信服务
域名系统DNS是什么 域名系统是指 Internet 中用于把主机名字转换成IP的系统
为啥 IP 数据包不使用域名而是用 IP 地址呢 因为 IP 地址的长度是固定的32位或者固定的128位，而域名的长度是可变的
域名服务器DNS使用频率非常高，如何解决域名服务器可能出现的故障问题呢 域名服务器DNS被设计成联机分布式数据系统，采用B/S架构, 大多域名在本地进行解析,少量解析需要通过互联网.
域名到IP地址的解析过程是怎么样的呢 当应用需要将域名转 IP 地址时, 应用就调用解析程序( resolver ), 把待解析的域名放在 DNS 请求报文中, 以 UDP 方式发送给本地域名服务器,本地服务查找域名之后, 把对应的 IP 地址发送给应用主机.
域名是怎么组成的呢 早期是无层次的名字空间, 后来因为用户数量急剧增加, 管理这个域名集合空间非常困难, 互联网才用了层次树状结构的命名方法, 任何在互联网上的主机或者路由器, 都有一个唯一层次结构的名字(即域名)，域名由标号和点组成，如 www.baidu.com ，其中com为顶层域名，baidu为二级域名，www为三级域名。
互联网域名空间是一个倒过来的树状结构，最上面的是根，根下面的第一层是顶级域名，第二层是二级域名，第三层是三级域名，以此类推，最后一层是叶子节点，也就是这主机名字。
域名中的标号是怎么规定的呢 由英文字母和数字组成，不区分大小写，每个标号不超过63个字符（为记忆最好不要超过12个字符）。
前面提到域名服务器是联机分布式数据系统，那么它是如何分布管理的呢 域名服务器采用分区的方法来管理，因为这样相比起按照域名来划分，会使域名服务器的数量太多，使域名系统的运行效率降低。
区（zone）是指域名服务器负责的范围。
域名服务器之间的解析过程是怎么样的呢？ 主机向本地域名服务器查询基本采用递归查询。
本地域名服务器想根域名服务器采用迭代查询。
文件传输协议有哪些？ 文件传输协议包括两种FTP和TFTP协议，FTP基于TCP支持文件传输和交互，而TFTP基于UDP支持文件传输不能交互。
TELNET 是什么协议？ TELNET 是一个基于TCP的简单远程终端协议，用于远程登录另一台主机。
WWW 、HTTP、HTML 是指什么？两者有什么关系 ？ WWW（World Wide Web）是一个基于HTTP协议的、分布式的、超文本的信息存储系统。
HTTP （HyperText Transfer Protocol）是一个无状态的、基于TCP的应用层协议。
URL 的格式？URL 是否区分大小写? &amp;lt;协议&amp;gt;://&amp;lt;主机&amp;gt;:&amp;lt;端口&amp;gt;/&amp;lt;路径&amp;gt;</description>
    </item>
    
    <item>
      <title>运输层-Q&amp;A</title>
      <link>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%BF%90%E8%BE%93%E5%B1%82-qa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E8%BF%90%E8%BE%93%E5%B1%82-qa/</guid>
      <description>运输层是干啥的？为啥会有运输层 运输层是为进程与进程之间通信服务用的，规定了进程与进程之间应该以何种协议进行传输数据。
如果没有运输层，通信数据的传输将不可靠稳定，从而影响整个网络的通信速度质量。
运输层包括哪些协议内容？这些协议内容有哪些异同点？ 运输层主要包括TCP【传输控制协议】协议和UDP【用户数据报协议】协议。
不同点：
UDP 不需要建立连接直接发送数据包，TCP需要进行三次握手再发送数据 UDP支持一对一、一对多、多对一、多对多的相互通信，TCP支持一对一的点对点通信 UDP不保证数据传输能顺利抵达目的，TCP通过一些内部协议来保证数据传输的一定抵达目的 TCP 协议的三次握手四次挥手过程是怎么样的？ 三次握手是指客户端和服务端之间建立连接的过程，而四次挥手则是两者释放连接的过程。
第一次握手：客户向服务端主动发送信号【SYN】，具体内容为我已经准备好同步了，如果你要开始与同步，发送一个确认码ack给我（Acknowledge number，值我发送的随机码+1），代表你真的收到我发的东西了。</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式的所有元字符
正则表达式的所有元字符包括(markdown表格列出来)：
元字符 描述 . 匹配任意字符（除了换行符） \d 匹配数字字符 \D 匹配非数字字符 \w 匹配单词字符（字母、数字、下划线） \W 匹配非单词字符 \s 匹配空白字符（空格、制表符、换行符等） \S 匹配非空白字符 ^ 匹配字符串的开头 $ 匹配字符串的结尾 * 匹配前面的元素零次或多次 + 匹配前面的元素一次或多次 ? 表示前面的元素是可选的，匹配零次或一次 {n} 表示前面的元素恰好出现 n 次 {n,} 表示前面的元素至少出现 n 次 {n,m} 表示前面的元素出现 n 到 m 次之间 [] 字符集，匹配括号中任意一个字符 [^] 或 [^&amp;hellip;] 否定字符集，匹配除了括号中指定的任意字符之外的其他字符 </description>
    </item>
    
    <item>
      <title>中国</title>
      <link>https://ltao.top/moments/%E4%B8%AD%E5%9B%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.top/moments/%E4%B8%AD%E5%9B%BD/</guid>
      <description> 改革开放由中国共产党第二代中央领导集体核心邓小平提出和创立，是在1978年12月18日中共十一届三中全会后，开始实施的一系列以经济为主的改革措施，可总结为“对内改革，对外开放” https://photocdn.sohu.com/20081008/Img259904537.jpg 1979-04-01 @@@ “中华人民共和国! 中央人民政府! 今天成立了！” https://www.gov.cn/test/images/images/00188b27c9090bf5a75813.jpg 1949-10-01 </description>
    </item>
    
  </channel>
</rss>
