<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 李枫的地</title>
    <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 李枫的地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git操作</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/git%E6%93%8D%E4%BD%9C/</guid>
      <description>Git 所有操作及命令 # Git 是一个分布式版本控制系统，常用于管理代码的版本和协作开发。以下是 Git 的一些常用操作和命令：
usage: git [-v | --version] [-h | --help] [-C &amp;lt;path&amp;gt;] [-c &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;] [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;] [--config-env=&amp;lt;name&amp;gt;=&amp;lt;envvar&amp;gt;] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects Git diff # 在默认的 Git diff 输出中，您通常会看到以下内容：</description>
    </item>
    
    <item>
      <title>Hugo 方法参考</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/hugo-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>String:用于字符串处理 # trim ：从字符串中删除前导和尾随空格。 # {{ trim &amp;#34; 你好，世界！ &amp;#34; }} upper ：将字符串转换为小写或大写。 # {{ lower &amp;#34;你好&amp;#34; }} {{ upper &amp;#34;world&amp;#34; }} title ：将字符串中每个单词的首字母转换为大写。 # {{ title &amp;#34;hello world&amp;#34; }} replace ：用另一个子字符串替换子字符串的出现。 # {{ replace &amp;#34;你好，世界！&amp;#34; &amp;#34;你好&amp;#34; &amp;#34;嗨&amp;#34; }} substr ：返回给定字符串的子字符串，从指定位置开始，可选长度。 # {{ substr &amp;#34;你好，世界！&amp;#34; 7 5 }} len ：返回字符串的长度。 # {{ len &amp;#34;你好，世界！&amp;#34; }} printf ：使用fmt.Printf语法格式化字符串。 # {{ printf &amp;#34;你好，%s！&amp;#34; &amp;#34;世界&amp;#34; }} urlize ：将字符串转换为适合URL的格式。 # {{ urlize &amp;#34;这是一个示例字符串&amp;#34; }} humanize ：将字符串转换为人类可读的格式。 # {{ humanize &amp;#34;some_string&amp;#34; }} pluralize ：基于计数返回词的复数形式。 # {{ with index .</description>
    </item>
    
    <item>
      <title>markDown 语法</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/markdown-%E8%AF%AD%E6%B3%95/</guid>
      <description>标题：使用&amp;quot;#&amp;ldquo;字符表示标题，数量代表标题级别，最多支持6级标题。例如：
# 一级标题 ## 二级标题 ### 三级标题 ... ###### 六级标题 段落：段落之间以空行分隔。
强调：使用&amp;rdquo;*&amp;ldquo;或&amp;rdquo;_&amp;ldquo;将需要强调的文本包围起来。例如：
*斜体* _斜体_ **粗体** __粗体__ ***粗斜体*** ___粗斜体___ 列表：有序列表以数字和句点开始，无序列表以&amp;rdquo;*&amp;quot;、&amp;quot;+&amp;ldquo;或&amp;rdquo;-&amp;ldquo;开始。例如：
1. 第一项 2. 第二项 3. 第三项 - 无序列表项1 - 无序列表项2 - 嵌套的无序列表项 - 更深层次的无序列表项 * 无序列表项A * 无序列表项B * 嵌套的无序列表项 * 更深层次的无序列表项 + 无序列表项X + 无序列表项Y + 嵌套的无序列表项 + 更深层次的无序列表项 链接：使用&amp;rdquo; 链接文本&amp;ldquo;的格式添加链接。例如：
[Google](https://www.google.com) 图片：使用&amp;rdquo; &amp;ldquo;的格式插入图片。例如：
![示例图片](https://example.com/image.jpg) 引用：使用&amp;rdquo;&amp;gt;&amp;ldquo;字符表示引用。例如：
&amp;gt; 这是一段引用的文本。 代码块：使用三个反引号(`)包围代码块，并在开始位置指定代码语言（可选）。例如：
def hello_world(): print(&amp;#34;Hello, world!&amp;#34;) 表格：使用&amp;rdquo;|&amp;ldquo;和&amp;rdquo;-&amp;ldquo;分隔表头和表格内容，并使用&amp;rdquo;:&amp;ldquo;来对齐表格内容。例如：
| 列1标题 | 列2标题 | |---------|---------| | 内容1 | 内容2 | | 内容3 | 内容4 | 左对齐列1标题 | 右对齐列2标题 :------------|-------------: 左对齐内容1 | 右对齐内容2 左对齐内容3 | 右对齐内容4 水平线：使用三个或更多连续的&amp;rdquo;*&amp;quot;、&amp;quot;-&amp;ldquo;或&amp;rdquo;_&amp;ldquo;表示水平线。例如：</description>
    </item>
    
    <item>
      <title>python 方法参考</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/python-%E6%96%B9%E6%B3%95%E5%8F%82%E8%80%83/</guid>
      <description>Number(数字) # ceil(x)： 返回不小于 x 的最小整数 # import math result = math.ceil(4.2) # 返回 5 floor(x)： 返回不大于 x 的最大整数 # import math result = math.floor(4.8) # 返回 4 sqrt(x)： 返回 x 的平方根 # import math result = math.sqrt(25) # 返回 5.0 pow(x, y)： 返回 x 的 y 次方 # import math result = math.pow(2, 3) # 返回 8.0 exp(x)： 返回 e 的 x 次方 # import math result = math.</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ltao.cc/posts/%E5%B7%A5%E5%85%B7%E6%8A%80%E6%9C%AF/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式的所有元字符
正则表达式的所有元字符包括(markdown表格列出来)：
元字符 描述 . 匹配任意字符（除了换行符） \d 匹配数字字符 \D 匹配非数字字符 \w 匹配单词字符（字母、数字、下划线） \W 匹配非单词字符 \s 匹配空白字符（空格、制表符、换行符等） \S 匹配非空白字符 ^ 匹配字符串的开头 $ 匹配字符串的结尾 * 匹配前面的元素零次或多次 + 匹配前面的元素一次或多次 ? 表示前面的元素是可选的，匹配零次或一次 {n} 表示前面的元素恰好出现 n 次 {n,} 表示前面的元素至少出现 n 次 {n,m} 表示前面的元素出现 n 到 m 次之间 [] 字符集，匹配括号中任意一个字符 [^] 或 [^&amp;hellip;] 否定字符集，匹配除了括号中指定的任意字符之外的其他字符 </description>
    </item>
    
  </channel>
</rss>
